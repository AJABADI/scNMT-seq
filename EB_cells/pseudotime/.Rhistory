opts <- list()
opts$metrna_annos <- c("Active enhancers","Primed enhancers","Super enhancers","CTCF","Nanog","non-CGI promoters","Oct4","p300")
opts$accrna_annos <- c("Active enhancers","Primed enhancers","Super enhancers","CTCF","Nanog","non-CGI promoters","Oct4","p300")
# Load methylation/RNA correlations
metrna <- fread("/Users/ricard/NMT-seq/rebuttal/EB/correlations/out/metrna/metrna_cor_features.tsv", header=T) %>%
.[,type:="CG"]# %>% .[anno%in%opts$metrna_annos]
# Load accessibility/RNA correlations
accrna <- fread("/Users/ricard/NMT-seq/rebuttal/EB/correlations/out/accrna/accrna_cor_features.tsv", header=T) %>%
.[,type:="GC"]# %>% .[anno%in%opts$accrna_annos]
# Load accessibility/methylation correlations
metacc <- fread("/Users/ricard/NMT-seq/rebuttal/EB/correlations/out/metacc/metacc_cor_features.tsv", header=T) %>%
.[,type:="CGC"]# %>% .[anno%in%opts$metacc_annos]
# Load pseudotime trajectory
pseudotime <- fread("/Users/ricard/NMT-seq/rebuttal/EB/pseudotime/out/destiny.tsv", header=T ) # destiny
tmp <- rbind(metrna,accrna,metacc) %>% merge(pseudotime, by="sample") %>%
.[,pseudotime:=pseudotime]
ggplot(tmp[type=="CG"], aes(x=pseudotime, y=r, color=anno)) +
# geom_point() +
stat_smooth(method="lm", se=F) +
labs(x="Pseudotime", y="Mehtylation/RNA correlation coefficient", color="") +
theme_bw() + theme_pub()
p <- ggplot(tmp[type=="CGC" & anno%in%opts$metacc_annos], aes(x=pseudotime, y=r, color=anno)) +
stat_smooth(aes(fill=anno), method="lm", se=T, alpha=0.1) +
labs(x="Pseudotime", y="Methylation/RNA correlation coefficient", color="") +
guides(fill=FALSE) +
theme_bw() + theme_pub()
print(p)
p <- ggplot(tmp[type=="GC"], aes(x=pseudotime, y=r, color=anno)) +
stat_smooth(aes(fill=anno), method="lm", se=T, alpha=0.1) +
labs(x="Pseudotime", y="Methylation/RNA correlation coefficient", color="") +
guides(fill=FALSE) +
theme_bw() + theme_pub()
print(p)
p <- ggplot(tmp[type=="CG"], aes(x=pseudotime, y=r, color=anno)) +
stat_smooth(aes(fill=anno), method="lm", se=T, alpha=0.1) +
labs(x="Pseudotime", y="Methylation/RNA correlation coefficient", color="") +
guides(fill=FALSE) +
theme_bw() + theme_pub()
print(p)
View(tmp)
p <- ggplot(tmp[type=="CG"], aes(x=pseudotime, y=r, color=anno)) +
stat_smooth(aes(fill=anno), method="lm", se=T, alpha=0.1) +
labs(x="Pseudotime", y="Methylation/RNA correlation coefficient", color="") +
guides(fill=FALSE) +
theme_bw() + theme_pub()
print(p)
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
# Create a quantile-quantile plot
# https://gist.github.com/slowkow/9041570
# Assumptions:
#   - Expected P values are uniformly distributed.
#   - Confidence intervals assume independence between tests
#
# cor_res is a data.table
# perm_xs is a vector of permuted p-values
# ci is the size of the confidence interval
gg_qqplot = function(cor_res, perm_xs, ci=0.95, title = "Quantile-quantile plot of p-values"){
xs <- cor_res$p
cor_res <- cor_res[, expected := -log10(1:.N / .N)]
N  <- length(xs)
df <- data.frame(observed = -log10(sort(xs)),
permuted = -log10(sort(perm_xs)),
expected = -log10(1:N / N),
cupper   = -log10(qbeta(ci,     1:N, N - 1:N + 1)),
clower   = -log10(qbeta(1 - ci, 1:N, N - 1:N + 1)))
log10Pe = expression(paste("Expected -log"[10], "(", plain(p), ")" ))
log10Po = expression(paste("Observed -log"[10], "(", plain(p), ")" ))
ggplot(df) +
geom_point(aes(expected, permuted), shape=3, size=1.5, color = "cornflowerblue") +
geom_abline(intercept=0, slope=1, alpha=0.5, color = "darkgrey") +
geom_line(aes(expected, cupper), linetype=2, color = "darkgrey") +
geom_line(aes(expected, clower), linetype=2, color = "darkgrey") +
#geom_point(aes(expected, observed), size=2) +
geom_point(data=cor_res, aes(expected, -log10(sort(p)), color = sig), size=2) +
scale_color_manual(values=c("black","red")) +
xlab(log10Pe) +
ylab(log10Po) +
labs(title=title) +
scatter_theme()
}
# Create a volcano plot with correlations on the x-axis
# and p-values on the y-axis
#
# cor_samples is a data.table with at least two columns:
#  r : correlations
#  p : p-values
gg_volcano_plot <- function(cor_samples, title = ""){
p <- ggplot(cor_samples, aes(x=r, y=-log10(p))) +
labs(title=title, x="Weighted Pearson correlation", y=expression(paste("-log"[10],"(",plain(p),")"))) +
#geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=7), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
scale_x_continuous(limits=c(-1,1)) +
scale_y_continuous(limits=c(0,7.5)) +
annotate("text", x=0, y=7.37, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-0.5, y=7.37, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=0.5, y=7.37, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# ggrepel::geom_text_repel(data=cor_samples[sig == TRUE], aes(x=r, y=-log10(p), label=id), size=6) +
scatter_theme()
}
# Define ggplot2 theme for scatter plots
scatter_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,10,0), hjust=0.5),
axis.text=element_text(size=rel(1.75), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.title.x = element_text(margin=margin(10,0,0,0)),
legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
# Define ggplot2 boxplot theme for boxplots
boxplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5, margin=margin(0,0,20,0)),
axis.title.y = element_text(colour="black", size=28, vjust=1.5),
axis.title.x = element_text(colour="black", size=28, vjust=1.5, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.8)),
axis.text.y = element_text(colour="black",size=rel(1.8)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="right",
legend.text=element_text(size=15),
legend.title=element_blank(),
legend.background=element_blank(),
panel.border = element_blank()
)
}
# Data
io   <- list()
io$base_dir   <- "/Users/ricard/data/NMT-seq_EB"
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$met_file   <- paste0(io$base_dir, "/met/parsed/met_data.tsv.gz")
io$acc_file   <- paste0(io$base_dir, "/acc/parsed/acc_data.tsv.gz")
io$in.sample_metadata <- paste0(io$base_dir,"/sample_sheet.csv")
io$outdir <- "/Users/ricard/NMT-seq/rebuttal/EB/correlations/out/metacc"
# Filtering parameters
opts <- list()
opts$met.min.weight <- 1      # minimum weight per feature (met)
opts$acc.min.weight <- 1      # minimum weight per feature (acc)
opts$min.coverage   <- 0.25    # minimum coverage per feature across samples (met/acc)
opts$fraction.sites <- 0.5    # fraction of sites (met/acc) to keep based on variance
# opts$min.n          <- 100    # minimum number of features per annotation
opts$min.s          <- 15     # minimum number of samples to do the correlation
opts$n_perms        <- 500    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
opts$cor_samples <- F
# Define which annotations to use and the order for plotting
opts$met_annos <- c("prom_2000_2000_cgi","prom_2000_2000_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
opts$acc_annos <- c("prom_2000_2000_cgi","prom_2000_2000_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
opts$anno_names <- c(
"prom_2000_2000_cgi"="CGI promoters",
"prom_2000_2000_noncgi"="non-CGI promoters",
"prom_2000_2000_cgi"="CGI promoters",
"prom_2000_2000_noncgi"="non-CGI promoters",
"active_enhancers"="Active enhancers",
"super_enhancers"="Super enhancers",
"primed_enhancers"="Primed enhancers",
"exons"="Exons",
"introns"="Introns"
)
# cells
opts$cells <- fread(io$in.sample_metadata, header=T) %>% .[pass_metQC==T & pass_accQC==T & type=="NMT",sample]
sample_metadata <- fread(io$in.sample_metadata, header=T) %>% .[sample%in%opts$cells]
# Load methylation data
met <- fread(sprintf("zcat < %s", io$met_file)) %>% as.data.table %>%
.[anno%in%opts$met_annos & sample%in%opts$cells] %>% .[,anno:=factor(anno, levels=opts$met_annos)] %>%
.[,anno:=stringr::str_replace_all(anno, opts$anno_names)]
# Load accessibility data
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
# Create a quantile-quantile plot
# https://gist.github.com/slowkow/9041570
# Assumptions:
#   - Expected P values are uniformly distributed.
#   - Confidence intervals assume independence between tests
#
# cor_res is a data.table
# perm_xs is a vector of permuted p-values
# ci is the size of the confidence interval
gg_qqplot = function(cor_res, perm_xs, ci=0.95, title = "Quantile-quantile plot of p-values"){
xs <- cor_res$p
cor_res <- cor_res[, expected := -log10(1:.N / .N)]
N  <- length(xs)
df <- data.frame(observed = -log10(sort(xs)),
permuted = -log10(sort(perm_xs)),
expected = -log10(1:N / N),
cupper   = -log10(qbeta(ci,     1:N, N - 1:N + 1)),
clower   = -log10(qbeta(1 - ci, 1:N, N - 1:N + 1)))
log10Pe = expression(paste("Expected -log"[10], "(", plain(p), ")" ))
log10Po = expression(paste("Observed -log"[10], "(", plain(p), ")" ))
ggplot(df) +
geom_point(aes(expected, permuted), shape=3, size=1.5, color = "cornflowerblue") +
geom_abline(intercept=0, slope=1, alpha=0.5, color = "darkgrey") +
geom_line(aes(expected, cupper), linetype=2, color = "darkgrey") +
geom_line(aes(expected, clower), linetype=2, color = "darkgrey") +
#geom_point(aes(expected, observed), size=2) +
geom_point(data=cor_res, aes(expected, -log10(sort(p)), color = sig), size=2) +
scale_color_manual(values=c("black","red")) +
xlab(log10Pe) +
ylab(log10Po) +
labs(title=title) +
scatter_theme()
}
# Create a volcano plot with correlations on the x-axis
# and p-values on the y-axis
#
# cor_samples is a data.table with at least two columns:
#  r : correlations
#  p : p-values
gg_volcano_plot <- function(cor_samples, title = ""){
p <- ggplot(cor_samples, aes(x=r, y=-log10(p))) +
labs(title=title, x="Weighted Pearson correlation", y=expression(paste("-log"[10],"(",plain(p),")"))) +
#geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=7), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
scale_x_continuous(limits=c(-1,1)) +
scale_y_continuous(limits=c(0,7.5)) +
annotate("text", x=0, y=7.37, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-0.5, y=7.37, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=0.5, y=7.37, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# ggrepel::geom_text_repel(data=cor_samples[sig == TRUE], aes(x=r, y=-log10(p), label=id), size=6) +
scatter_theme()
}
# Define ggplot2 theme for scatter plots
scatter_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,10,0), hjust=0.5),
axis.text=element_text(size=rel(1.75), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.title.x = element_text(margin=margin(10,0,0,0)),
legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
# Define ggplot2 boxplot theme for boxplots
boxplot_theme <- function() {
p <- theme(
plot.title = element_text(size=rel(1.0), hjust=0.5),
axis.title.y = element_text(colour="black", size=rel(1.0), vjust=1.5),
axis.title.x = element_text(colour="black", size=rel(1.0), vjust=1.5),
axis.text.x = element_text(colour="black",size=rel(1.0)),
axis.text.y = element_text(colour="black",size=rel(1.0)),
axis.line = element_line(colour="black", size=rel(0.8)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="top",
legend.text=element_text(size=rel(1.0)),
legend.title=element_blank(),
legend.background=element_blank(),
panel.border = element_blank()
)
}
# Data
io   <- list()
io$base_dir   <- "/Users/ricard/data/NMT-seq_EB"
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$met_file   <- paste0(io$base_dir, "/met/parsed/met_data.tsv.gz")
io$acc_file   <- paste0(io$base_dir, "/acc/parsed/acc_data.tsv.gz")
io$in.sample_metadata <- paste0(io$base_dir,"/sample_sheet.csv")
io$outdir <- "/Users/ricard/NMT-seq/rebuttal/EB/correlations/out/metacc"
# Filtering parameters
opts <- list()
opts$met.min.weight <- 1      # minimum weight per feature (met)
opts$acc.min.weight <- 1      # minimum weight per feature (acc)
opts$min.coverage   <- 0.25    # minimum coverage per feature across samples (met/acc)
opts$fraction.sites <- 0.5    # fraction of sites (met/acc) to keep based on variance
# opts$min.n          <- 100    # minimum number of features per annotation
opts$min.s          <- 15     # minimum number of samples to do the correlation
opts$n_perms        <- 500    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
opts$cor_samples <- F
# Define which annotations to use and the order for plotting
opts$met_annos <- c("prom_2000_2000_cgi","prom_2000_2000_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
opts$acc_annos <- c("prom_2000_2000_cgi","prom_2000_2000_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
opts$anno_names <- c(
"prom_2000_2000_cgi"="CGI promoters",
"prom_2000_2000_noncgi"="non-CGI promoters",
"prom_2000_2000_cgi"="CGI promoters",
"prom_2000_2000_noncgi"="non-CGI promoters",
"active_enhancers"="Active enhancers",
"super_enhancers"="Super enhancers",
"primed_enhancers"="Primed enhancers",
"exons"="Exons",
"introns"="Introns"
)
# cells
opts$cells <- fread(io$in.sample_metadata, header=T) %>% .[pass_metQC==T & pass_accQC==T & type=="NMT",sample]
sample_metadata <- fread(io$in.sample_metadata, header=T) %>% .[sample%in%opts$cells]
# Load methylation data
met <- fread(sprintf("zcat < %s", io$met_file)) %>% as.data.table %>%
.[anno%in%opts$met_annos & sample%in%opts$cells] %>% .[,anno:=factor(anno, levels=opts$met_annos)] %>%
.[,anno:=stringr::str_replace_all(anno, opts$anno_names)]
# Load accessibility data
acc <- fread(sprintf("zcat < %s", io$acc_file)) %>% as.data.table %>%
.[anno%in%opts$acc_annos & sample%in%opts$cells] %>%
.[,anno:=factor(anno, levels=opts$acc_annos)] %>% .[,anno:=stringr::str_replace_all(anno, opts$anno_names)]
# Combine the two data sets
metacc <- merge(
met[,c("sample", "id", "anno", "rate", "weight")] %>% setnames(c("rate", "weight"), c("met_rate", "met_weight")),
acc[,c("sample", "id", "anno", "rate", "weight")] %>% setnames(c("rate", "weight"), c("acc_rate", "acc_weight")),
by=c("sample", "id", "anno")
)
# rm(met, acc)
if (opts$cor_samples) {
# Intersect the two data sets
metacc <- merge(met[,c("sample", "id", "anno", "rate", "weight")] %>% setnames(c("rate", "weight"), c("met_rate", "met_weight")),
acc[,c("sample", "id", "anno", "rate", "weight")] %>% setnames(c("rate", "weight"), c("acc_rate", "acc_weight")),
by=c("sample", "id", "anno"))
rm(met, acc)
## Remove features with low weight (all types of correlation)
metacc <- metacc[met_weight >= opts$met.min.weight & acc_weight >= opts$acc.min.weight]
# To correlate across samples
metacc_filt <- copy(metacc)
## Filter sites with low coverage
nsamples <- length(unique(metacc$sample))
metacc_filt <- metacc_filt[, cov := .N / nsamples, by = c("id", "anno")] %>% .[cov >= opts$min.coverage] %>% .[, cov := NULL]
metacc <- metacc[, cov := .N / nsamples, by = c("id", "anno")] %>% .[cov >= opts$min.coverage] %>% .[, cov := NULL]
## Remove constant sites and filter based on variability (separately for each feature)
keep_hv_sites <- metacc_filt %>% split(.$anno) %>% map(~ .[,.(met_var = wtd.var(met_rate, met_weight), acc_var = wtd.var(acc_rate, acc_weight)), by = c("id")] %>% .[met_var > 2 | acc_var > 2] %>% .[, var := acc_var * met_var] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.sites) %>% .$id)
metacc_filt <- metacc_filt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% keep_hv_sites[[y]]]) %>% rbindlist
## Filter id pairs with small number of samples to do the correlation
metacc_filt <- metacc_filt[,n:=.N, by=c("id","anno")] %>% .[n >= opts$min.s] %>% .[,n:=NULL]
}
# Weighted correlation
if (opts$weight == TRUE){
if (opts$method != "pearson") { print("Weighted correlation only supported for pearson"); stop() }
if (opts$cor_samples) {
# Correlate rate across samples
cor_samples <- metacc_filt[, wtd.cor(met_rate, acc_rate, met_weight)[, c("correlation", "t.value", "p.value")], by = c("id", "anno")]
}
# Correlate rate across genes
cor_features <- metacc[, wtd.cor(met_rate, acc_rate, met_weight)[, c("correlation", "t.value", "p.value")], by = c("sample", "anno")]
}else{
if (opts$cor_samples) {
# Correlate rate across samples
cor_samples <- metacc_filt[, .(V1 = unlist(cor.test(met_rate, acc_rate, alternative = "two.sided", method = opts$method)[c("estimate", "statistic", "p.value")])), by = c("id", "anno")]
}
# Correlate rate across genes
cor_features <- metacc[, .(V1 = unlist(cor.test(met_rate, acc_rate, alternative = "two.sided", method = opts$method)[c("estimate", "statistic", "p.value")])), by = c("sample", "anno")]
}
# Compute adjusted p-values across samples (both FDR and Bonferroni)
if (opts$cor_samples) {
cor_samples <- cor_samples %>% .[, para := c("r", "t", "p")] %>% dcast(id + anno ~ para, value.var = "V1") %>%
.[, c("padj_fdr", "padj_bonf") := list(p.adjust(p, method = "fdr"), p.adjust(p, method = "bonferroni")), by = anno] %>%
.[, c("log_padj_fdr","log_padj_bonf") := list(-log10(padj_fdr), -log10(padj_bonf))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>%  setorder(padj_fdr)
}
# Compute adjusted p-values across genes (both FDR and Bonferroni)
cor_features <- cor_features %>% .[,para := c("r", "t", "p")] %>% dcast(sample + anno ~ para, value.var = "V1") %>%
.[, c("padj_fdr", "padj_bonf") := list(p.adjust(p, method = "fdr"), p.adjust(p, method = "bonferroni")), by = anno] %>%
.[, c("log_padj_fdr", "log_padj_bonf") := list(-log10(padj_fdr), -log10(padj_bonf))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>% setorder(padj_fdr)
if (opts$cor_samples) {
pp_vals <- vector(mode = "numeric", length = length(cor_samples$p))
for (k in 1:opts$n_perms){
# Copy original data
metacc_filt_perm <- copy(metacc_filt)
# Permute accessibility rates
metacc_filt_perm <- metacc_filt_perm[, acc_rate := sample(acc_rate), by = c("id", "anno")]
# Compute correlation across samples
# cor_samples_perm <- metacc_filt_perm[, .(p = wtd.cor(met_rate, acc_rate, met_weight)[, c("p.value")]), by = c("id", "anno")]
cor_samples_perm <- metacc_filt_perm[, .(p = cor.test(met_rate, acc_rate, method=opts$method)[["p.value"]]), by = c("id","anno")]
# For each annotation sort by p-value
cor_samples_perm <- cor_samples_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# Add the sorted p-values
pp_vals <- pp_vals + cor_samples_perm %>% .[, p]
}
# Compute the average p-values
pp_vals <- pp_vals / opts$n_perms
# Store them in a data.table for later analysis
cor_samples_perm <- cor_samples_perm[, p := pp_vals]
}
if (opts$cor_samples) {
cor_samples$anno <- stringr::str_replace_all(cor_samples$anno, opts$anno_names)
cor_samples_perm$anno <- stringr::str_replace_all(cor_samples_perm$anno, opts$anno_names)
}
cor_features$anno <- stringr::str_replace_all(cor_features$anno, opts$anno_names)
# load("out/cor.RData")
pp = qq <- list()
for (n in unique(cor_samples$anno)) {
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
# Create volcano plot
pp[[n]] <- gg_volcano_plot(cor_samples[anno == n,], title = "")
# Crete qqplot
qq[[n]] <- gg_qqplot(cor_samples[anno == n, ], cor_samples_perm[anno == n]$p, title = "")
# Plot and save
# print(plot_grid(pp[[n]], qq[[n]], labels = c("", ""), label_size = 20, ncol = 2, nrow = 1))
pdf(file=paste0(io$outdir,"/metacc_cor_", n, ".pdf"), width = 14, height = 8, useDingbats = FALSE)
grid.arrange(pp[[n]], qq[[n]], ncol=2, top = textGrob(n, gp=gpar(fontsize=29, fontface = "bold")), newpage = TRUE)
dev.off()
}
if (opts$cor_samples) {
# load("out/cor.RData")
pp = qq <- list()
for (n in unique(cor_samples$anno)) {
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
# Create volcano plot
pp[[n]] <- gg_volcano_plot(cor_samples[anno == n,], title = "")
# Crete qqplot
qq[[n]] <- gg_qqplot(cor_samples[anno == n, ], cor_samples_perm[anno == n]$p, title = "")
# Plot and save
# print(plot_grid(pp[[n]], qq[[n]], labels = c("", ""), label_size = 20, ncol = 2, nrow = 1))
pdf(file=paste0(io$outdir,"/metacc_cor_", n, ".pdf"), width = 14, height = 8, useDingbats = FALSE)
grid.arrange(pp[[n]], qq[[n]], ncol=2, top = textGrob(n, gp=gpar(fontsize=29, fontface = "bold")), newpage = TRUE)
dev.off()
}
}
# Boxplot of correlations across samples
# p <- ggplot(cor_samples[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
#   geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") + geom_hline(yintercept=0, colour="black", linetype="dashed") +
#   labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
#   coord_flip() + boxplot_theme()
# p
# pdf(file="out/across_cells.pdf", width = 12, height = 8)
# print(p)
# dev.off()
# Boxplot of correlations across genes
p <- ggplot(cor_features[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() + boxplot_theme()
p
pdf(file=paste0(io$outdir, "/metacc_boxplot_acrossfeatures.pdf"), width=4.5, height=3.5)
print(p)
dev.off()
# Boxplot of correlations across genes by lineage
tmp <- merge(cor_features, sample_metadata[,c("sample","lineage")], by="sample")
p <- ggplot(tmp, aes(x=anno, y=r)) +
# geom_boxplot(alpha=0.8, outlier.shape=NA, fill="#F8766D") +
geom_boxplot(aes(fill=lineage), alpha=0.8, outlier.shape=NA) +
scale_fill_manual(values=c("green4","green3")) +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
# scale_y_continuous(limits=c(-0.41, 0.05)) +
coord_flip() + boxplot_theme()
p
pdf(file=paste0(io$outdir, "/metacc_boxplot_acrossfeatures_lineage.pdf"), width=4.5, height=3.5)
print(p)
dev.off()
# Boxplot of correlations across samples
# p <- ggplot(cor_samples[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
#   geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") + geom_hline(yintercept=0, colour="black", linetype="dashed") +
#   labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
#   coord_flip() + boxplot_theme()
# p
# pdf(file="out/across_cells.pdf", width = 12, height = 8)
# print(p)
# dev.off()
# Boxplot of correlations across genes
p <- ggplot(cor_features[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Pearson correlation coefficient") +
coord_flip() + boxplot_theme()
p
pdf(file=paste0(io$outdir, "/metacc_boxplot_acrossfeatures.pdf"), width=4.5, height=3.5)
print(p)
dev.off()
# Boxplot of correlations across genes by lineage
tmp <- merge(cor_features, sample_metadata[,c("sample","lineage")], by="sample")
p <- ggplot(tmp, aes(x=anno, y=r)) +
# geom_boxplot(alpha=0.8, outlier.shape=NA, fill="#F8766D") +
geom_boxplot(aes(fill=lineage), alpha=0.8, outlier.shape=NA) +
scale_fill_manual(values=c("green4","green3")) +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Pearson correlation coefficient") +
# scale_y_continuous(limits=c(-0.41, 0.05)) +
coord_flip() + boxplot_theme()
p
pdf(file=paste0(io$outdir, "/metacc_boxplot_acrossfeatures_lineage.pdf"), width=4.5, height=3.5)
print(p)
dev.off()
