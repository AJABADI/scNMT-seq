metrna_dt_perm <- metrna_dt_perm[, expr := sample(expr), by = c("gene", "id", "anno")]
metrna_dt_perm
# Permute gene expression levels
metrna_dt_perm <- metrna_dt_perm[, expr := sample(expr), by = c("sample","anno")]
# Permute methylation values
metrna_dt_perm <- metrna_dt_perm[, rate := sample(rate), by = c("sample","anno")]
# Compute correlation across genes
cor_perm <- metrna_dt_perm[, .(p = cor.test(rate, expr, method=opts$method)[["p.value"]]), by = c("sample","anno")]
View(cor_perm)
# Compute correlation across genes
cor_genes <- metrna_dt[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("sample", "anno")] %>% .[,para := c("r", "t", "p")] %>% dcast(sample + anno ~ para, value.var = "V1")
# Compute correlation across genes
cor_genes <- metrna_dt_perm[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("sample", "anno")] %>% .[,para := c("r", "t", "p")] %>% dcast(sample + anno ~ para, value.var = "V1")
View(cor_genes)
# For each annotation sort by p-value
cor_samples_perm <- cor_samples_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# For each annotation sort by p-value
cor_genes_perm <- cor_genes_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# Compute correlation across genes
cor_genes_perm <- metrna_dt_perm[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("sample", "anno")] %>% .[,para := c("r", "t", "p")] %>% dcast(sample + anno ~ para, value.var = "V1")
# For each annotation sort by p-value
cor_genes_perm <- cor_genes_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# Add the sorted p-values
pp_vals <- pp_vals + cor_genes_perm %>% .[, p]
cor_genes_perm
opts$n_perms
opts$n_perms = 5
if (opts$cor_genes & opts$permutation) {
pp_vals <- vector(mode = "numeric", length = length(cor_samples$p))
r_vals <- vector(mode = "numeric", length = length(cor_samples$r))
for (k in 1:opts$n_perms){
print(k)
# Copy original methylation data
metrna_dt_perm <- copy(metrna_dt)
# Permute gene expression levels
metrna_dt_perm <- metrna_dt_perm[, expr := sample(expr), by = c("sample","anno")]
# Permute methylation values
metrna_dt_perm <- metrna_dt_perm[, rate := sample(rate), by = c("sample","anno")]
# Compute correlation across genes
cor_genes_perm <- metrna_dt_perm[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("sample", "anno")] %>% .[,para := c("r", "t", "p")] %>% dcast(sample + anno ~ para, value.var = "V1")
# For each annotation sort by p-value
cor_genes_perm <- cor_genes_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# Add the sorted p-values
pp_vals <- pp_vals + cor_genes_perm %>% .[, p]
}
# Compute the average p-values
pp_vals <- pp_vals / opts$n_perms
# Store them in a data.table for later analysis
cor_genes_perm <- cor_genes_perm[, p := pp_vals]
}
if (opts$cor_genes & opts$permutation) {
pp_vals <- vector(mode = "numeric", length = length(cor_samples$p))
r_vals <- vector(mode = "numeric", length = length(cor_samples$r))
for (k in 1:opts$n_perms){
print(k)
# Copy original methylation data
metrna_dt_perm <- copy(metrna_dt)
# Permute gene expression levels
metrna_dt_perm <- metrna_dt_perm[, expr := sample(expr), by = c("sample","anno")]
# Permute methylation values
metrna_dt_perm <- metrna_dt_perm[, rate := sample(rate), by = c("sample","anno")]
# Compute correlation across genes
cor_genes_perm <- metrna_dt_perm[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("sample", "anno")] %>% .[,para := c("r", "t", "p")] %>% dcast(sample + anno ~ para, value.var = "V1")
# For each annotation sort by p-value
cor_genes_perm <- cor_genes_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# Add the sorted p-values
pp_vals <- pp_vals + cor_genes_perm$p
r_vals <- r_vals + cor_genes_perm$r
}
# Compute the average p-values
pp_vals <- pp_vals / opts$n_perms
# Store them in a data.table for later analysis
cor_genes_perm <- cor_genes_perm[, p := pp_vals]
}
r_vals
r_vals
pp_vals
r_vals
foo <- list()
for (k in 1:opts$n_perms){
print(k)
# Copy original methylation data
metrna_dt_perm <- copy(metrna_dt)
# Permute gene expression levels
metrna_dt_perm <- metrna_dt_perm[, expr := sample(expr), by = c("sample","anno")]
# Permute methylation values
metrna_dt_perm <- metrna_dt_perm[, rate := sample(rate), by = c("sample","anno")]
# Compute correlation across genes
cor_genes_perm <- metrna_dt_perm[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("sample", "anno")] %>% .[,para := c("r", "t", "p")] %>% dcast(sample + anno ~ para, value.var = "V1")
foo[[k]] <- cor_genes_perm
# For each annotation sort by p-value
# cor_genes_perm <- cor_genes_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# Add the sorted p-values
# pp_vals <- pp_vals + cor_genes_perm$p
# r_vals <- r_vals + cor_genes_perm$r
}
foo
View(foo[[1]])
library(data.table)
library(purrr)
io <- list()
io$in.folder <- "/Users/ricard/data/Zhang_2017/methylation/original_mm9"
io$out.folder <- "/Users/ricard/data/Zhang_2017/methylation/raw_mm10"
# File for LiftOver
chain = import.chain(system.file(package="liftOver", "extdata", "mm9ToMm10.over.chain"))
library(rtracklayer)
# File for LiftOver
chain = import.chain(system.file(package="liftOver", "extdata", "mm9ToMm10.over.chain"))
files <- list.files(io$in.folder, pattern=".gz")
file=files[1]
foo <- fread(sprintf("zcat < %s/%s",io$in.folder,file))
colnames(foo) <- c("chr","pos","met_crick","unmet_crick","met_watson","unmet_watson")
foo[,c("met_reads","nonmet_reads"):=list(met_crick+met_watson,unmet_crick+unmet_watson)] %>%
.[,rate:=round(met_reads/(met_reads+nonmet_reads),2)]
bar <- foo %>%
.[,c("start","end"):=pos] %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, ignore.strand = TRUE) %>%
liftOver(chain) %>%
as.data.frame() %>%
setDT()
head(bar)
bar <- foo %>%
.[,c("start","end"):=pos] %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, ignore.strand = TRUE) %>%
liftOver(chain) %>%
as.data.frame() %>%
setDT() %>%
.[, .(seqnames, start, rate, met_reads, nonmet_reads)] %>%
setnames(c("seqnames","start"), c("chr","pos")) %>%
.[, chr := gsub("chr", "", chr)] %>%
setkey(chr, pos)
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
source("/Users/ricard/NMT-seq_EB/correlations/utils.R")
## I/O ##
io   <- list()
# io$base_dir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
io$base_dir   <- "/Users/ricard/data/NMT-seq_EB"
# io$base_dir   <- "/Users/kapouranis/Documents/Andreas/Code/datasets/nmt-seq-data"
io$in.sample_metadata <- paste0(io$base_dir,"/sample_sheet.csv")
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$rna_file   <- paste0(io$base_dir, "/rna/parsed/sceset.rds")
io$acc_file   <- paste0(io$base_dir, "/acc/parsed/acc_data.tsv.gz")
io$outdir <- "/Users/ricard/NMT-seq_EB/correlations/out/accrna"
## Options ##
# Filtering options
opts <- list()
# opts$min.weight     <- 1      # minimum weight per feature
opts$min.weight     <- 3      # minimum weight per feature
opts$min.coverage   <- 0.25    # minimum coverage per feature across samples (acc)
opts$min.cdr        <- 0.25    # minimum cellular detection rate per gene (expr)
opts$fraction.genes <- 0.5    # fraction of genes (expr) to keep based on variance
opts$fraction.sites <- 0.5    # fraction of sites (acc) to keep based on variance
# opts$min.n          <- 100    # minimum number of features per annotation
opts$min.s          <- 15     # minimum number of samples to do the correlation
# opts$gene_window    <- 2e4    # window length for the overlap between genes and features
opts$gene_window    <- 1e5    # window length for the overlap between genes and features
# Correlation options
opts$weight <- T             # weighted correlation?
opts$cor_samples <- T        # Do correlation across cells?
opts$cor_genes <- T          # Do correlation across genes?
opts$method <- "pearson"     # correlation type
opts$threshold_fdr  <- 0.10  # pvalue threshold for significance in FDR
opts$permutation <- T        # Do permutation test for the correlation across cells?
opts$n_perms <- 10            # Number of random permutations
# genomic contexts
# opts$annos <- c("prom_50_50")
opts$annos <- c("prom_50_50_cgi","prom_50_50_noncgi","super_enhancers", "CTCF","genebody","p300","Oct4","Nanog","DHS","activeEnhancers_Creyghton")
opts$anno_names <- c(
"prom_50_50_cgi"="CGI promoters",
"prom_50_50_noncgi"="non-CGI promoters",
"prom_50_50$"="Promoters",
"activeEnhancers_ENCODE"="Active enhancers",
"super_enhancers"="Super enhancers",
"primed_enhancers"="Primed enhancers",
"exons"="Exons",
"introns"="Introns"
)
# cells
opts$cells <- fread(io$in.sample_metadata, header=T) %>% .[pass_accQC==T & pass_rnaQC==T & method=="NMT",sample]
sample_metadata <- fread(io$in.sample_metadata, header=T) %>% .[sample%in%opts$cells]
# Load expression as SCESet object
sceset <- readRDS(file = io$rna_file)
# Subset cells
sceset <- sceset[,opts$cells]
# Create data.table
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>% melt(id.vars = "sample", value.name = "expr", variable.name = "gene")
# Extract gene coordinates metadata to do the overlap
rna_metadata <- fData(sceset) %>% tibble::rownames_to_column("gene") %>% as.data.table %>% .[,c("chr", "start", "end", "gene", "ens_id")]  %>%
.[, chr := as.factor(sub("chr", "", chr))] %>% setnames("ens_id", "id")
# Load accessibility data
accrna_dt <- fread(sprintf("zcat < %s", io$acc_file)) %>% as.data.table %>% .[anno%in%opts$annos & sample%in%opts$cells] %>% .[,anno:=factor(anno, levels=opts$annos)]
# Load annotation metadata
anno_dt <- lapply(opts$annos, function(anno) fread(sprintf("%s/%s.bed", io$annos_dir, anno),
colClasses = c("character", "integer", "integer", "character", "character", "character"))[, c(1, 2, 3, 4, 5, 6)]) %>%
rbindlist %>% setnames(c("chr", "start", "end", "strand", "id", "anno")) %>% .[,c("anno", "chr") := list(as.factor(anno), as.factor(chr))]
accrna_list <- list()
# Iterate over each feature
for (ann in unique(accrna_dt$anno)){
# Subset corresponding anno
acc_tmp <- accrna_dt[anno == ann, ]
# Non gene-associated feature
if (all(grepl("ENSMUSG", unique(acc_tmp$id)) == FALSE)) {
# Extract coordiantes for methylation sites and for genes
feature_metadata_tmp <- anno_dt[anno == ann, c("chr", "start", "end", "id")] %>% setkey(chr, start, end)
rna_metadata_tmp <- rna_metadata[, c("chr", "start", "end", "gene")] %>%
.[,c("start", "end") := list(start - opts$gene_window, end + opts$gene_window)] %>% setkey(chr, start, end)
# Do the overlap
ov <- foverlaps(feature_metadata_tmp, rna_metadata_tmp, nomatch = 0) %>% .[,c("gene", "id")]
# Add expression levels
ov_rna <- merge(rna, ov, by = "gene", allow.cartesian = TRUE)
# Merge with methylation data
accrna_list[[ann]] <- merge(ov_rna, acc_tmp, by = c("sample", "id")) %>%
.[,c("sample", "id", "gene", "anno", "expr", "rate", "weight")]
}
# Gene-associated feature
else if (all(grepl("ENSMUSG", unique(acc_tmp$id)) == TRUE)) {
acc_tmp <- merge(acc_tmp, rna_metadata[, c("id", "gene")], by = "id")
accrna_list[[ann]] <- merge(rna, acc_tmp, by = c("sample", "gene")) %>%
.[,c("sample", "id", "gene", "anno", "expr", "rate", "weight")]
}
}
accrna_dt <- rbindlist(accrna_list)
rm(accrna_list, acc_tmp, feature_metadata_tmp, rna_metadata_tmp, ov, ov_rna)
# Remove features with low weight
accrna_dt <- accrna_dt[weight >= opts$min.weight]
if (opts$cor_samples) {
accrna_filt <- copy(accrna_dt)
# Remove genes/features with constant expression across samples
keep_var_genes <- accrna_filt %>% split(.$anno) %>% map(~ .[, .(var = var(expr)), by = "gene"] %>% .[var > 2, gene])
keep_var_sites <- accrna_filt %>% split(.$anno) %>% map(~ .[, .(var = wtd.var(rate, weight)), by = c("id")] %>% .[var > 2, id])
accrna_filt <- accrna_filt %>% split(.$anno) %>% map2(., names(.), function(x,y) x[gene %in% keep_var_genes[[y]] & id %in% keep_var_sites[[y]]]) %>% rbindlist
# Filter genes with low cellular detection rate and sites with low coverage across samples
nsamples <- length(unique(accrna_filt$sample))
keep_cov_genes <- accrna_filt %>% split(.$anno) %>% map(~ .[,.(cdr = sum(expr>0)/.N), by = "gene"] %>% .[cdr >= opts$min.cdr, gene])
keep_cov_sites <- accrna_filt %>% split(.$anno) %>% map(~ .[,.(cov = .N/nsamples), by = c("id")] %>% .[cov >= opts$min.coverage, id])
accrna_filt <- accrna_filt %>% split(.$anno) %>% map2(., names(.), function(x,y) x[gene %in% keep_cov_genes[[y]] & id %in% keep_cov_sites[[y]]]) %>% rbindlist
# Extract highly variable genes/sites across samples
keep_hv_genes <- accrna_filt %>% split(.$anno) %>% map(~ .[,.(var = var(expr)), by = "gene"] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.genes) %>% .$gene)
keep_hv_sites <- accrna_filt %>% split(.$anno) %>% map(~ .[,.(var = wtd.var(rate,weight)), by = c("id")] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.sites) %>% .$id)
accrna_filt <- accrna_filt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[gene %in% keep_hv_genes[[y]] & id %in% keep_hv_sites[[y]]]) %>% rbindlist
# Filter id-gene pairs with small number of samples (only required for the correlation across samples)
accrna_filt <- accrna_filt[,n:=.N, by=c("gene","id","anno")] %>% .[n >= opts$min.s] %>% .[,n:=NULL]
# Filter annotations with few sites
# keep_anno   <- accrna_filt[, .(N = length(unique(id))), by = "anno"] %>% .[N > opts$min.n, anno]
# accrna_filt <- accrna_filt[anno %in% keep_anno] %>% .[, anno := drop.levels(anno)]
}
# Weighted correlation
if (opts$weight == TRUE) {
if (opts$method != "pearson") { print("Weighted correlation only supported for pearson"); stop() }
# Correlate rate across samples
if (opts$cor_samples) {
cor_samples <- accrna_filt[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("id", "gene", "anno")]
}
# Correlate rate across genes
if (opts$cor_genes) {
cor_genes <- accrna_dt[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("sample", "anno")]
}
# Unweighted correlation
} else {
# Correlate rate across samples
if (opts$cor_samples) {
cor_samples <- accrna_filt[, .(V1 = unlist(cor.test(rate, expr, alternative = "two.sided", method = opts$method)[c("estimate", "statistic", "p.value")])), by = c("id", "gene", "anno")]
}
# Correlate rate across genes
if (opts$cor_genes) {
cor_genes <- accrna_dt[, .(V1 = unlist(cor.test(rate, expr, alternative = "two.sided", method = opts$method)[c("estimate", "statistic", "p.value")])), by = c("sample", "anno")]
}
}
# Correlation across cells
if (opts$cor_samples) {
cor_samples <- cor_samples %>% .[, para := c("r", "t", "p")] %>% dcast(id + gene + anno ~ para, value.var = "V1") %>%
.[, c("padj_fdr", "padj_bonf") := list(p.adjust(p, method = "fdr"), p.adjust(p, method = "bonferroni")), by = anno] %>%
.[, c("log_padj_fdr","log_padj_bonf") := list(-log10(padj_fdr), -log10(padj_bonf))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>%  setorder(padj_fdr)
}
# Correlation across genes
if (opts$cor_genes) {
cor_genes <- cor_genes %>% .[,para := c("r", "t", "p")] %>% dcast(sample + anno ~ para, value.var = "V1") %>%
.[, c("padj_fdr", "padj_bonf") := list(p.adjust(p, method = "fdr"), p.adjust(p, method = "bonferroni")), by = anno] %>%
.[, c("log_padj_fdr", "log_padj_bonf") := list(-log10(padj_fdr), -log10(padj_bonf))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>% setorder(padj_fdr)
}
print(k)
k=1
accrna_filt_perm <- copy(accrna_filt)
# Permute gene expression levels
accrna_filt_perm <- accrna_filt_perm[, expr := sample(expr), by = c("gene", "id", "anno")]
accrna_filt_perm
accrna_filt_perm
# Compute correlation across samples
# cor_samples_perm <- accrna_filt_perm[, .(p = cor.test(rate, expr, method=opts$method)[["p.value"]]), by = c("id","gene","anno")]
cor_samples_perm <- accrna_filt_perm %>% fisher.test(x=matrix(
data=c(.SD[acc_binary==T & expr_binary==T,.N], .SD[acc_binary==F & expr_binary==T,.N],
.SD[acc_binary==T & expr_binary==F,.N], .SD[acc_binary==F & expr_binary==F,.N]),
nrow=2, ncol=2), alternative="two.sided")[c("p.value")]
accrna_filt[,c("expr_binary","acc_binary"):=list(expr>0.5,rate>50)]
# Compute correlation across samples
# cor_samples_perm <- accrna_filt_perm[, .(p = cor.test(rate, expr, method=opts$method)[["p.value"]]), by = c("id","gene","anno")]
cor_samples_perm <- accrna_filt_perm %>% fisher.test(x=matrix(
data=c(.SD[acc_binary==T & expr_binary==T,.N], .SD[acc_binary==F & expr_binary==T,.N],
.SD[acc_binary==T & expr_binary==F,.N], .SD[acc_binary==F & expr_binary==F,.N]),
nrow=2, ncol=2), alternative="two.sided")[c("p.value")]
accrna_filt_perm <- copy(accrna_filt)
# Permute gene expression levels
accrna_filt_perm <- accrna_filt_perm[, expr := sample(expr), by = c("gene", "id", "anno")]
# Compute correlation across samples
# cor_samples_perm <- accrna_filt_perm[, .(p = cor.test(rate, expr, method=opts$method)[["p.value"]]), by = c("id","gene","anno")]
cor_samples_perm <- accrna_filt_perm %>% fisher.test(x=matrix(
data=c(.SD[acc_binary==T & expr_binary==T,.N], .SD[acc_binary==F & expr_binary==T,.N],
.SD[acc_binary==T & expr_binary==F,.N], .SD[acc_binary==F & expr_binary==F,.N]),
nrow=2, ncol=2), alternative="two.sided")[c("p.value")]
accrna_filt_perm
cor_samples_perm <- accrna_filt_perm %>% .[,(V1=unlist(fisher.test(x=matrix(
data=c(.SD[acc_binary==T & expr_binary==T,.N], .SD[acc_binary==F & expr_binary==T,.N],
.SD[acc_binary==T & expr_binary==F,.N], .SD[acc_binary==F & expr_binary==F,.N]),
nrow=2, ncol=2), alternative="two.sided")[c("p.value")])), by=c("gene","id","anno")] %>%
.[, para := "p"] %>% dcast(sample + anno ~ para, value.var = "V1") %>%
.[,padj_fdr:=p.adjust(p, method = "fdr")] %>% .[, "log_padj_fdr" := -log10(padj_fdr)]
data=c(.SD[acc_binary==T & expr_binary==T,.N], .SD[acc_binary==F & expr_binary==T,.N],
.SD[acc_binary==T & expr_binary==F,.N], .SD[acc_binary==F & expr_binary==F,.N]),
# Compute correlation across samples
# cor_samples_perm <- accrna_filt_perm[, .(p = cor.test(rate, expr, method=opts$method)[["p.value"]]), by = c("id","gene","anno")]
cor_samples_perm <- accrna_filt_perm %>% .[,(V1=unlist(fisher.test(x=matrix(
data=c(.SD[acc_binary==T & expr_binary==T,.N], .SD[acc_binary==F & expr_binary==T,.N],
.SD[acc_binary==T & expr_binary==F,.N], .SD[acc_binary==F & expr_binary==F,.N]),
nrow=2, ncol=2), alternative="two.sided")[c("p.value")])), by=c("gene","id","anno")] %>%
.[, para := "p"] %>% dcast(id + gene + anno ~ para, value.var = "V1") %>%
.[,padj_fdr:=p.adjust(p, method = "fdr")] %>% .[, "log_padj_fdr" := -log10(padj_fdr)]
# For each annotation sort by p-value
cor_samples_perm <- cor_samples_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# Add the sorted p-values
pp_vals <- pp_vals + cor_samples_perm %>% .[, p]
opts$permutation
opts$n_perms
accrna_filt[,c("expr_binary","acc_binary"):=list(expr>0.5,rate>50)]
if (opts$cor_samples) {
if (opts$permutation) {
pp_vals <- vector(mode = "numeric", length = length(cor_samples$p))
for (k in 1:opts$n_perms){
print(k)
accrna_filt_perm <- copy(accrna_filt)
# Permute gene expression levels
accrna_filt_perm <- accrna_filt_perm[, expr := sample(expr), by = c("gene", "id", "anno")]
# Compute correlation across samples
# cor_samples_perm <- accrna_filt_perm[, .(p = cor.test(rate, expr, method=opts$method)[["p.value"]]), by = c("id","gene","anno")]
cor_samples_perm <- accrna_filt_perm %>% .[,(V1=unlist(fisher.test(x=matrix(
data=c(.SD[acc_binary==T & expr_binary==T,.N], .SD[acc_binary==F & expr_binary==T,.N],
.SD[acc_binary==T & expr_binary==F,.N], .SD[acc_binary==F & expr_binary==F,.N]),
nrow=2, ncol=2), alternative="two.sided")[c("p.value")])), by=c("gene","id","anno")] %>%
.[, para := "p"] %>% dcast(id + gene + anno ~ para, value.var = "V1") %>%
.[,padj_fdr:=p.adjust(p, method = "fdr")] %>% .[, "log_padj_fdr" := -log10(padj_fdr)]
# For each annotation sort by p-value
cor_samples_perm <- cor_samples_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# Add the sorted p-values
pp_vals <- pp_vals + cor_samples_perm %>% .[, p]
}
# Compute the average p-values
pp_vals <- pp_vals / opts$n_perms
# Store them in a data.table for later analysis
cor_samples_perm <- cor_samples_perm[, p := pp_vals]
}
}
tmp
accrna_filt[,c("expr_binary","acc_binary"):=list(expr>0.5,rate>50)]
cor_samples <- accrna_filt[,.(V1=unlist(fisher.test(
x=matrix(
data=c(.SD[acc_binary==T & expr_binary==T,.N],
.SD[acc_binary==F & expr_binary==T,.N],
.SD[acc_binary==T & expr_binary==F,.N],
.SD[acc_binary==F & expr_binary==F,.N]),
nrow=2, ncol=2), alternative="two.sided")[c("estimate","p.value")])), by=c("id","gene","anno")] %>%
.[, para := c("estimate", "p")] %>% dcast(id + gene + anno ~ para, value.var = "V1") %>% setnames("estimate","r") %>%
.[,padj_fdr:=p.adjust(p, method = "fdr"),by="anno"] %>%
.[, "log_padj_fdr" := -log10(padj_fdr)] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>% setorder(padj_fdr)
# p <- gg_volcano_plot(tmp[anno == n,], title = "")
# print(p)
# pdf("/Users/ricard/downloads/bar.pdf")
# print(p)
# dev.off()
if (opts$cor_samples & opts$permutation) {
pp <- qq <- list()
for (n in unique(cor_samples$anno)) {
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
# Generate volcano plot
# pp[[n]] <- gg_volcano_plot(cor_samples[anno == n,], title = "")
# Generate permutation plot
qq[[n]] <- gg_qqplot(cor_samples[anno == n, ], cor_samples_perm[anno == n]$p, title = "")
# Combine and save
print(qq[[n]])
# print(plot_grid(pp[[n]], qq[[n]], labels = c("", ""), label_size = 20, ncol = 2, nrow = 1))
# pdf(file=paste0(io$outdir,"/accrna_volcano_", n, ".pdf"), width = 14, height = 8, useDingbats = FALSE)
# grid.arrange(pp[[n]], qq[[n]], ncol=2, top = textGrob(n, gp=gpar(fontsize=29, fontface = "bold")), newpage = TRUE)
# dev.off()
}
}
unique(cor_samples$anno)
View(cor_genes)
n <- "prom_50_50_cgi"
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
all
negative_hits
positive_hits
View(cor_samples[anno == n, ])
cor_samples_perm
# Generate permutation plot
qq[[n]] <- gg_qqplot(cor_samples[anno == n, ], cor_samples_perm[anno == n]$p, title = "")
# Combine and save
print(qq[[n]])
cor_samples_perm
# Generate volcano plot
pp[[n]] <- gg_volcano_plot(cor_samples[anno == n,], title = "")
# Combine and save
print(pp[[n]])
foo <- cor_samples[anno==nsig == TRUE] %>% setkey(padj_fdr) %>% head(n=10)
foo <- cor_samples[anno==n & sig == TRUE] %>% setkey(padj_fdr) %>% head(n=10)
pp[[n]] <- ggplot(cor_samples, aes(x=r, y=-log10(p))) +
labs(title=title, x="Weighted Pearson correlation", y=expression(paste("-log"[10],"(",plain(p),")"))) +
#geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=8.1), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(-1,1)) +
scale_y_continuous(limits=c(0,8.5)) +
annotate("text", x=0, y=8.47, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-0.5, y=8.47, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=0.5, y=8.47, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# geom_text(data=cor_samples[sig == TRUE], aes(x=r, y=log_padj_fdr, label=gene), vjust=-0.0, hjust=-0.3) +
scatter_theme()
p <- p + ggrepel::geom_text_repel(data=foo, aes(x=r, y=-log10(p), label=gene), size=6, color="red")
pp[[n]] <- ggplot(cor_samples, aes(x=r, y=-log10(p))) +
labs(title=title, x="Weighted Pearson correlation", y=expression(paste("-log"[10],"(",plain(p),")"))) +
#geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=8.1), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(-1,1)) +
scale_y_continuous(limits=c(0,8.5)) +
annotate("text", x=0, y=8.47, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-0.5, y=8.47, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=0.5, y=8.47, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# geom_text(data=cor_samples[sig == TRUE], aes(x=r, y=log_padj_fdr, label=gene), vjust=-0.0, hjust=-0.3) +
scatter_theme()
# Combine and save
print(pp[[n]])
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
foo <- cor_samples[anno==n & sig == TRUE] %>% setkey(padj_fdr) %>% head(n=10)
pp[[n]] <- ggplot(cor_samples, aes(x=r, y=-log10(p))) +
labs(title=title, x="Weighted Pearson correlation", y=expression(paste("-log"[10],"(",plain(p),")"))) +
#geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=8.1), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(-1,1)) +
scale_y_continuous(limits=c(0,8.5)) +
annotate("text", x=0, y=8.47, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-0.5, y=8.47, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=0.5, y=8.47, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# geom_text(data=cor_samples[sig == TRUE], aes(x=r, y=log_padj_fdr, label=gene), vjust=-0.0, hjust=-0.3) +
scatter_theme()
# Combine and save
print(pp[[n]])
all
negative_hits
positive_hits
pp[[n]] <- ggplot(cor_samples, aes(x=r, y=-log10(p))) +
labs(title=title, x="Weighted Pearson correlation", y=expression(paste("-log"[10],"(",plain(p),")"))) +
#geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=8.1), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(-1,1)) +
scale_y_continuous(limits=c(0,8.5)) +
# annotate("text", x=0, y=8.47, size=7, label=sprintf("(%d)", all)) +
# annotate("text", x=-0.5, y=8.47, size=7, label=sprintf("%d (-)",length(negative_hits))) +
# annotate("text", x=0.5, y=8.47, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# geom_text(data=cor_samples[sig == TRUE], aes(x=r, y=log_padj_fdr, label=gene), vjust=-0.0, hjust=-0.3) +
scatter_theme()
# Combine and save
print(pp[[n]])
pp[[n]] <- ggplot(cor_samples, aes(x=r, y=-log10(p))) +
labs(title=title, x="Weighted Pearson correlation", y="") +
#geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=8.1), color="orange") +
geom_point(aes(color=sig), size=2) +
# scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(-1,1)) +
# scale_y_continuous(limits=c(0,8.5)) +
# annotate("text", x=0, y=8.47, size=7, label=sprintf("(%d)", all)) +
# annotate("text", x=-0.5, y=8.47, size=7, label=sprintf("%d (-)",length(negative_hits))) +
# annotate("text", x=0.5, y=8.47, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# geom_text(data=cor_samples[sig == TRUE], aes(x=r, y=log_padj_fdr, label=gene), vjust=-0.0, hjust=-0.3) +
scatter_theme()
pp[[n]]
cor_samples
View(cor_samples)
