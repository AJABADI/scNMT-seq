library(data.table)
library(purrr)
library(ggplot2)
library(gplots)
library(RColorBrewer)
matrix.please<-function(x) {
m<-as.matrix(x[,-1])
rownames(m)<-x[[1]]
m
}
## I/O ##
io <- list()
io$acc_file  <- "/Users/ricard/data/NMT-seq_EB/acc/parsed/acc_data.tsv.gz"
io$sample.metadata  <- "/Users/ricard/data/NMT-seq_EB/sample_sheet.csv"
# io$sample.stats  <- "/Users/ricard/NMT-seq/stats/samples/sample_stats.txt"
io$outdir  <- "/Users/ricard/NMT-seq/rebuttal/EB/heatmap/out"
## Options ##
opts <- list()
# Define filtering options
opts$min.weight     <- 5      # Minimum weight per feature
opts$min.coverage   <- 0.5    # minimum coverage per feature across samples (methylation)
# Define which annotations to use
# opts$annos <- c("prom_500_500","prom_100_100","active_enhancers","super_enhancers","DHS")
opts$annos <- c("prom_500_500","prom_100_100","super_enhancers","DHS")
# opts$annos <- c("DHS")
# Define which cells to use
sample_metadata <- fread(io$sample.metadata) %>% .[pass_accQC==T] #%>% merge(fread(io$sample.stats) %>% dcast(sample~context, value.var="mean"), by="sample")
opts$cells <- sample_metadata$sample
acc <- fread(sprintf("zcat < %s",io$acc_file)) %>% .[anno%in%opts$annos & sample%in%opts$cells]
stopifnot(length(setdiff(unique(acc$sample),opts$cells))==0)
# By weight
acc <- acc[weight >= opts$min.weight]
# By coverage
keep_cov_sites <- acc %>% split(.$anno) %>% map(~ .[,.(cov = .N / length(opts$cells)), by = c("id")] %>% .[cov >= opts$min.coverage, id])
acc <- acc %>% split(.$anno) %>% map2(., names(.), function(x,y) x[id %in% keep_cov_sites[[y]]]) %>% rbindlist
# By variance
opts$fraction.sites <- 0.5
keep_hv_sites <- acc %>% split(.$anno) %>% map(~ .[,.(var = var(rate)), by="id"] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.sites) %>% .$id)
acc <- acc %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% keep_hv_sites[[y]]]) %>% rbindlist
setkey(acc,anno)
dmatrix_list <- list()
for (anno in opts$annos) {
dmatrix_list[[anno]] <- acc[anno,c("id","rate","sample")] %>%
dcast(sample~id, value.var="rate") %>% matrix.please
}
annotation_row <- sample_metadata[,c("sample","plate","lineage")] %>% as.data.frame %>%
tibble::column_to_rownames("sample")
for (anno in opts$annos) {
# pdf(paste0(io$outdir,"/heatmap_acc_",anno,".pdf"))
png(paste0(io$outdir,"/acc_heatmap_",anno,".png"))
pheatmap::pheatmap(dmatrix_list[[anno]], main=anno,
cluster_rows = T, cluster_cols = T, annotation_row = annotation_row, annotation_col = NA,
show_colnames = F, show_rownames = F)
# heatmap.2(dmatrix_list[[anno]], col=colorRampPalette(rev(brewer.pal(n = 7, name =
# "RdYlBu")))(100), na.color = "gray95", Rowv=T, Colv=T, density.info="none", trace="none",
#           key=T, labRow = FALSE, labCol = FALSE)
dev.off()
}
lapply(dmatrix_list,dim)
dev.off()
pheatmap::pheatmap(dmatrix_list[[anno]], main=anno,
cluster_rows = T, cluster_cols = T, annotation_row = annotation_row, annotation_col = NA,
show_colnames = F, show_rownames = T)
pheatmap::pheatmap(dmatrix_list[[anno]], main=anno,
cluster_rows = T, cluster_cols = T, annotation_row = annotation_row, annotation_col = NA,
show_colnames = F, show_rownames = T)
library(data.table)
library(purrr)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(scater)
matrix.please<-function(x) {
m<-as.matrix(x[,-1])
rownames(m)<-x[[1]]
m
}
boxplot_theme <- function() {
p <- theme(
plot.title = element_text(size=20, hjust=0.5, margin=margin(0,0,20,0)),
axis.title.y = element_text(colour="black", size=20, vjust=1.5),
axis.title.x = element_text(colour="black", size=20, vjust=1.5, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.6)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="none",
legend.text=element_text(size=15),
legend.title=element_blank(),
legend.background=element_blank(),
panel.border = element_blank()
)
}
## I/O ##
io <- list()
io$met_file  <- "/Users/ricard/data/NMT-seq_EB/met/parsed/met_data.tsv.gz"
io$acc_file  <- "/Users/ricard/data/NMT-seq_EB/acc/parsed/acc_data.tsv.gz"
io$rna_file <- "/Users/ricard/data/NMT-seq_EB/rna/parsed/sceset.rds"
io$sample.metadata  <- "/Users/ricard/data/NMT-seq_EB/sample_sheet.csv"
io$gene.metadata <- "/Users/ricard/data/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
io$outdir  <- "/Users/ricard/NMT-seq/rebuttal/EB/heatmap/out"
## Options ##
opts <- list()
# Define filtering options
opts$min.weight     <- 3      # Minimum weight per feature
opts$min.coverage   <- 0.5    # minimum coverage per feature across samples (methylation)
# Define which annotations to use
opts$met_annos <- c("prom_2000_2000","genebody","active_enhancers","super_enhancers")
# Define which cells to use
opts$cells <- fread(io$sample.metadata) %>% .[pass_metQC==T] %>% .$sample
# Load methylation data
met <- fread(sprintf("zcat < %s",io$met_file)) %>% .[anno %in% opts$met_annos & sample %in% opts$cells]
stopifnot(length(setdiff(unique(met$sample),opts$cells))==0)
# Load accessibility data
# met <- fread(sprintf("zcat < %s",io$acc_file)) %>% .[anno %in% opts$acc_annos & sample %in% opts$cells]
# stopifnot(length(setdiff(unique(acc$sample),opts$cells))==0)
# Load RNA data
# sceset <- readRDS(file=io$rna_file)[,opts$cells]
# load sample metadata
sample_metadata <- fread(io$sample.metadata) %>% .[sample%in%opts$cells]
# Load gene metadata
# gene_metadata <- fread(io$gene.metadata) %>% .[, chr := as.factor(sub("chr", "", chr))] %>% setnames(c("ens_id","symbol"),c("id","gene"))
# Remove features with low weight (all types of correlation)
met <- met[weight >= opts$min.weight]
## Filter sites with low coverage
met <- met[, cov:=.N/length(opts$cells), by=c("id","anno")] %>% .[cov >= opts$min.coverage] %>% .[,cov:=NULL]
setkey(met,anno)
dmatrix_list <- list()
for (ann in opts$met_annos) {
dmatrix_list[[ann]] <- met[ann,c("id","rate","sample")] %>%
dcast(sample~id, value.var="rate") %>% matrix.please
}
annotation_row <- sample_metadata[,c("sample","type","plate")] %>% as.data.frame %>%
tibble::column_to_rownames("sample")
for (anno in opts$met_annos) {
# pdf(paste0(io$outdir,"/heatmap_",anno,".pdf"))
png(paste0(io$outdir,"/met_heatmap_",anno,".png"))
pheatmap::pheatmap(dmatrix_list[[anno]], main=anno,
cluster_rows = T, cluster_cols = T, annotation_row = annotation_row, annotation_col = NA,
show_colnames = F, show_rownames = F)
# heatmap.2(dmatrix_list[[anno]], col=colorRampPalette(rev(brewer.pal(n = 7, name =
# "RdYlBu")))(100), na.color = "gray95", Rowv=T, Colv=T, density.info="none", trace="none",
# key=T, labRow = FALSE, labCol = FALSE)
dev.off()
}
annotation_row <- sample_metadata[,c("sample","type","lineage")] %>% as.data.frame %>%
tibble::column_to_rownames("sample")
for (anno in opts$met_annos) {
# pdf(paste0(io$outdir,"/heatmap_",anno,".pdf"))
png(paste0(io$outdir,"/met_heatmap_",anno,".png"))
pheatmap::pheatmap(dmatrix_list[[anno]], main=anno,
cluster_rows = T, cluster_cols = T, annotation_row = annotation_row, annotation_col = NA,
show_colnames = F, show_rownames = F)
# heatmap.2(dmatrix_list[[anno]], col=colorRampPalette(rev(brewer.pal(n = 7, name =
# "RdYlBu")))(100), na.color = "gray95", Rowv=T, Colv=T, density.info="none", trace="none",
# key=T, labRow = FALSE, labCol = FALSE)
dev.off()
}
