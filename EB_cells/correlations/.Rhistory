}
for (k in opts$annos) {
data_k <- data[anno==k]
# Calculate statistics
stats[sample==cell & anno==k, coverage:=nrow(data_k)]
stats[sample==cell & anno==k, mean:=mean(data_k$rate)*100]
}
} else {
print(sprintf("Sample %s not found for methylation",cell))
}
}
# fwrite(stats, file=io$stats, sep="\t", row.names=F, col.names=T)
View(stats)
fwrite(stats, file=io$stats, sep="\t", row.names=F, col.names=T)
View(stats)
library(data.table)
library(purrr)
library(ggplot2)
theme_pub <- function() {
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
## Define I/O
io <- list()
io$in.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
io$in.data <- "/Users/ricard/data/gastrulation/met/raw"
io$annos_dir  <- "/Users/ricard/data/gastrulation/features/filt"
io$stats <- "/Users/ricard/gastrulation/met/stats/samples/out/sample_stats.txt"
## Define options
opts <- list()
# Define which stage and lineages to look at
# opts$stage_lineage <- c("E4.5_EPI","E4.5_PE","E5.5_EPI","E6.5_EPI","E6.5_VE","E6.5_PS","E7.5_Ectoderm","E7.5_Cardiac","E7.5_VE")
opts$stage <- c("E4.5","E5.5","E6.5","E6.75","E7.5")
# Define genomic contexts (use 'all' for no genomic context filtering)
opts$general_annos <- c("prom_2000_2000","genebody","exons","introns","CGI","IAP")
# ESC ChIP-seq
opts$esc_annos <- c("ESC_ActiveEnhancers","ESC_SuperEnhancers","ESC_PrimedEnhancers")
# E3.5 ChIP-seq
opts$e35_annos <- c("E3.5_Promoter_H3K27ac","E3.5_Distal_H3K27ac","E3.5_H3K4me3")
# E6.5 ChIP-seq
opts$e65_annos <- c("E6.5_Promoter_H3K27ac","E6.5_Distal_H3K27ac","E6.5_H3K4me3")
# Concatenate all
# opts$annos <- c(opts$general_annos,opts$esc_annos,opts$e35_annos)
opts$annos <- c(opts$general_annos,"all")
# opts$annos <- "all"
# Define which cells to use
opts$cells <- fread(io$in.metadata) %>%
# .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
# .[pass_metQC==T & stage_lineage%in%opts$stage_lineage,id_met]
.[pass_metQC==T & stage%in%opts$stage,id_met]
metadata <- fread(io$in.metadata) %>% .[id_met%in%opts$cells] %>%
.[,stage_lineage:=paste(stage,lineage,sep="_")]
# .[,stage_lineage:=stage]
if (opts$annos[1] != "all") {
anno_dt <- lapply(opts$annos, function(anno) fread(sprintf("%s/%s.bed", io$annos_dir, anno),
colClasses = c("character", "integer", "integer", "character", "character", "character"))[, c(1, 2, 3, 4, 5, 6)]) %>%
rbindlist %>% setnames(c("chr", "start", "end", "strand", "id", "anno")) %>% .[,c("anno", "chr") := list(as.factor(anno), as.factor(chr))]
}
library(data.table)
library(purrr)
library(ggplot2)
theme_pub <- function() {
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
## Define I/O
io <- list()
io$in.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
io$in.data <- "/Users/ricard/data/gastrulation/met/raw"
io$annos_dir  <- "/Users/ricard/data/gastrulation/features/filt"
io$stats <- "/Users/ricard/gastrulation/met/stats/samples/out/sample_stats.txt"
## Define options
opts <- list()
# Define which stage and lineages to look at
# opts$stage_lineage <- c("E4.5_EPI","E4.5_PE","E5.5_EPI","E6.5_EPI","E6.5_VE","E6.5_PS","E7.5_Ectoderm","E7.5_Cardiac","E7.5_VE")
opts$stage <- c("E4.5","E5.5","E6.5","E6.75","E7.5")
# Define genomic contexts (use 'all' for no genomic context filtering)
opts$general_annos <- c("prom_2000_2000","genebody","exons","introns","CGI","IAP")
# ESC ChIP-seq
opts$esc_annos <- c("ESC_ActiveEnhancers","ESC_SuperEnhancers","ESC_PrimedEnhancers")
# E3.5 ChIP-seq
opts$e35_annos <- c("E3.5_Promoter_H3K27ac","E3.5_Distal_H3K27ac","E3.5_H3K4me3")
# E6.5 ChIP-seq
opts$e65_annos <- c("E6.5_Promoter_H3K27ac","E6.5_Distal_H3K27ac","E6.5_H3K4me3")
# Concatenate all
# opts$annos <- c(opts$general_annos,opts$esc_annos,opts$e35_annos)
opts$annos <- c(opts$general_annos)
# opts$annos <- "all"
# Define which cells to use
opts$cells <- fread(io$in.metadata) %>%
# .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
# .[pass_metQC==T & stage_lineage%in%opts$stage_lineage,id_met]
.[pass_metQC==T & stage%in%opts$stage,id_met]
metadata <- fread(io$in.metadata) %>% .[id_met%in%opts$cells] %>%
.[,stage_lineage:=paste(stage,lineage,sep="_")]
# .[,stage_lineage:=stage]
if (opts$annos[1] != "all") {
anno_dt <- lapply(opts$annos, function(anno) fread(sprintf("%s/%s.bed", io$annos_dir, anno),
colClasses = c("character", "integer", "integer", "character", "character", "character"))[, c(1, 2, 3, 4, 5, 6)]) %>%
rbindlist %>% setnames(c("chr", "start", "end", "strand", "id", "anno")) %>% .[,c("anno", "chr") := list(as.factor(anno), as.factor(chr))]
}
# stats <- data.table(sample=opts$cells, context="CG", coverage=0, mean=0)
stats <- data.table(expand.grid(opts$cells,opts$annos)) %>% setnames(c("sample","anno")) %>%
.[,c("coverage","mean"):=0]
for (cell in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.data,cell))) {
# print(sprintf("Loading %s methylation...",cell))
# Load sample methylation data
data <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.data,cell), sep="\t", verbose=F, showProgress=F) %>%
.[,c("chr","pos","rate")]
# Filter genomic contexts
if (opts$annos[1]=="all") {
data[,anno:="all"]
} else {
data[,c("start","end") := list(pos,pos)] %>% .[,chr:=as.factor(chr)] %>% setkey(chr,start,end)
data <- foverlaps(data, anno_dt%>%setkey(chr,start,end), nomatch=0) %>%
.[,c("start","end","strand","i.start","i.end"):=NULL]
}
# Calculate statistics per genomic context
stats[sample==cell, coverage:=nrow(data_k)]
stats[sample==cell, mean:=mean(data_k$rate)*100]
for (k in opts$annos) {
data_k <- data[anno==k]
stats[sample==cell & anno==k, coverage:=nrow(data_k)]
stats[sample==cell & anno==k, mean:=mean(data_k$rate)*100]
}
} else {
print(sprintf("Sample %s not found for methylation",cell))
}
}
library(data.table)
library(purrr)
library(ggplot2)
theme_pub <- function() {
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
## Define I/O
io <- list()
io$in.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
io$in.data <- "/Users/ricard/data/gastrulation/met/raw"
io$annos_dir  <- "/Users/ricard/data/gastrulation/features/filt"
io$stats <- "/Users/ricard/gastrulation/met/stats/samples/out/sample_stats.txt"
## Define options
opts <- list()
# Define which stage and lineages to look at
# opts$stage_lineage <- c("E4.5_EPI","E4.5_PE","E5.5_EPI","E6.5_EPI","E6.5_VE","E6.5_PS","E7.5_Ectoderm","E7.5_Cardiac","E7.5_VE")
opts$stage <- c("E4.5","E5.5","E6.5","E6.75","E7.5")
# Define genomic contexts (use 'all' for no genomic context filtering)
opts$general_annos <- c("prom_2000_2000","genebody","exons","introns","CGI","IAP")
# ESC ChIP-seq
opts$esc_annos <- c("ESC_ActiveEnhancers","ESC_SuperEnhancers","ESC_PrimedEnhancers")
# E3.5 ChIP-seq
opts$e35_annos <- c("E3.5_Promoter_H3K27ac","E3.5_Distal_H3K27ac","E3.5_H3K4me3")
# E6.5 ChIP-seq
opts$e65_annos <- c("E6.5_Promoter_H3K27ac","E6.5_Distal_H3K27ac","E6.5_H3K4me3")
# Concatenate all
# opts$annos <- c(opts$general_annos,opts$esc_annos,opts$e35_annos)
opts$annos <- c(opts$general_annos)
# opts$annos <- "all"
# Define which cells to use
opts$cells <- fread(io$in.metadata) %>%
# .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
# .[pass_metQC==T & stage_lineage%in%opts$stage_lineage,id_met]
.[pass_metQC==T & stage%in%opts$stage,id_met]
metadata <- fread(io$in.metadata) %>% .[id_met%in%opts$cells] %>%
.[,stage_lineage:=paste(stage,lineage,sep="_")]
# .[,stage_lineage:=stage]
if (opts$annos[1] != "all") {
anno_dt <- lapply(opts$annos, function(anno) fread(sprintf("%s/%s.bed", io$annos_dir, anno),
colClasses = c("character", "integer", "integer", "character", "character", "character"))[, c(1, 2, 3, 4, 5, 6)]) %>%
rbindlist %>% setnames(c("chr", "start", "end", "strand", "id", "anno")) %>% .[,c("anno", "chr") := list(as.factor(anno), as.factor(chr))]
}
# stats <- data.table(sample=opts$cells, context="CG", coverage=0, mean=0)
stats <- data.table(expand.grid(opts$cells,opts$annos)) %>% setnames(c("sample","anno")) %>%
.[,c("coverage","mean"):=0]
for (cell in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.data,cell))) {
# print(sprintf("Loading %s methylation...",cell))
# Load sample methylation data
data <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.data,cell), sep="\t", verbose=F, showProgress=F) %>%
.[,c("chr","pos","rate")]
# Filter genomic contexts
if (opts$annos[1]=="all") {
data[,anno:="all"]
} else {
data[,c("start","end") := list(pos,pos)] %>% .[,chr:=as.factor(chr)] %>% setkey(chr,start,end)
data <- foverlaps(data, anno_dt%>%setkey(chr,start,end), nomatch=0) %>%
.[,c("start","end","strand","i.start","i.end"):=NULL]
}
# Calculate statistics per genomic context
stats[sample==cell, coverage:=nrow(data)]
stats[sample==cell, mean:=mean(data$rate)*100]
for (k in opts$annos) {
data_k <- data[anno==k]
stats[sample==cell & anno==k, coverage:=nrow(data_k)]
stats[sample==cell & anno==k, mean:=mean(data_k$rate)*100]
}
} else {
print(sprintf("Sample %s not found for methylation",cell))
}
}
fwrite(stats, file=io$stats, sep="\t", row.names=F, col.names=T)
stats <- fread(io$stats)
stats <- stats %>% merge(metadata[,c("id_met","stage","stage_lineage","method","plate","embryo")] %>% setnames("id_met","sample"))
View(stats)
stats
# Convert from data.frame to matrix and take the average over all cells
tmp <- stats %>% dcast(anno~stage, value.var="mean", fun.aggregate=mean, na.rm=T) %>% tibble::column_to_rownames("anno")
View(tmp)
View(tmp)
# Convert from data.frame to matrix and take the average over all cells
tmp <- stats %>% dcast(anno~stage, value.var="mean", fun.aggregate=mean, na.rm=T) %>% as.data.frame %>% tibble::column_to_rownames("anno")
View(tmp)
breakList <- seq(0.75,1,by=0.01)
# pdf(file=paste0(io$outdir,"/hamming_CpG_",anno,"_heatmap.pdf"), height = 6, width=9)
pheatmap::pheatmap(tmp,
main="",
cluster_rows=T, cluster_cols=T, show_rownames=T, show_colnames=T, annotation_col=NA,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breakList)),
breaks = breakList
)
breakList <- seq(0,100,by=1)
# pdf(file=paste0(io$outdir,"/hamming_CpG_",anno,"_heatmap.pdf"), height = 6, width=9)
pheatmap::pheatmap(tmp,
main="",
cluster_rows=T, cluster_cols=T, show_rownames=T, show_colnames=T, annotation_col=NA,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breakList)),
breaks = breakList
)
stats_filt <- merge(
stats[,c("anno","sample","mean")],
stats[anno=="all"] %>% setnames("mean","global_mean"),c("anno","sample","global_mean"),
by=c("anno","sample")
)
stats_filt <- merge(
stats[,c("anno","sample","mean")],
stats[anno=="all",c("anno","sample","global_mean")] %>% setnames("mean","global_mean"),
by=c("anno","sample")
)
stats_filt <- merge(
stats[,c("anno","sample","mean")],
stats[anno=="all",c("anno","sample","mean")] %>% setnames("mean","global_mean"),
by=c("anno","sample")
)
View(stats_filt)
head(stats[,c("anno","sample","mean")])
stats
stats[,c("anno","sample","mean")]
stats[anno=="all",c("anno","sample","mean")] %>% setnames("mean","global_mean")
stats[anno=="all",c("anno","sample","mean")]
stats
stats[anno=="all"]
unique(stats$anno)
anno_dt
library(data.table)
library(purrr)
library(ggplot2)
theme_pub <- function() {
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
## Define I/O
io <- list()
io$in.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
io$in.data <- "/Users/ricard/data/gastrulation/met/raw"
io$annos_dir  <- "/Users/ricard/data/gastrulation/features/filt"
io$stats <- "/Users/ricard/gastrulation/met/stats/samples/out/sample_stats.txt"
## Define options
opts <- list()
# Define which stage and lineages to look at
# opts$stage_lineage <- c("E4.5_EPI","E4.5_PE","E5.5_EPI","E6.5_EPI","E6.5_VE","E6.5_PS","E7.5_Ectoderm","E7.5_Cardiac","E7.5_VE")
opts$stage <- c("E4.5","E5.5","E6.5","E6.75","E7.5")
# Define genomic contexts (use 'all' for no genomic context filtering)
opts$general_annos <- c("prom_2000_2000","genebody","exons","introns","CGI","IAP")
# ESC ChIP-seq
opts$esc_annos <- c("ESC_ActiveEnhancers","ESC_SuperEnhancers","ESC_PrimedEnhancers")
# E3.5 ChIP-seq
opts$e35_annos <- c("E3.5_Promoter_H3K27ac","E3.5_Distal_H3K27ac","E3.5_H3K4me3")
# E6.5 ChIP-seq
opts$e65_annos <- c("E6.5_Promoter_H3K27ac","E6.5_Distal_H3K27ac","E6.5_H3K4me3")
# Concatenate all
# opts$annos <- c(opts$general_annos,opts$esc_annos,opts$e35_annos)
opts$annos <- c(opts$general_annos)
# opts$annos <- "all"
# Define which cells to use
opts$cells <- fread(io$in.metadata) %>%
# .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
# .[pass_metQC==T & stage_lineage%in%opts$stage_lineage,id_met]
.[pass_metQC==T & stage%in%opts$stage,id_met]
metadata <- fread(io$in.metadata) %>% .[id_met%in%opts$cells] %>%
.[,stage_lineage:=paste(stage,lineage,sep="_")]
# .[,stage_lineage:=stage]
if (opts$annos[1] != "all") {
anno_dt <- lapply(opts$annos, function(anno) fread(sprintf("%s/%s.bed", io$annos_dir, anno),
colClasses = c("character", "integer", "integer", "character", "character", "character"))[, c(1, 2, 3, 4, 5, 6)]) %>%
rbindlist %>% setnames(c("chr", "start", "end", "strand", "id", "anno")) %>% .[,c("anno", "chr") := list(as.factor(anno), as.factor(chr))]
}
# stats <- data.table(sample=opts$cells, context="CG", coverage=0, mean=0)
stats <- data.table(expand.grid(opts$cells,c(opts$annos,"all"))) %>% setnames(c("sample","anno")) %>%
.[,c("coverage","mean"):=0]
for (cell in opts$cells) {
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.data,cell))) {
# print(sprintf("Loading %s methylation...",cell))
# Load sample methylation data
data <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.data,cell), sep="\t", verbose=F, showProgress=F) %>%
.[,c("chr","pos","rate")]
# Compute genome-wide statistics
stats[sample==cell & anno=="all", coverage:=nrow(data)]
stats[sample==cell & anno=="all", mean:=mean(data$rate)*100]
# Calculate statistics per genomic context
data[,c("start","end") := list(pos,pos)] %>% .[,chr:=as.factor(chr)] %>% setkey(chr,start,end)
for (k in opts$annos) {
data_k <- foverlaps(data, anno_dt[anno==k]%>%setkey(chr,start,end), nomatch=0) %>%
.[,c("start","end","strand","i.start","i.end"):=NULL]
stats[sample==cell & anno==k, coverage:=nrow(data_k)]
stats[sample==cell & anno==k, mean:=mean(data_k$rate)*100]
}
} else {
print(sprintf("Sample %s not found for methylation",cell))
}
}
fwrite(stats, file=io$stats, sep="\t", row.names=F, col.names=T)
stats <- fread(io$stats)
stats <- stats %>% merge(metadata[,c("id_met","stage","stage_lineage","method","plate","embryo")] %>% setnames("id_met","sample"))
# stats[mean<1,mean:=mean*100]
# Convert from data.table to data.frame and take the average over all cells
tmp <- stats %>% dcast(anno~stage, value.var="mean", fun.aggregate=mean, na.rm=T) %>% as.data.frame %>% tibble::column_to_rownames("anno")
breakList <- seq(0,100,by=1)
# pdf(file=paste0(io$outdir,"/hamming_CpG_",anno,"_heatmap.pdf"), height = 6, width=9)
pheatmap::pheatmap(tmp,
main="",
cluster_rows=T, cluster_cols=T, show_rownames=T, show_colnames=T, annotation_col=NA,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breakList)),
breaks = breakList
)
stats_filt <- merge(
stats[,c("anno","sample","mean")],
stats[anno=="all",c("anno","sample","mean")] %>% setnames("mean","global_mean"),
by=c("anno","sample")
)
p <- ggplot(stats_filt, aes(x=global_mean,y=mean)) +
geom_point() +
stat_smooth(method="lm") +
facet_wrap(~anno) +
theme_bw()
print(p)
View(stats_filt)
stats_filt <- merge(
stats[,c("anno","sample","mean")],
stats[anno=="all",c("anno","sample","mean")] %>% setnames("mean","global_mean"),
by=c("sample")
)
View(stats_filt)
stats_filt <- merge(
stats[,c("anno","sample","mean")],
stats[anno=="all",c("sample","mean")] %>% setnames("mean","global_mean"),
by=c("sample")
)
View(stats_filt)
p <- ggplot(stats_filt, aes(x=global_mean,y=mean)) +
geom_point() +
stat_smooth(method="lm") +
facet_wrap(~anno) +
theme_bw()
print(p)
stats_filt <- merge(
stats[anno!="all",c("anno","sample","mean")],
stats[anno=="all",c("sample","mean")] %>% setnames("mean","global_mean"),
by=c("sample")
)
p <- ggplot(stats_filt, aes(x=global_mean,y=mean)) +
geom_point() +
stat_smooth(method="lm") +
facet_wrap(~anno) +
theme_bw()
print(p)
p <- ggplot(stats_filt, aes(x=global_mean,y=mean)) +
geom_point() +
# stat_smooth(method="lm") +
geom_abline(intercept = 0, slope = 1)
p <- ggplot(stats_filt, aes(x=global_mean,y=mean)) +
geom_point() +
# stat_smooth(method="lm") +
geom_abline(intercept = 0, slope = 1) +
facet_wrap(~anno) +
theme_bw()
print(p)
stats
stats_filt <- merge(
stats[anno!="all",c("anno","sample","stage","mean")],
stats[anno=="all",c("sample","mean")] %>% setnames("mean","global_mean"),
by=c("sample")
)
p <- ggplot(stats_filt[stage_lineage==i], aes(x=global_mean,y=mean)) +
geom_point() +
# stat_smooth(method="lm") +
geom_abline(intercept = 0, slope = 1) +
facet_wrap(~anno) +
theme_bw()
for (i in unique(stats_filt$stage)) {
p <- ggplot(stats_filt[stage_lineage==i], aes(x=global_mean,y=mean)) +
geom_point() +
# stat_smooth(method="lm") +
geom_abline(intercept = 0, slope = 1) +
facet_wrap(~anno) +
theme_bw()
print(p)
}
p <- ggplot(stats_filt[stage==i], aes(x=global_mean,y=mean)) +
labs(title=i) +
geom_point() +
# stat_smooth(method="lm") +
geom_abline(intercept = 0, slope = 1) +
facet_wrap(~anno) +
theme_bw()
for (i in unique(stats_filt$stage)) {
p <- ggplot(stats_filt[stage==i], aes(x=global_mean,y=mean)) +
labs(title=i) +
geom_point() +
# stat_smooth(method="lm") +
geom_abline(intercept = 0, slope = 1) +
facet_wrap(~anno) +
theme_bw()
print(p)
}
p <- ggplot(stats_filt[stage==i], aes(x=global_mean,y=mean)) +
labs(title=i) +
geom_point() +
# stat_smooth(method="lm") +
geom_abline(intercept = 0, slope = 1) +
facet_wrap(~anno, scales="free") +
theme_bw()
print(p)
p <- ggplot(stats_filt[stage==i], aes(x=global_mean,y=mean)) +
labs(title=i) +
geom_point() +
stat_smooth(method="lm") +
# geom_abline(intercept = 0, slope = 1) +
facet_wrap(~anno, scales="free") +
theme_bw()
print(p)
for (i in unique(stats_filt$stage)) {
p <- ggplot(stats_filt[stage==i], aes(x=global_mean,y=mean)) +
labs(title=i) +
geom_point() +
stat_smooth(method="lm") +
# geom_abline(intercept = 0, slope = 1) +
facet_wrap(~anno, scales="free") +
theme_bw()
print(p)
}
