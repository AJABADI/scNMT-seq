N_cells      <- length(unique(rna_dt$sample))  # Number of unique cells
rna_all_st   <- rna_all_st[, cv_expr := log2((1 + 1/(4 * N_cells)) * cv_expr)]  # Correct CV empirically
# Extract biological variance, i.e. overdispersion
rna_all_st <- rna_all_st[, overdispersion := fData(sceset)$bioVar]
# Extract gene coordinates metadata to do the overlap
rna_metadata <- fData(sceset) %>% tibble::rownames_to_column("gene") %>% as.data.table %>% .[,c("chr", "start", "end", "gene", "ens_id")]  %>% .[, chr := as.factor(sub("chr", "", chr))] %>% setnames("ens_id", "id")
rna_all_st   <- merge(rna_metadata[, c("chr", "id", "gene")], rna_all_st, by = c("gene")) # Merge using all samples
rna_dt       <- merge(rna_metadata[, c("chr", "id", "gene")], rna_dt, by = c("gene"))     # Merge using only samples that pass filtering
rm(sceset)
# Load data
met_dt     <- fread(sprintf("zcat < %s", io$met_file)) %>% as.data.table %>% .[anno %in% opts$annos] %>% .[, rate := rate + rtruncnorm(.N, a = 0, b = Inf, mean = 0, sd = 0.01 )]
met_dt     <- met_dt[weight >= opts$min.weight]  # Keep only covered regions
keep_sites <- met_dt[,.(n = .N), by = c("id")] %>% .[n >= opts$min.s] %>% .$id  ## Filter id-gene pairs with small number of samples
met_dt     <- met_dt[id %in% keep_sites]
met_all_st <- met_dt[, .(mean_met = mean(rate), median_met = median(rate), var_met = var(rate), sd_met = sd(rate)), by = id] # Compute summary statistics for each gene across cells
rm(met_dt, keep_sites)
accrna_dt  <- readRDS(io$acc_file) %>% .[cells > 20] # Load accessibility data
accrna_all <- merge(rna_all_st, accrna_dt, by = c("id")) %>% setorder(clusters) # Merge with expression data using all samples
accrna_all_factor <- copy(accrna_all) # Copy acc_data object
accrna_all_factor <- accrna_all_factor %>% .[, clusters := factor(clusters)] %>% .[, N := .N, by = clusters] %>% .[N > 30] # Make clusters as factors
# metacc_all <- merge(met_all_st, accrna_dt, by = c("id")) %>% setorder(clusters)  # Merge with methylation data using all samples
metacc_all <- merge(met_all_st, accrna_all_factor, by = c("id")) %>% setorder(clusters)  # Merge with methylation data using all samples
# # Process to get statistics only for cells that pass filtering
# dt_N <- NROW(accrna_dt)
# rna_filt <- data.table(id=character(dt_N), gene=character(dt_N), mean_expr=numeric(dt_N), median_expr=numeric(dt_N), var_expr = numeric(dt_N), sd_expr = numeric(dt_N), cv_expr = numeric(dt_N))
# # Iterate over each region
# for (i in 1:NROW(accrna_dt)){
#   res <- rna_dt[id == accrna_dt$id[i] & sample %in% accrna_dt$cell_names[[i]], .(mean_expr=mean(expr), median_expr=median(expr), var_expr=var(expr), sd_expr=sd(expr), cv_expr=sd(expr)/mean(expr)), by=c("id","gene")]
#   if (NROW(res) > 0 ){ set(rna_filt, i, 1:7, res) }
# }
# rna_filt    <- rna_filt %>% .[id != ""]  # Remove genes that we had no metadata information
# accrna_filt <- merge(rna_filt, accrna_dt, by = c("id")) %>% setorder(clusters) # Merge data
# accrna_filt <- accrna_filt %>% .[, clusters := factor(clusters)] %>% .[, N := .N, by = clusters] %>% .[N > 10] # Make clusters as factors
# Acc conservation - Mean expression association, Cluster all cells
p <- ggplot(accrna_all_factor[,c("clusters","mean_expr", "N")], aes(x=clusters, y=mean_expr)) +
geom_boxplot(alpha=0.7, outlier.shape=NA, fill="#00BFC4") + geom_hline(yintercept=0, colour="black", linetype="dashed") +
stat_summary(fun.y = function(x){ xx <- min(x); return(xx - 0.7)}, aes(label = paste0("N=", as.character(N))), geom='text', col='black', size = 5) +
labs(title=NULL, x="Clusters (i.e. conservation)", y="Mean expression") + boxplot_theme()
p
invisible(pdf(file = paste0(io$out_dir, "cl_acc_mean_expr_all.pdf"), width = 8, height = 8)); p; invisible(dev.off())
# # Acc conservation - Mean expression association, Cluster filtered cells
# p <- ggplot(accrna_filt[,c("clusters","mean_expr", "N")], aes(x=clusters, y=mean_expr)) +
#   geom_boxplot(alpha=0.7, outlier.shape=NA, fill="#00BFC4") + geom_hline(yintercept=0, colour="black", linetype="dashed") +
#   stat_summary(fun.y = function(x){ xx <- min(x); return(xx - 0.7)}, aes(label = paste0("N=", as.character(N))), geom='text', col='black', size = 5) +
#   labs(title=NULL, x="Clusters (i.e. conservation)", y="Mean expression") + boxplot_theme()
# p
# invisible(pdf(file = paste0(io$out_dir, "cl_acc_mean_expr_filt.pdf"), width = 12, height = 9)); p; invisible(dev.off())
io$reactomeFile  <- paste0(io$genelist_dir, "/mouse_v75_reactome.rds")
io$reactomeFile2 <- paste0(io$genelist_dir, "/AllPathways.txt")
# Read reactome file and change gene names to Upper case
reactome           <- readRDS(io$reactomeFile); colnames(reactome) <- toupper(colnames(reactome))
# Read pathways file to change from ID to description pathway
tmp                <- read.table(io$reactomeFile2, header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta      <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
feature.sets       <- reactome  # Store results to the following object
opts$min.size      <- 10  # Filter feature sets with small number of features
feature.sets       <- feature.sets[rowSums(feature.sets)>=opts$min.size, ]
# Remove features that do not intersect between the feature sets and the data
accrna_tmp        <- copy(accrna_all_factor)
features          <- intersect(toupper(accrna_tmp$gene), colnames(feature.sets))
foo_filt          <- accrna_tmp[,gene:=toupper(gene)] %>% .[gene %in% features]
feature.sets_filt <- feature.sets[,features]
# Melt and merge data to do the fisher's test
asd <- melt.data.table(as.data.table(feature.sets_filt, keep.rownames="pathway"), id.vars = "pathway", variable.name="gene", value.name="value") %>% merge(foo_filt[,c("gene","clusters")], allow.cartesian=T, by="gene")
# Get GO list for each cluster
go_list <- list()
for (c in unique(sort(asd$cluster))) {
go_list[[c]] <- asd[,.(p=fisher.test(x=matrix(data=c(.SD[clusters==c & value==1,.N], .SD[clusters!=c & value==1,.N],
.SD[clusters==c & value==0,.N], .SD[clusters!=c & value==0,.N]),
nrow=2, ncol=2), alternative="greater")[["p.value"]]), by="pathway"] %>%
.[,padj:=p.adjust(p, method = "fdr")] %>% setorder(p)
# Create a nice formatted table
print(knitr::kable(go_list[[c]][1:45], caption = paste0("GO enrichment: Cluster ", c)))
# Convert pvalues to log scale (add a small regulariser to avoid numerical errors)
tmp <- copy(go_list[[c]])
tmp$log <- -log10(tmp$padj)
# Annotate significcant pathways
# tmp$sig <- factor(tmp$pvalue<opts$threshold)
#order according to significance
tmp$pathway <- factor(tmp$pathway, levels = tmp$pathway[order(tmp$padj, decreasing = T)])
p <- ggplot(tmp[1:15], aes(x=pathway, y=log)) +
# ggtitle(paste("Enriched sets in factor", factor)) +
geom_point(size=5) +
geom_hline(yintercept=-log10(opts$threshold), linetype="longdash", color = "red") +
# scale_y_continuous(limits=c(0,7)) +
scale_color_manual(values=c("black","red")) +
geom_segment(aes(xend=pathway, yend=0)) +
ylab(expression(paste("-log"[10],"(",plain(q),"-value)"))) + coord_flip() +
theme(axis.text.y = element_text(size=rel(0.9), hjust=1, color='black'),
axis.text.x = element_text(size=rel(1.2), vjust=0.5, color='black'),
axis.title.y=element_blank(),
legend.position='none',
panel.background = element_blank()
)
print(p)
invisible(pdf(file = paste0(io$out_dir, "GO_enrichment_cluster_", c, ".pdf"), width = 12, height = 5)); print(p); invisible(dev.off())
fwrite(go_list[[c]], file = paste0("GO_enrichment_cluster_", c, ".pdf"))
}
io$reactomeFile  <- paste0(io$genelist_dir, "/mouse_v75_reactome.rds")
io$reactomeFile2 <- paste0(io$genelist_dir, "/AllPathways.txt")
# Read reactome file and change gene names to Upper case
reactome           <- readRDS(io$reactomeFile); colnames(reactome) <- toupper(colnames(reactome))
# Read pathways file to change from ID to description pathway
tmp                <- read.table(io$reactomeFile2, header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta      <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
feature.sets       <- reactome  # Store results to the following object
opts$min.size      <- 10  # Filter feature sets with small number of features
feature.sets       <- feature.sets[rowSums(feature.sets)>=opts$min.size, ]
# Remove features that do not intersect between the feature sets and the data
accrna_tmp        <- copy(accrna_all_factor)
features          <- intersect(toupper(accrna_tmp$gene), colnames(feature.sets))
foo_filt          <- accrna_tmp[,gene:=toupper(gene)] %>% .[gene %in% features]
feature.sets_filt <- feature.sets[,features]
# Melt and merge data to do the fisher's test
asd <- melt.data.table(as.data.table(feature.sets_filt, keep.rownames="pathway"), id.vars = "pathway", variable.name="gene", value.name="value") %>% merge(foo_filt[,c("gene","clusters")], allow.cartesian=T, by="gene")
# Get GO list for each cluster
go_list <- list()
for (c in unique(sort(asd$cluster))) {
go_list[[c]] <- asd[,.(p=fisher.test(x=matrix(data=c(.SD[clusters==c & value==1,.N], .SD[clusters!=c & value==1,.N],
.SD[clusters==c & value==0,.N], .SD[clusters!=c & value==0,.N]),
nrow=2, ncol=2), alternative="greater")[["p.value"]]), by="pathway"] %>%
.[,padj:=p.adjust(p, method = "fdr")] %>% setorder(p)
# Create a nice formatted table
print(knitr::kable(go_list[[c]][1:45], caption = paste0("GO enrichment: Cluster ", c)))
# Convert pvalues to log scale (add a small regulariser to avoid numerical errors)
tmp <- copy(go_list[[c]])
tmp$log <- -log10(tmp$padj)
# Annotate significcant pathways
# tmp$sig <- factor(tmp$pvalue<opts$threshold)
#order according to significance
tmp$pathway <- factor(tmp$pathway, levels = tmp$pathway[order(tmp$padj, decreasing = T)])
p <- ggplot(tmp[1:15], aes(x=pathway, y=log)) +
# ggtitle(paste("Enriched sets in factor", factor)) +
geom_point(size=5) +
geom_hline(yintercept=-log10(opts$threshold), linetype="longdash", color = "red") +
# scale_y_continuous(limits=c(0,7)) +
scale_color_manual(values=c("black","red")) +
geom_segment(aes(xend=pathway, yend=0)) +
ylab(expression(paste("-log"[10],"(",plain(q),"-value)"))) + coord_flip() +
theme(axis.text.y = element_text(size=rel(0.9), hjust=1, color='black'),
axis.text.x = element_text(size=rel(1.2), vjust=0.5, color='black'),
axis.title.y=element_blank(),
legend.position='none',
panel.background = element_blank()
)
print(p)
invisible(pdf(file = paste0(io$out_dir, "GO_enrichment_cluster_", c, ".pdf"), width = 12, height = 5)); print(p); invisible(dev.off())
fwrite(go_list[[c]], file = paste0(io$out_dir, "GO_enrichment_cluster_", c, ".csv"))
}
saveRDS(go_list, file = paste0(io$out_dir, "GO_list.rds"))
suppressPackageStartupMessages(library(BPRMeth))
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(scales))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
# Define ggplot2 theme for scatter plots
scatter_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,10,0), hjust=0.5),
plot.subtitle = element_text(size=20, face='bold', margin=margin(0,0,10,0), hjust=0.5),
axis.text=element_text(size=rel(1.75), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.title.x = element_text(margin=margin(10,0,0,0)),
legend.position="right",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
# Scatter plot function
scatter_plot <- function(data, xlabel="", ylabel="", title="", subtitle="", lm=FALSE, loess = FALSE) {
p <- ggplot(data, aes_string(x=names(data)[1], y=names(data)[2], col=names(data)[3])) +
labs(x=xlabel, y=ylabel, title=title, subtitle=subtitle) +
geom_point(shape = 16, size = 2.5, show.legend = FALSE, alpha = .55) +
scatter_theme() +
scale_color_gradient(low = "#0091ff", high = "#f0650e")
if (lm){
if (loess){ p <- p + geom_smooth() }#+ scale_x_continuous(trans = "log1p")
else{ p <- p + geom_smooth(method='lm') }
}
}
# Define ggplot2 boxplot theme for boxplots
boxplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5, margin=margin(0,0,20,0)),
axis.title.y = element_text(colour="black", size=20, vjust=1.5),
axis.title.x = element_text(colour="black", size=20, vjust=1.5, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.6)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="none",
legend.text=element_text(size=15),
legend.title=element_blank(),
legend.background=element_blank(),
panel.border = element_blank()
)
}
# Define ggplot2 theme for line plots
line_theme <- function(){
p <- theme(
plot.title=element_text(size=25, face='bold', margin=margin(0,0,5,0), hjust=0.5),
axis.text=element_text(size=rel(1.15), color='black'),
axis.title=element_text(size=rel(1.55), color='black'),
axis.title.y = element_text(margin=margin(0,15,0,0)),
axis.title.x = element_text(margin=margin(15,0,0,0)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
legend.position="right",
legend.key.size = unit(1.9, 'lines'),
legend.title=element_text(size=24, face='bold'),
legend.text=element_text(size=19),
panel.border=element_blank(),
panel.grid.major = element_line(colour = "gainsboro"),
#panel.grid.minor = element_line(colour = "grey"),
panel.background = element_blank()
)
}
# Data
io                     <- list()
io$base_dir            <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data-eb"
# io$base_dir          <- "/Users/ricard/data/NMT-seq"
# io$base_dir          <- "/Users/kapouranis/Documents/Andreas/Code/datasets/nmt-seq-data"
io$out_dir             <- "/home/cakapourani/Documents/Code/nmt-seq/rebuttal/EB/acc_conservation/out/cluster/"
io$rna_file            <- paste0(io$base_dir, "/rna/parsed/sceset.rds")
io$acc_file            <- paste0(io$base_dir, "/acc/parsed/profiles/cons_cluster_prom_200_200_basis13_GpCcov10_bic2_cellcov0.6.rds")
io$genelist_dir        <- paste0(io$base_dir, "/metadata")
io$plur_genes_file     <- paste0(io$genelist_dir, "/pluripotency_extended.tsv")
io$h3k4me3_genes_file  <- paste0(io$genelist_dir, "/H3K4me3.bed")
io$h3k27me3_genes_file <- paste0(io$genelist_dir, "/H3K27me3.bed")
opts                   <- list()
opts$gene_window       <- 1e3    # window length for the overlap between genes and features
sceset       <- readRDS(file = io$rna_file)  # Load expression as SCESet object
# Create data.table
rna_dt       <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>% melt(id.vars = "sample", value.name = "expr", variable.name = "gene")
# Compute summary statistics for each gene across cells
rna_all_st   <- rna_dt[, .(mean_expr = mean(expr), median_expr = median(expr), var_expr = var(expr), sd_expr = sd(expr), cv_expr = sd(expr)/mean(expr)), by = gene]
N_cells      <- length(unique(rna_dt$sample))  # Number of unique cells
rna_all_st   <- rna_all_st[, cv_expr := log2((1 + 1/(4 * N_cells)) * cv_expr)]  # Correct CV empirically
# Extract biological variance, i.e. overdispersion
rna_all_st <- rna_all_st[, overdispersion := fData(sceset)$bioVar]
# Extract gene coordinates metadata to do the overlap
rna_metadata <- fData(sceset) %>% tibble::rownames_to_column("gene") %>% as.data.table %>% .[,c("chr", "start", "end", "gene", "ens_id")]  %>% .[, chr := as.factor(sub("chr", "", chr))] %>% setnames("ens_id", "id")
rna_all_st   <- merge(rna_metadata[, c("chr", "id", "gene")], rna_all_st, by = c("gene")) # Merge using all samples
rna_dt       <- merge(rna_metadata[, c("chr", "id", "gene")], rna_dt, by = c("gene"))     # Merge using only samples that pass filtering
rm(sceset)
accrna_dt  <- readRDS(io$acc_file) %>% .[cells > 10] # Load accessibility data
accrna_all <- merge(rna_all_st, accrna_dt, by = c("id")) %>% setorder(clusters) # Merge with expression data using all samples
accrna_all_factor <- copy(accrna_all) # Copy acc_data object
accrna_all_factor <- accrna_all_factor %>% .[, clusters := factor(clusters)] %>% .[, N := .N, by = clusters] %>% .[N > 30] # Make clusters as factors
# # Process to get statistics only for cells that pass filtering
# dt_N <- NROW(accrna_dt)
# rna_filt <- data.table(id=character(dt_N), gene=character(dt_N), mean_expr=numeric(dt_N), median_expr=numeric(dt_N), var_expr = numeric(dt_N), sd_expr = numeric(dt_N), cv_expr = numeric(dt_N))
# # Iterate over each region
# for (i in 1:NROW(accrna_dt)){
#   res <- rna_dt[id == accrna_dt$id[i] & sample %in% accrna_dt$cell_names[[i]], .(mean_expr=mean(expr), median_expr=median(expr), var_expr=var(expr), sd_expr=sd(expr), cv_expr=sd(expr)/mean(expr)), by=c("id","gene")]
#   if (NROW(res) > 0 ){ set(rna_filt, i, 1:7, res) }
# }
# rna_filt    <- rna_filt %>% .[id != ""]  # Remove genes that we had no metadata information
# accrna_filt <- merge(rna_filt, accrna_dt, by = c("id")) %>% setorder(clusters) # Merge data
# accrna_filt <- accrna_filt %>% .[, clusters := factor(clusters)] %>% .[, N := .N, by = clusters] %>% .[N > 10] # Make clusters as factors
io$reactomeFile  <- paste0(io$genelist_dir, "/mouse_v75_reactome.rds")
io$reactomeFile2 <- paste0(io$genelist_dir, "/AllPathways.txt")
# Read reactome file and change gene names to Upper case
reactome           <- readRDS(io$reactomeFile); colnames(reactome) <- toupper(colnames(reactome))
# Read pathways file to change from ID to description pathway
tmp                <- read.table(io$reactomeFile2, header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta      <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
feature.sets       <- reactome  # Store results to the following object
opts$min.size      <- 10  # Filter feature sets with small number of features
feature.sets       <- feature.sets[rowSums(feature.sets)>=opts$min.size, ]
# Remove features that do not intersect between the feature sets and the data
accrna_tmp        <- copy(accrna_all_factor)
features          <- intersect(toupper(accrna_tmp$gene), colnames(feature.sets))
foo_filt          <- accrna_tmp[,gene:=toupper(gene)] %>% .[gene %in% features]
feature.sets_filt <- feature.sets[,features]
# Melt and merge data to do the fisher's test
asd <- melt.data.table(as.data.table(feature.sets_filt, keep.rownames="pathway"), id.vars = "pathway", variable.name="gene", value.name="value") %>% merge(foo_filt[,c("gene","clusters")], allow.cartesian=T, by="gene")
# Get GO list for each cluster
go_list <- list()
for (c in unique(sort(asd$cluster))) {
go_list[[c]] <- asd[,.(p=fisher.test(x=matrix(data=c(.SD[clusters==c & value==1,.N], .SD[clusters!=c & value==1,.N],
.SD[clusters==c & value==0,.N], .SD[clusters!=c & value==0,.N]),
nrow=2, ncol=2), alternative="greater")[["p.value"]]), by="pathway"] %>%
.[,padj:=p.adjust(p, method = "fdr")] %>% setorder(p)
# Create a nice formatted table
print(knitr::kable(go_list[[c]][1:45], caption = paste0("GO enrichment: Cluster ", c)))
# Convert pvalues to log scale (add a small regulariser to avoid numerical errors)
tmp <- copy(go_list[[c]])
tmp$log <- -log10(tmp$padj)
# Annotate significcant pathways
# tmp$sig <- factor(tmp$pvalue<opts$threshold)
#order according to significance
tmp$pathway <- factor(tmp$pathway, levels = tmp$pathway[order(tmp$padj, decreasing = T)])
p <- ggplot(tmp[1:15], aes(x=pathway, y=log)) +
# ggtitle(paste("Enriched sets in factor", factor)) +
geom_point(size=5) +
geom_hline(yintercept=-log10(opts$threshold), linetype="longdash", color = "red") +
# scale_y_continuous(limits=c(0,7)) +
scale_color_manual(values=c("black","red")) +
geom_segment(aes(xend=pathway, yend=0)) +
ylab(expression(paste("-log"[10],"(",plain(q),"-value)"))) + coord_flip() +
theme(axis.text.y = element_text(size=rel(0.9), hjust=1, color='black'),
axis.text.x = element_text(size=rel(1.2), vjust=0.5, color='black'),
axis.title.y=element_blank(),
legend.position='none',
panel.background = element_blank()
)
print(p)
invisible(pdf(file = paste0(io$out_dir, "GO_enrichment_cluster_", c, ".pdf"), width = 12, height = 5)); print(p); invisible(dev.off())
fwrite(go_list[[c]], file = paste0(io$out_dir, "GO_enrichment_cluster_", c, ".csv"))
}
# Data
io                     <- list()
io$base_dir            <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data-eb"
# io$base_dir          <- "/Users/ricard/data/NMT-seq"
# io$base_dir          <- "/Users/kapouranis/Documents/Andreas/Code/datasets/nmt-seq-data"
io$out_dir             <- "/home/cakapourani/Documents/Code/nmt-seq/rebuttal/EB/acc_conservation/out/cluster/"
io$rna_file            <- paste0(io$base_dir, "/rna/parsed/sceset.rds")
io$acc_file            <- paste0(io$base_dir, "/acc/parsed/profiles/cons_cluster_prom_200_200_basis13_GpCcov10_bic2_cellcov0.6.rds")
io$genelist_dir        <- paste0(io$base_dir, "/metadata")
io$plur_genes_file     <- paste0(io$genelist_dir, "/pluripotency_extended.tsv")
io$h3k4me3_genes_file  <- paste0(io$genelist_dir, "/H3K4me3.bed")
io$h3k27me3_genes_file <- paste0(io$genelist_dir, "/H3K27me3.bed")
opts                   <- list()
opts$annos             <- c("prom_500_500")
opts$min.weight        <- 5      # Minimum weight per feature (met coverage)
opts$min.s             <- 10     # minimum number of samples to do the correlation
opts$gene_window       <- 1e3    # window length for the overlap between genes and features
opts$threshold         <- 5e-2   # threshold for significant hits
io$reactomeFile  <- paste0(io$genelist_dir, "/mouse_v75_reactome.rds")
io$reactomeFile2 <- paste0(io$genelist_dir, "/AllPathways.txt")
# Read reactome file and change gene names to Upper case
reactome           <- readRDS(io$reactomeFile); colnames(reactome) <- toupper(colnames(reactome))
# Read pathways file to change from ID to description pathway
tmp                <- read.table(io$reactomeFile2, header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta      <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
feature.sets       <- reactome  # Store results to the following object
opts$min.size      <- 10  # Filter feature sets with small number of features
feature.sets       <- feature.sets[rowSums(feature.sets)>=opts$min.size, ]
# Remove features that do not intersect between the feature sets and the data
accrna_tmp        <- copy(accrna_all_factor)
features          <- intersect(toupper(accrna_tmp$gene), colnames(feature.sets))
foo_filt          <- accrna_tmp[,gene:=toupper(gene)] %>% .[gene %in% features]
feature.sets_filt <- feature.sets[,features]
# Melt and merge data to do the fisher's test
asd <- melt.data.table(as.data.table(feature.sets_filt, keep.rownames="pathway"), id.vars = "pathway", variable.name="gene", value.name="value") %>% merge(foo_filt[,c("gene","clusters")], allow.cartesian=T, by="gene")
# Get GO list for each cluster
go_list <- list()
for (c in unique(sort(asd$cluster))) {
go_list[[c]] <- asd[,.(p=fisher.test(x=matrix(data=c(.SD[clusters==c & value==1,.N], .SD[clusters!=c & value==1,.N],
.SD[clusters==c & value==0,.N], .SD[clusters!=c & value==0,.N]),
nrow=2, ncol=2), alternative="greater")[["p.value"]]), by="pathway"] %>%
.[,padj:=p.adjust(p, method = "fdr")] %>% setorder(p)
# Create a nice formatted table
print(knitr::kable(go_list[[c]][1:45], caption = paste0("GO enrichment: Cluster ", c)))
# Convert pvalues to log scale (add a small regulariser to avoid numerical errors)
tmp <- copy(go_list[[c]])
tmp$log <- -log10(tmp$padj)
# Annotate significcant pathways
# tmp$sig <- factor(tmp$pvalue<opts$threshold)
#order according to significance
tmp$pathway <- factor(tmp$pathway, levels = tmp$pathway[order(tmp$padj, decreasing = T)])
p <- ggplot(tmp[1:15], aes(x=pathway, y=log)) +
# ggtitle(paste("Enriched sets in factor", factor)) +
geom_point(size=5) +
geom_hline(yintercept=-log10(opts$threshold), linetype="longdash", color = "red") +
# scale_y_continuous(limits=c(0,7)) +
scale_color_manual(values=c("black","red")) +
geom_segment(aes(xend=pathway, yend=0)) +
ylab(expression(paste("-log"[10],"(",plain(q),"-value)"))) + coord_flip() +
theme(axis.text.y = element_text(size=rel(0.9), hjust=1, color='black'),
axis.text.x = element_text(size=rel(1.2), vjust=0.5, color='black'),
axis.title.y=element_blank(),
legend.position='none',
panel.background = element_blank()
)
print(p)
invisible(pdf(file = paste0(io$out_dir, "GO_enrichment_cluster_", c, ".pdf"), width = 12, height = 5)); print(p); invisible(dev.off())
fwrite(go_list[[c]], file = paste0(io$out_dir, "GO_enrichment_cluster_", c, ".csv"))
}
saveRDS(go_list, file = paste0(io$out_dir, "GO_list.rds"))
library(rstan)
remove.packages("rstand")
remove.packages("rstan")
library(rstan)
source('~/Documents/Code/Mixture-Models/Dirichlet-Nonparametric/Drichlet Process.R')
# devtools::install_github("andreaskapou/BPRMeth-devel")
suppressPackageStartupMessages(require(BPRMeth))
suppressPackageStartupMessages(require(matrixcalc))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(purrr))
# Define ggplot2 theme for line plots
line_theme <- function(){
p <- theme(
plot.title=element_text(size=20, face='bold', margin=margin(0,0,3,0), hjust=0.5),
axis.text=element_text(size=rel(1.05), color='black'),
axis.title=element_text(size=rel(1.45), color='black'),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.title.x = element_text(margin=margin(10,0,0,0)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
legend.position="right",
legend.key.size = unit(1.9, 'lines'),
legend.title=element_text(size=24, face='bold'),
legend.text=element_text(size=19),
panel.border=element_blank(),
panel.grid.major = element_line(colour = "gainsboro"),
panel.background = element_blank()
)
}
# Plot the predictive distribution
draw_predictive <- function(X, obs, title="", ...){
p <- ggplot(data = data.frame(X), aes(x = xs, y = ys)) +
geom_line(aes(x = xs, y = ys), size=1.5, col = "darkblue") +
geom_ribbon(aes(ymin=ys_low,ymax=ys_high), alpha=0.4, size=0.1, fill="cornflowerblue") +
geom_point(data = obs, mapping = aes(x=x, y=y), shape=1, color="red", size=3) +
labs(title = title, x="x", y="y") +
line_theme()
}
# Fit VBLR model
vblr_fit <- function(X, y, beta = 0.5, a_0 = 1e-2, b_0 = 1e-2, max_iter = 500,
epsilon_conv = 1e-5, is_verbose = FALSE){
L <- rep(NA, max_iter)  # Store the lower bounds
D <- NCOL(X)            # Number of covariates
N <- NROW(X)            # Number of observations
XX <- crossprod(X, X)   # Compute X'X
Xy <- crossprod(X, y)   # Compute X'y
yy <- c(crossprod(y))   # Compute y'y
##
# TODO Better way to initialize parameters
##
a_N <- a_0 + D / 2  # Compute \alpha_N parameter of Gamma
E_a <- a_0 / b_0    # Initialize expected value of \alpha precision parameter
# Iterate to find optimal parameters
L[1] <- -1e+40
for (iter in 2:max_iter){
# Update covariance matrix of Gaussian factor
S_N <- solve(diag(E_a, D) + beta * XX)
# Update parameter for mean of Gaussian factor
m_N <- beta * S_N %*% Xy
# Update expectation of E[w'w]
E_ww <- as.vector(crossprod(m_N) + matrix.trace(S_N))
# Update b_N parameter of Gamma factor
b_N <- b_0 + 0.5 * E_ww
# Compute expectation of E[a]
E_a <- a_N / b_N
# Compute lower bound
lb_py <- N/2 * log(beta / 2 * pi) - beta / 2 * yy + beta * crossprod(m_N, Xy) -
(beta / 2) * matrix.trace(XX %*% (tcrossprod(m_N, m_N) + S_N))
lb_pw <- - D/2 * log(2*pi) + D/2 * (digamma(a_N) - log(b_N)) - 0.5 * E_a * E_ww
lb_pa <- a_0*log(b_0) + (a_0 - 1) * (digamma(a_N) - log(b_N)) - b_0 * E_a - log(gamma(a_0))
lb_qw <- - 0.5 * log(det(S_N)) - D/2*(1 + log(2*pi))
lb_qa <- - lgamma(a_N) + (a_N - 1)*digamma(a_N) + log(b_N) - a_N
L[iter] <- lb_py + lb_pw + lb_pa - lb_qw - lb_qa
# Show VB difference
if (is_verbose){ cat("It:\t",iter,"\tLB:\t",L[iter],"\tLB_diff:\t",L[iter]-L[iter-1],"\n")}
# Check if lower bound decreases
if (L[iter] < L[iter-1]){ message("Lower bound decreases - Stopping VB!\n"); break}
# Check for convergence
if (L[iter] - L[iter-1] < epsilon_conv){ break }
# Check if VB converged in the given maximum iterations
if (iter == max_iter){warning("VB did not converge!\n")}
}
obj <- structure(list(X = X, N = N, D = D, w = m_N, S = S_N, beta = beta,
a = a_N, b = b_N, L = L[1:iter]), class = "vblr")
return(obj)
}
# Compute predictive distribution of VBLR model
vblr_predictive <- function(model, X_test){
# Predictive mean
mu_pred <- c(X_test %*% model$w)
# Predictive variance
s_pred <- sqrt(1 / model$beta + diag(X_test %*% model$S %*% t(X_test)))
return(list(mu_pred = mu_pred, s_pred = s_pred))
}
set.seed(12345)     # For reproducibility
N <- 30             # Number of observations
D <- 1              # For simplicity we have only one covariate
coefs <- c(-0.5, 2) # Generate y with these coefficients
beta <- 1/2         # Precision parameter
X <- cbind(1, replicate(D, rnorm(N)))           # Generate X data
y <- X %*% coefs  + rnorm(N, sd = sqrt(1/beta)) # Generate y data
# Run VBLR model
vblr_model <- vblr_fit(X = X, y = y, beta = beta, is_verbose = TRUE)
xs <- seq(-3, 3, len = 100) # create some values
# Estimate predictive distribution
pred <- vblr_predictive(model = vblr_model, X_test = cbind(1, xs))
# Store test data in dt
dt <- data.table(xs = xs, ys = 0, ys_low = 0, ys_high = 0)
dt <- dt %>% .[, c("ys","ys_low","ys_high") :=
list(pred$mu_pred, pred$mu_pred-2*pred$s_pred, pred$mu_pred+2*pred$s_pred)]
# Store training data
obs <- as.data.table(cbind(X[, 2], y)) %>% setnames(c("x", "y"))
p <- draw_predictive(X = dt, obs = obs, title = "Simple linear regression example")
print(p)
source('~/Documents/Code/nmt-seq/rebuttal/EB/acc_conservation/scripts/cluster_lineage_profiles_400bp.R')
