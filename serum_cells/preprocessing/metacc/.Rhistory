legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
# Define ggplot2 theme for boxplots
boxplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5, margin=margin(0,0,20,0)),
axis.title.y = element_text(colour="black", size=20, vjust=1.5),
axis.title.x = element_text(colour="black", size=20, vjust=1.5, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.6)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="right",
legend.text=element_text(size=15),
legend.title=element_blank(),
legend.background=element_blank(),
panel.border = element_blank()
)
}
gg_volcano_plot <- function(cor_samples, title = ""){
p <- ggplot(cor_samples, aes(x=r, y=-log10(p))) +
labs(title=title, x="Weighted Pearson correlation", y=expression(paste("-log"[10],"(",plain(p),")"))) +
#geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=8.1), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
scale_x_continuous(limits=c(-1,1)) +
scale_y_continuous(limits=c(0,8.5)) +
annotate("text", x=0, y=8.47, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-0.5, y=8.47, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=0.5, y=8.47, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# geom_text(data=cor_samples[sig == TRUE], aes(x=r, y=log_padj_fdr, label=gene), vjust=-0.0, hjust=-0.3) +
ggrepel::geom_text_repel(data=cor_samples[sig == TRUE], aes(x=r, y=-log10(p), label=gene), size=6) +
scatter_theme()
}
gg_qqplot = function(cor_res, perm_xs, ci=0.95, title = "Quantile-quantile plot of p-values"){
xs <- cor_res$p
cor_res <- cor_res[, expected := -log10(1:.N / .N)]
N  <- length(xs)
df <- data.frame(observed = -log10(sort(xs)),
permuted = -log10(sort(perm_xs)),
expected = -log10(1:N / N),
cupper   = -log10(qbeta(ci,     1:N, N - 1:N + 1)),
clower   = -log10(qbeta(1 - ci, 1:N, N - 1:N + 1)))
log10Pe = expression(paste("Expected -log"[10], "(", plain(p), ")" ))
log10Po = expression(paste("Observed -log"[10], "(", plain(p), ")" ))
ggplot(df) +
geom_point(aes(expected, permuted), shape=3, size=1.5, color = "cornflowerblue") +
geom_abline(intercept=0, slope=1, alpha=0.5, color = "darkgrey") +
geom_line(aes(expected, cupper), linetype=2, color = "darkgrey") +
geom_line(aes(expected, clower), linetype=2, color = "darkgrey") +
#geom_point(aes(expected, observed), size=2) +
geom_point(data=cor_res, aes(expected, -log10(sort(p)), color = sig), size=2) +
scale_color_manual(values=c("black","red")) +
xlab(log10Pe) + ylab(log10Po) + labs(title=title) +
scatter_theme()
}
# Data
io   <- list()
# io$base_dir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
# io$base_dir   <- "/Users/kapouranis/Documents/Andreas/Code/datasets/nmt-seq-data"
io$base_dir   <- "/Users/ricard/data/NMT-seq"
io$in.sample_metadata <- paste0(io$base_dir,"/sample_info_all.txt")
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$rna_file   <- paste0(io$base_dir, "/rna/parsed/sceset_all.rds")
io$met_file   <- paste0(io$base_dir, "/met/parsed/met_data.tsv.gz")
io$outdir <- "/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/correlations/out"
# Filtering parameters
opts <- list()
opts$min.weight     <- 3      # minimum weight per feature
opts$min.coverage   <- 0.3    # minimum coverage per feature across samples
opts$min.cdr        <- 0.3    # minimum cellular detection rate per gene (expr)
opts$fraction.genes <- 0.5    # fraction of genes (expr) to keep based on variance
opts$fraction.sites <- 0.5    # fraction of sites (met) to keep based on variance
# opts$min.n          <- 100    # minimum number of features per annotation
opts$min.s          <- 20     # minimum number of samples to do the correlation
opts$gene_window    <- 2e4    # window length for the overlap between genes and features
opts$n_perms        <- 1    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
opts$cor_samples <- F
# gene-associated contexts
# opts$annos <- c("prom_2000_2000", "active_enhancers", "super_enhancers", "primed_enhancers", "CTCF", "p300", "exons", "introns", "Nanog", "Oct4")
opts$annos <- c("prom_2000_2000", "active_enhancers", "super_enhancers", "CTCF", "exons", "introns","genebody")
opts$anno_names <- c(
"prom_2000_2000_cgi"="CGI promoters",
"prom_2000_2000_noncgi"="non-CGI promoters",
"prom_2000_2000$"="Promoters",
"active_enhancers"="Active enhancers",
"super_enhancers"="Super enhancers",
"primed_enhancers"="Primed enhancers",
"exons"="Exons",
"introns"="Introns",
"genebody"="Gene body"
)
# cells
opts$cells <- fread(io$in.sample_metadata, header=T, sep=" ") %>% .[pass_metQC==T & pass_rnaQC==T,sample]
# Load expression as SCESet object
sceset <- readRDS(file = io$rna_file)
# Subset cells
sceset <- sceset[,opts$cells]
# sceset <- filter(sceset, culture=="Serum" & type=="NMT")
# Subset genes
# genes <- fread("/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/differential/out/diff_expr.tsv")[,gene]
# genes <- rownames(sceset)[fData(sceset)$HVG]
# sceset <- sceset[genes,]
# Create data.table
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>% melt(id.vars = "sample", value.name = "expr", variable.name = "gene")
# Extract gene coordinates metadata to do the overlap
rna_metadata <- fData(sceset) %>% tibble::rownames_to_column("gene") %>% as.data.table %>% .[,c("chr", "start", "end", "gene", "ens_id")]  %>%
.[, chr := as.factor(sub("chr", "", chr))] %>% setnames("ens_id", "id")
metrna_dt <- fread(sprintf("zcat < %s", io$met_file)) %>% as.data.table %>% .[anno%in%opts$annos & sample%in%opts$cells] %>% droplevels
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
# Define ggplot2 theme for scatter plots
scatter_theme <- function(){
p <- theme(
plot.title=element_text(size=20, face='bold', margin=margin(0,0,10,0), hjust=0.5),
axis.text=element_text(size=rel(1.5), color='black'),
axis.title=element_text(size=rel(1.5), color='black'),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.title.x = element_text(margin=margin(10,0,0,0)),
legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
# Define ggplot2 theme for boxplots
boxplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5, margin=margin(0,0,20,0)),
axis.title.y = element_text(colour="black", size=20, vjust=1.5),
axis.title.x = element_text(colour="black", size=20, vjust=1.5, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.6)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="right",
legend.text=element_text(size=15),
legend.title=element_blank(),
legend.background=element_blank(),
panel.border = element_blank()
)
}
gg_volcano_plot <- function(cor_samples, title = ""){
p <- ggplot(cor_samples, aes(x=r, y=-log10(p))) +
labs(title=title, x="Weighted Pearson correlation", y=expression(paste("-log"[10],"(",plain(p),")"))) +
#geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=8.1), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
scale_x_continuous(limits=c(-1,1)) +
scale_y_continuous(limits=c(0,8.5)) +
annotate("text", x=0, y=8.47, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-0.5, y=8.47, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=0.5, y=8.47, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# geom_text(data=cor_samples[sig == TRUE], aes(x=r, y=log_padj_fdr, label=gene), vjust=-0.0, hjust=-0.3) +
ggrepel::geom_text_repel(data=cor_samples[sig == TRUE], aes(x=r, y=-log10(p), label=gene), size=6) +
scatter_theme()
}
gg_qqplot = function(cor_res, perm_xs, ci=0.95, title = "Quantile-quantile plot of p-values"){
xs <- cor_res$p
cor_res <- cor_res[, expected := -log10(1:.N / .N)]
N  <- length(xs)
df <- data.frame(observed = -log10(sort(xs)),
permuted = -log10(sort(perm_xs)),
expected = -log10(1:N / N),
cupper   = -log10(qbeta(ci,     1:N, N - 1:N + 1)),
clower   = -log10(qbeta(1 - ci, 1:N, N - 1:N + 1)))
log10Pe = expression(paste("Expected -log"[10], "(", plain(p), ")" ))
log10Po = expression(paste("Observed -log"[10], "(", plain(p), ")" ))
ggplot(df) +
geom_point(aes(expected, permuted), shape=3, size=1.5, color = "cornflowerblue") +
geom_abline(intercept=0, slope=1, alpha=0.5, color = "darkgrey") +
geom_line(aes(expected, cupper), linetype=2, color = "darkgrey") +
geom_line(aes(expected, clower), linetype=2, color = "darkgrey") +
#geom_point(aes(expected, observed), size=2) +
geom_point(data=cor_res, aes(expected, -log10(sort(p)), color = sig), size=2) +
scale_color_manual(values=c("black","red")) +
xlab(log10Pe) + ylab(log10Po) + labs(title=title) +
scatter_theme()
}
# Data
io   <- list()
# io$base_dir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
# io$base_dir   <- "/Users/kapouranis/Documents/Andreas/Code/datasets/nmt-seq-data"
io$base_dir   <- "/Users/ricard/data/NMT-seq"
io$in.sample_metadata <- paste0(io$base_dir,"/sample_info_all.txt")
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$rna_file   <- paste0(io$base_dir, "/rna/parsed/sceset_all.rds")
io$met_file   <- paste0(io$base_dir, "/met/parsed/met_data.tsv.gz")
io$outdir <- "/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/correlations/out"
# Filtering parameters
opts <- list()
opts$min.weight     <- 3      # minimum weight per feature
opts$min.coverage   <- 0.3    # minimum coverage per feature across samples
opts$min.cdr        <- 0.3    # minimum cellular detection rate per gene (expr)
opts$fraction.genes <- 0.5    # fraction of genes (expr) to keep based on variance
opts$fraction.sites <- 0.5    # fraction of sites (met) to keep based on variance
# opts$min.n          <- 100    # minimum number of features per annotation
opts$min.s          <- 20     # minimum number of samples to do the correlation
opts$gene_window    <- 2e4    # window length for the overlap between genes and features
opts$n_perms        <- 1    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
opts$cor_samples <- F
# gene-associated contexts
# opts$annos <- c("prom_2000_2000", "active_enhancers", "super_enhancers", "primed_enhancers", "CTCF", "p300", "exons", "introns", "Nanog", "Oct4")
opts$annos <- c("prom_2000_2000", "active_enhancers", "super_enhancers", "CTCF", "exons", "introns","genebody")
opts$anno_names <- c(
"prom_2000_2000_cgi"="CGI promoters",
"prom_2000_2000_noncgi"="non-CGI promoters",
"prom_2000_2000$"="Promoters",
"active_enhancers"="Active enhancers",
"super_enhancers"="Super enhancers",
"primed_enhancers"="Primed enhancers",
"exons"="Exons",
"introns"="Introns",
"genebody"="Gene body"
)
# cells
opts$cells <- fread(io$in.sample_metadata, header=T, sep=" ") %>% .[pass_metQC==T & pass_rnaQC==T,sample]
# Load expression as SCESet object
sceset <- readRDS(file = io$rna_file)
# Subset cells
sceset <- sceset[,opts$cells]
# sceset <- filter(sceset, culture=="Serum" & type=="NMT")
# Subset genes
# genes <- fread("/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/differential/out/diff_expr.tsv")[,gene]
# genes <- rownames(sceset)[fData(sceset)$HVG]
# sceset <- sceset[genes,]
# Create data.table
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>% melt(id.vars = "sample", value.name = "expr", variable.name = "gene")
# Extract gene coordinates metadata to do the overlap
rna_metadata <- fData(sceset) %>% tibble::rownames_to_column("gene") %>% as.data.table %>% .[,c("chr", "start", "end", "gene", "ens_id")]  %>%
.[, chr := as.factor(sub("chr", "", chr))] %>% setnames("ens_id", "id")
metrna_dt <- fread(sprintf("zcat < %s", io$met_file)) %>% as.data.table %>% .[anno%in%opts$annos & sample%in%opts$cells] %>% droplevels
sample_metadata <- fread(io$in.sample_metadata, header=T, sep=" ") %>% .[sample%in%opts$cells]
anno_dt <- lapply(opts$annos, function(anno) fread(sprintf("%s/%s.bed", io$annos_dir, anno),
colClasses = c("character", "integer", "integer", "character", "character", "character"))[, c(1, 2, 3, 4, 5, 6)]) %>%
rbindlist %>% setnames(c("chr", "start", "end", "strand", "id", "anno")) %>% .[,c("anno", "chr") := list(as.factor(anno), as.factor(chr))]
metrna_list <- list()
# Iterate over each feature
for (ann in unique(metrna_dt$anno)){
# Subset corresponding anno
met_tmp <- metrna_dt[anno == ann, ]
# Non gene-associated feature
if (all(grepl("ENSMUSG", unique(met_tmp$id)) == FALSE)) {
# Extract coordiantes for methylation sites and for genes
feature_metadata_tmp <- anno_dt[anno == ann, c("chr", "start", "end", "id")] %>% setkey(chr, start, end)
rna_metadata_tmp <- rna_metadata[, c("chr", "start", "end", "gene")] %>%
.[,c("start", "end") := list(start - opts$gene_window, end + opts$gene_window)] %>% setkey(chr, start, end)
# Do the overlap
ov <- foverlaps(feature_metadata_tmp, rna_metadata_tmp, nomatch = 0) %>% .[,c("gene", "id")]
# Add expression levels
ov_rna <- merge(rna, ov, by = "gene", allow.cartesian = TRUE)
# Merge with methylation data
metrna_list[[ann]] <- merge(ov_rna, met_tmp, by = c("sample", "id")) %>%
.[,c("sample", "id", "gene", "anno", "expr", "rate", "weight")]
}
# Gene-associated feature
else if (all(grepl("ENSMUSG", unique(met_tmp$id)) == TRUE)) {
met_tmp <- merge(met_tmp, rna_metadata[, c("id", "gene")], by = "id")
metrna_list[[ann]] <- merge(rna, met_tmp, by = c("sample", "gene")) %>%
.[,c("sample", "id", "gene", "anno", "expr", "rate", "weight")]
}
}
metrna_dt <- rbindlist(metrna_list)
rm(metrna_list, met_tmp, feature_metadata_tmp, rna_metadata_tmp, ov, ov_rna)
# Remove features with low weight (all types of correlation)
metrna_dt <- metrna_dt[weight >= opts$min.weight]
if (opts$cor_samples) {
# To correlate across samples
metrna_filt <- copy(metrna_dt)
## Remove genes/features with constant expression across samples
keep_var_genes <- metrna_filt %>% split(.$anno) %>% map(~ .[, .(var = var(expr)), by = "gene"] %>% .[var > 2, gene])
keep_var_sites <- metrna_filt %>% split(.$anno) %>% map(~ .[, .(var = wtd.var(rate, weight)), by = c("id")] %>% .[var > 2, id])
metrna_filt <- metrna_filt %>% split(.$anno) %>% map2(., names(.), function(x,y) x[gene %in% keep_var_genes[[y]] & id %in% keep_var_sites[[y]]]) %>% rbindlist
## Filter genes with low cellular detection rate and sites with low coverage across samples
nsamples <- length(unique(metrna_filt$sample))
keep_cov_genes <- metrna_filt %>% split(.$anno) %>% map(~ .[,.(cdr = sum(expr > 0) / .N), by = "gene"] %>% .[cdr >= opts$min.cdr, gene])
keep_cov_sites <- metrna_filt %>% split(.$anno) %>% map(~ .[,.(cov = .N / nsamples), by = c("id")] %>% .[cov >= opts$min.coverage, id])
metrna_filt <- metrna_filt %>% split(.$anno) %>% map2(., names(.), function(x,y) x[gene %in% keep_cov_genes[[y]] & id %in% keep_cov_sites[[y]]]) %>% rbindlist
## Filter id-gene pairs with small number of samples (only required for the correlation across samples)
keep_scov_sites <- metrna_filt[,.(n = .N), by = c("id", "anno")] %>% .[n >= opts$min.s] %>% .$id
metrna_filt <- metrna_filt[id %in% keep_scov_sites]
## Extract highly variable genes/sites across samples
keep_hv_genes <- metrna_filt %>% split(.$anno) %>% map(~ .[,.(var = var(expr)), by = "gene"] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.genes) %>% .$gene)
keep_hv_sites <- metrna_filt %>% split(.$anno) %>% map(~ .[,.(var = wtd.var(rate,weight)), by = c("id")] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.sites) %>% .$id)
metrna_filt <- metrna_filt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[gene %in% keep_hv_genes[[y]] & id %in% keep_hv_sites[[y]]]) %>% rbindlist
## Filter annotations with few sites
# keep_anno <- metrna_filt[, .(N = length(unique(id))), by = "anno"] %>% .[N > opts$min.n, anno]
# metrna_filt <- metrna_filt[anno %in% keep_anno] %>% .[, anno := drop.levels(anno)]
# keep_anno <- metrna_dt[, .(N = length(unique(id))), by = "anno"] %>% .[N > opts$min.n, anno]
# metrna_dt <- metrna_dt[anno %in% keep_anno] %>% .[, anno := drop.levels(anno)]
}
# Weighted correlation
if (opts$weight == TRUE){
if (opts$method != "pearson") { print("Weighted correlation only supported for pearson"); stop() }
# Correlate rate across samples
if (opts$cor_samples) {
cor_samples <- metrna_filt[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("id", "gene", "anno")]
}
# Correlate rate across genes
cor_genes <- metrna_dt[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("sample", "anno")]
}else{
if (opts$cor_samples) {
# Correlate rate across samples
cor_samples <- metrna_filt[, .(V1 = unlist(cor.test(rate, expr, alternative = "two.sided", method = opts$method)[c("estimate", "statistic", "p.value")])), by = c("id", "gene", "anno")]
}
# Correlate rate across genes
cor_genes <- metrna_dt[, .(V1 = unlist(cor.test(rate, expr, alternative = "two.sided", method = opts$method)[c("estimate", "statistic", "p.value")])), by = c("sample", "anno")]
}
# Compute adjusted p-values across samples (both FDR and Bonferroni)
if (opts$cor_samples) {
cor_samples <- cor_samples %>% .[, para := c("r", "t", "p")] %>% dcast(id + gene + anno ~ para, value.var = "V1") %>%
.[, c("padj_fdr", "padj_bonf") := list(p.adjust(p, method = "fdr"), p.adjust(p, method = "bonferroni")), by = anno] %>%
.[, c("log_padj_fdr","log_padj_bonf") := list(-log10(padj_fdr), -log10(padj_bonf))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>%  setorder(padj_fdr)
}
# Compute adjusted p-values across genes (both FDR and Bonferroni)
cor_genes <- cor_genes %>% .[,para := c("r", "t", "p")] %>% dcast(sample + anno ~ para, value.var = "V1") %>%
.[, c("padj_fdr", "padj_bonf") := list(p.adjust(p, method = "fdr"), p.adjust(p, method = "bonferroni")), by = anno] %>%
.[, c("log_padj_fdr", "log_padj_bonf") := list(-log10(padj_fdr), -log10(padj_bonf))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>% setorder(padj_fdr)
if (opts$cor_samples) {
pp_vals <- vector(mode = "numeric", length = length(cor_samples$p))
# For each iteration...
for (k in 1:opts$n_perms){
# Copy original methylation data
metrna_filt_perm <- copy(metrna_filt)
# Permute gene expression levels
metrna_filt_perm <- metrna_filt_perm[, expr := sample(expr), by = c("gene", "id", "anno")]
# Compute correlation across samples
cor_samples_perm <- metrna_filt_perm[, .(p = wtd.cor(expr, rate, weight)[, c("p.value")]), by = c("id", "gene", "anno")]
# For each annotation sort by p-value
cor_samples_perm <- cor_samples_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# Add the sorted p-values
pp_vals <- pp_vals + cor_samples_perm %>% .[, p]
}
# Compute the average p-values
pp_vals <- pp_vals / opts$n_perms
# Store them in a data.table for later analysis
cor_samples_perm <- cor_samples_perm[, p := pp_vals]
}
cor_genes[,anno:=stringr::str_replace_all(cor_genes$anno, opts$anno_names)]
if (opts$cor_samples) {
cor_samples_perm[,anno:=stringr::str_replace_all(cor_samples_perm$anno, opts$anno_names)]
cor_samples[,anno:=stringr::str_replace_all(cor_samples$anno, opts$anno_names)]
}
# Boxplot of correlations across samples
# p <- ggplot(cor_samples, aes(x=anno, y=r)) +
#   geom_boxplot(alpha=0.8, outlier.shape=NA, fill="#F8766D") + geom_hline(yintercept=0, colour="black", linetype="dashed") +
#   labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
#   scale_y_continuous(limits=c(-0.7,0.7)) + coord_flip() + boxplot_theme()
# p
# pdf(file="out/across_cells.pdf", width=8, height=6)
# print(p)
# dev.off()
# Boxplot of correlations across genes
tmp <- merge(cor_genes, sample_metadata[,c("sample","culture")], by="sample")
p <- ggplot(tmp, aes(x=anno, y=r)) +
# geom_boxplot(alpha=0.8, outlier.shape=NA, fill="#F8766D") +
geom_boxplot(aes(fill=culture), alpha=0.8, outlier.shape=NA) +
scale_fill_manual(values=c("orangered1","orangered4")) +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() + scale_y_continuous(limits=c(-0.41, 0.05)) + boxplot_theme()
p
# pdf(file=paste0(io$outdir, "/boxplot_across_genes.pdf"), width=8, height=6)
# print(p)
# dev.off()
if (opts$cor_samples) {
pp <- qq <- list()
for (n in unique(cor_samples$anno)) {
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
# Generate volcano plot
pp[[n]] <- gg_volcano_plot(cor_samples[anno == n,], title = "")
# Generate permutation plot
qq[[n]] <- gg_qqplot(cor_samples[anno == n, ], cor_samples_perm[anno == n]$p, title = "")
# Combine and save
# pdf(file=paste0(io$outdir,"/volcano_", n, ".pdf"), width = 14, height = 8, useDingbats = FALSE)
grid.arrange(pp[[n]], qq[[n]], ncol=2, top = textGrob(n, gp=gpar(fontsize=29, fontface = "bold")), newpage = TRUE)
# dev.off()
# print(plot_grid(pp[[n]], qq[[n]], labels = c("", ""), label_size = 20, ncol = 2, nrow = 1))
}
}
fwrite(cor_genes, paste0(io$outdir,"/metrna_cor_features.tsv"), sep="\t")
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(data.table))
theme_pub <- function() {
theme(
plot.title = element_text(size=20, hjust=0.5, margin=margin(0,0,20,0)),
axis.title.y = element_text(colour="black", size=13, vjust=1.5),
axis.title.x = element_text(colour="black", size=13, vjust=1.5, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.3)),
axis.text.y = element_text(colour="black",size=rel(1.3)),
# axis.line = element_line(colour="black", size=rel(0.7)),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="right",
legend.title=element_blank(),
legend.key       = element_rect(fill = "white", colour = "white"),
legend.background = element_rect(fill="white", color="white"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_line(color="grey")
)
}
theme_bw <- function() {
theme(
# white background and dark border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey20"),
# make gridlines dark, same contrast with white as in theme_grey
panel.grid.major = element_line(colour = "grey92"),
panel.grid.minor = element_line(colour = "grey92", size = rel(0.5)),
# contour strips to match panel contour
strip.background = element_rect(fill = "grey85", colour = "grey20"),
# match legend key to background
legend.key       = element_rect(fill = "white", colour = NA),
complete = TRUE
)
}
opts <- list()
opts$metrna_annos <- c("Active enhancers","Primed enhancers","Super enhancers","CTCF","Nanog","non-CGI promoters","Oct4","p300")
opts$accrna_annos <- c("Active enhancers","Primed enhancers","Super enhancers","CTCF","Nanog","non-CGI promoters","Oct4","p300")
# Load methylation/RNA correlations
metrna <- fread("/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/correlations/out/metrna_cor_features.tsv", header=T) %>%
.[,type:="CG"]# %>% .[anno%in%opts$metrna_annos]
# Load accessibility/RNA correlations
accrna <- fread("/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/correlations/out/accrna_cor_features.tsv", header=T) %>%
.[,type:="GC"]# %>% .[anno%in%opts$accrna_annos]
# Load accessibility/methylation correlations
metacc <- fread("/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/correlations/out/metacc_cor_features.tsv", header=T) %>%
.[,type:="CGC"]# %>% .[anno%in%opts$metacc_annos]
# Load pseudotime trajectory
pseudotime <- fread("/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/pseudotime/out/destiny.tsv", header=T ) # destiny
tmp <- rbind(metrna,accrna,metacc) %>% merge(pseudotime, by="sample") %>%
.[,pseudotime:=pseudotime]
ggplot(tmp[type=="CG"], aes(x=pseudotime, y=r, color=anno)) +
# geom_point() +
stat_smooth(method="lm", se=F) +
labs(x="Pseudotime", y="Mehtylation/RNA correlation coefficient", color="") +
theme_bw() + theme_pub()
ggplot(tmp[type=="GC"], aes(x=pseudotime, y=r, color=anno)) +
# geom_point() +
stat_smooth(method="lm", se=F) +
labs(x="Pseudotime", y="Correlation coefficient", color="") +
theme_bw() + theme_pub()
# opts$metacc_annos <- c("Active enhancers","Primed enhancers","Super enhancers","CTCF","Nanog","non-CGI promoters","Oct4","p300")
opts$metacc_annos <- c("Super enhancers","CTCF","Nanog","non-CGI promoters","Oct4","p300")
# opts$metacc_annos <- c("Super enhancers")
p <- ggplot(tmp[type=="CGC" & anno%in%opts$metacc_annos], aes(x=pseudotime, y=r, color=anno)) +
# geom_point(size=1, data=tmp[type=="CGC" & anno%in%c("p300")]) +
geom_point(size=1, alpha=0.5) +
# stat_smooth(method="lm", se=F) +
stat_smooth(aes(fill=anno), method="lm", se=T, alpha=0.1) +
# stat_smooth(method="loess", se=F) +
labs(x="Pseudotime", y="Methylation/Accessibility correlation coefficient", color="") +
guides(fill=FALSE) +
# scale_x_continuous(breaks = sort(unique(tmp$pseudotime)),
# limits = c(-0.25,0.22), expand = c(0,0)) +
theme_bw() + theme_pub()
print(p)
pdf("/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/pseudotime/out/metacc_correlation.pdf", width = 8, height = 6)
print(p)
dev.off()
tmp <- rbind(metrna,accrna,metacc) %>% merge(pseudotime, by="sample") %>%
.[,pseudotime:=-pseudotime]
# opts$metacc_annos <- c("Active enhancers","Primed enhancers","Super enhancers","CTCF","Nanog","non-CGI promoters","Oct4","p300")
opts$metacc_annos <- c("Super enhancers","CTCF","Nanog","non-CGI promoters","Oct4","p300")
# opts$metacc_annos <- c("Super enhancers")
p <- ggplot(tmp[type=="CGC" & anno%in%opts$metacc_annos], aes(x=pseudotime, y=r, color=anno)) +
# geom_point(size=1, data=tmp[type=="CGC" & anno%in%c("p300")]) +
geom_point(size=1, alpha=0.5) +
# stat_smooth(method="lm", se=F) +
stat_smooth(aes(fill=anno), method="lm", se=T, alpha=0.1) +
# stat_smooth(method="loess", se=F) +
labs(x="Pseudotime", y="Methylation/Accessibility correlation coefficient", color="") +
guides(fill=FALSE) +
# scale_x_continuous(breaks = sort(unique(tmp$pseudotime)),
# limits = c(-0.25,0.22), expand = c(0,0)) +
theme_bw() + theme_pub()
print(p)
# pdf("/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/pseudotime/out/metacc_correlation.pdf", width = 8, height = 6)
# print(p)
# dev.off()
