basis         = bpr_opts$basis,
lambda        = bpr_opts$lambda,
fit_feature   = NULL,
cpg_dens_feat = FALSE,
opt_itnmax    = bpr_opts$opt_itnmax,
is_parallel   = bpr_opts$is_parallel,
no_cores      = bpr_opts$no_cores)$w_opt
metdna_prof[[exp]] <- as.data.table(metdna_profiles) %>%
.[, sample := c(names(metdna_dt), "Bulk")]
if (bpr_opts$is_cluster){
# Use Kmeans with random starts
cl <- stats::kmeans(metdna_profiles[1:N, ], bpr_opts$K, nstart = 25)
# Get the mixture components
C_n <- cl$cluster
# Mean for each cluster
w <- t(cl$centers)
pi_k <- as.vector(table(C_n) / N)
# Cluster methylation profiles
metdna_mix_model[[exp]] <- bpr_cluster_wrap(x             = metdna_list_data,
K             = bpr_opts$K,
pi_k          = pi_k,
w             = w,
basis         = bpr_opts$basis,
lambda        = bpr_opts$lambda,
em_max_iter   = 20,
epsilon_conv  = 1e-2,
opt_itnmax    = bpr_opts$opt_itnmax/2,
init_opt_itnmax = bpr_opts$opt_itnmax,
is_parallel   = bpr_opts$is_parallel,
no_cores      = bpr_opts$no_cores,
is_verbose    = TRUE)
}
}
return(list(metdna_prof = metdna_prof,
metdna_mix_model = metdna_mix_model))
}
#
## Plot methylation profiles across the whole region
plot_region_profiles <- function(prof_obj, bpr_opts,
main_lab = "Genomic Region",
sample_name = "Bulk", ...){
xs <- seq(from = -1, to = 1, by = 0.001)
bulk_dna <- prof_obj$metdna_prof$dna[sample == sample_name] %>% .[, sample := NULL]
bulk_met <- prof_obj$metdna_prof$met[sample == sample_name] %>% .[, sample := NULL]
graphics::plot(x = xs,
y = eval_probit_function(bpr_opts$basis, xs,as.numeric(bulk_dna)),
type = "l", ylim = c(0,1), xlim = c(-1,1), main = main_lab,
col = 'coral', lwd = 2, xlab = NA, ylab = NA, cex.axis = 0.9, xaxt = "n")
graphics::lines(x = xs,
y = eval_probit_function(bpr_opts$basis, xs,as.numeric(bulk_met)),
col = 'cornflowerblue', lwd = 2)
graphics::mtext(side = 1, "", line = 3, cex = 1.2)
graphics::mtext(side = 2, "methylation level", line = 3, cex = 1.2)
graphics::axis(side = 1, at = c(-1, 1), labels=c(as.character(bpr_opts$window_start), as.character(bpr_opts$window_end)))
# graphics::legend("topright", legend = c("GC", "CG"), cex = 0.7, lty = 1, lwd = 2, col = c("coral", "cornflowerblue"))
}
## Plot methylation profiles across the whole region together with the observations
plot_region_data_prof <- function(data_obj, prof_obj, bpr_opts,
main_lab = "", sample_name = "", ...){
xs <- seq(from = -1, to = 1, by = 0.001)
# Extract observations from the specific cell
dna_dt <- data_obj$dna[sample == sample_name] %>%
.[, c("pos", "rate") := list(BPRMeth:::.minmax_scaling(pos,
bpr_opts$window_start,
bpr_opts$window_end),
ifelse(rate > 50, 1, 0) )]
met_dt <- data_obj$met[sample == sample_name] %>%
.[, c("pos", "rate") := list(BPRMeth:::.minmax_scaling(pos,
bpr_opts$window_start,
bpr_opts$window_end),
ifelse(rate > 50, 1, 0) )]
# Extract fitted profiles from specific cell
dna_prof <- prof_obj$metdna_prof$dna[sample == sample_name] %>% .[, sample := NULL]
met_prof <- prof_obj$metdna_prof$met[sample == sample_name] %>% .[, sample := NULL]
### DNA Acc plots
graphics::plot(x = xs, y = eval_probit_function(bpr_opts$basis, xs, as.numeric(dna_prof)),
type = "l", ylim = c(0,1), xlim = c(-1,1), main = main_lab,
col = '#00BFC4', lwd = 4.0, xlab = NA, ylab = NA, cex.axis = 1.0, xaxt = "n")
graphics::points(x = dna_dt$pos, y = dna_dt$rate, col = "#00BFC4", pch = 21, lwd = 1.6)
### Met plots
graphics::lines(x = xs, y = eval_probit_function(bpr_opts$basis, xs, as.numeric(met_prof)), col = '#F8766D', lwd = 4)
graphics::mtext(side = 1, "", line = 3, cex = 1.2)
graphics::mtext(side = 2, "methylation level", line = 3, cex = 1.2)
# graphics::axis(side = 1, at = c(-1, 1), labels=c(as.character(bpr_opts$window_start), as.character(bpr_opts$window_end)))
graphics::axis(side = 1)
graphics::points(x = met_dt$pos, y = met_dt$rate, col = "#F8766D", pch = 25, lwd = 1.6)
# graphics::legend("topright",
#                  legend = c("GC", "CG"), cex = 0.7,
#                  lty = 1, lwd = 2, col = c("coral", "cornflowerblue"))
}
# plot_bpr_profiles <- function(region, X, fit_prof, thresh = 0.9,
#                               title = "", up_label = "", down_label = "", middle_label = "", ...){
#   graphics::par(cex=1.05, mai=c(0.87, 0.85, .7, .3) )
#   xs <- seq(from = -1, to = 1, by = 0.01)
#   graphics::plot(X[[region]][, 1], X[[region]][, 2], col = "blue2", pch = 21, ylim = c(0,1),
#                  xlim = c(-1,1), lwd = 0.8, xlab = NA, ylab = NA,
#                  cex.axis = 1.1, xaxt = "n")
#   graphics::mtext(side = 1, "genomic region", line = 3, cex = 1.2)
#   graphics::mtext(side = 2, "methylation level", line = 3, cex = 1.2)
#   graphics::axis(side = 1, at = c(-1, 0, 1), labels=c(up_label, middle_label, down_label))
#   graphics::title(main=title, line = 1, cex.main=1.4)
#   graphics::lines(x = xs, y = eval_probit_function(fit_prof$basis, xs,
#                                                    fit_prof$W_opt[region, 1:(fit_prof$basis$M + 1)]),
#                   col = "red2", lwd = 2)
#   graphics::abline(h = thresh, col = "black", lwd = 1.2, lty = 2)
#   graphics::abline(h = 1- thresh, col = "black", lwd = 1.2, lty = 2)
# }
#
## Plot clustered methylation profiles across the whole region
plot_region_cluster_prof <- function(bpr_cluster_obj, main_lab = "Clustered methylation profiles", show_dots=FALSE){
graphics::par(mar=c(4.2, 4.1, 3.1, 2), xpd=TRUE)
cols <- c("darkolivegreen4", "cornflowerblue",
"coral", "firebrick","#E69F00", "darkmagenta",
"darkslategray", "lightgoldenrod4", "lightseagreen")
xs <- seq(from = -1, to = 1, by = 0.001)
graphics::plot(x = xs,
y = eval_probit_function(bpr_cluster_obj$basis, xs, bpr_cluster_obj$w[,1]),
xlim = c(-1, 1), ylim = c(0, 1),
type = "l", col = cols[1], lwd = 3,
xlab = "",
ylab = "Methylation",
main = main_lab,
cex.lab=1.25)
K <- bpr_cluster_obj$K
if (K > 1){
for (k in 2:K){
graphics::lines(x = xs, y = eval_probit_function(bpr_cluster_obj$basis, xs, bpr_cluster_obj$w[, k]),
col = cols[k], lwd = 3)
}
}
# graphics::legend("topright",
#                  legend = seq(1, bpr_cluster_obj$K), cex = 0.7,
#                  lty = 1, lwd = 2, col = cols[1:bpr_cluster_obj$K],
#                  title = "Cl")
}
plot_data_profile <- function(data_obj, prof_obj, bpr_opts, main_lab = "", sample_name = "", ...){
# Extract observations from the specific cell
dna_dt <- data_obj$dna[sample == sample_name] %>%
.[, c("pos", "rate") := list(BPRMeth:::.minmax_scaling(pos, bpr_opts$window_start, bpr_opts$window_end), ifelse(rate > 50, 1, 0) )]
met_dt <- data_obj$met[sample == sample_name] %>%
.[, c("pos", "rate") := list(BPRMeth:::.minmax_scaling(pos, bpr_opts$window_start, bpr_opts$window_end), ifelse(rate > 50, 1, 0) )]
# Extract fitted profiles from specific cell
dna_prof <- prof_obj$metdna_prof$dna[sample == sample_name] %>% .[, sample := NULL]
met_prof <- prof_obj$metdna_prof$met[sample == sample_name] %>% .[, sample := NULL]
### DNA Acc plots
xs <- seq(from = -1, to = 1, by = 0.001)
graphics::plot(x = xs, y = eval_probit_function(bpr_opts$basis, xs, as.numeric(dna_prof)),
type = "l", ylim = c(-0.05,1.05), xlim = c(-1,1), main = main_lab, cex.main=1.5,
col = '#00BFC4', lwd = 2.2, xlab = NA, ylab = NA, cex.axis = 1.4, xaxt = "n", at=c(0.0,0.5,1.0))
graphics::points(x = dna_dt$pos, y = dna_dt$rate+0.00, col = "#00BFC4", pch = 21, lwd = 1.3)
### Met plots
graphics::lines(x = xs, y = eval_probit_function(bpr_opts$basis, xs, as.numeric(met_prof)), col = '#F8766D', lwd = 2.2)
graphics::points(x = met_dt$pos, y = met_dt$rate-0.03, col = "#F8766D", pch = 25, lwd = 1.3)
# graphics::axis(side = 1, at = c(-1,0,1), labels=c(as.character(bpr_opts$window_start), "TSS", as.character(bpr_opts$window_end)))
graphics::axis(side = 1, at = c(0), labels=c("TSS"), cex.axis=1.4)
# graphics::legend("topright",
#                  legend = c("GC", "CG"), cex = 0.7,
#                  lty = 1, lwd = 2, col = c("coral", "cornflowerblue"))
}
##########################################################################
## Script to plot methylation/accessibility profiles in specific region ##
##########################################################################
# Load libraries
suppressMessages(library(scater))
suppressMessages(library(data.table))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
suppressMessages(library(BPRMeth))
# setwd("/Users/ricard/NMT-seq/zoom")
source("/Users/ricard/NMT-seq/zoom/andreas/utils_region.R")
####################
## Define options ##
####################
## I/O ##
io <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$basedir <- "/Users/ricard/data/NMT-seq"
} else {
io$basedir <- "/hps/nobackup/stegle/users/ricard/NMT-seq"
}
io$in.sample_metadata <- paste(io$basedir,"sample_info.txt",sep="/")
io$met_dir <- paste0(io$basedir,"/met/raw/allele_unspecific")
io$dna_dir <- paste0(io$basedir,"/dna/raw/allele_unspecific")
io$rna_file <- paste0(io$basedir,"/rna/parsed/allele_unspecific/sceset.rds")
## options ##
opts <- list()
opts$gene <- "Cth"
opts$chr <- "3"
opts$start <- 157924080
opts$end <- 157926080
opts$M <- 50
opts$cells <- c("B01","C01","E01","G01","A02","E02","G02","H02","A03","B03","C03","D03","E03","F03","G03","H03","A04","C04","E04","F04","H04","A05","B05","C05","D05","E05","F05","G05","H05","A06","B06","C06","D06","E06","F06","G06","H06","A07","C07","D07","E07","F07","H07","A08","B08","D08","F08","G08","H08","A09","B09","C09","D09","F09","G09","H09")
################
## Load data  ##
################
# Methylation and Accessibility
filename <- sprintf("/Users/ricard/NMT-seq/zoom/files/%s_chr%s_%s-%s.rds",opts$gene,opts$chr,opts$start,opts$end)
if (file.exists(filename)) {
data <- readRDS(filename)
} else {
data <- read_genomic_windows(io,opts)
saveRDS(data, file=filename)
}
# Filter according to coverage
# opts$cells <- intersect(opts$cells, data$dna[,.N,by="sample"] %>% .[N>20,sample])
# opts$cells <- intersect(opts$cells, data$met[,.N,by="sample"] %>% .[N>10,sample])
# Expression
rna <- exprs(readRDS(io$rna_file)[opts$gene,opts$cells])
data$rna <- data.table(sample=colnames(rna), expr=rna[1,])
##################
## Fit profiles ##
##################
# Learn methylation profiles for each cell
bpr_opts <- list(basis=create_rbf_object(M=opts$M), lambda=1/6, is_cluster=FALSE,
window_start=opts$start, window_end=opts$end,
opt_itnmax=20, is_parallel=TRUE, no_cores=2)
profiles <- learn_region_profiles(data_obj=data[-3], bpr_opts=bpr_opts)
interesting_cells <- c("G08","H08","H07","F07","F06","C06","G05","D05","B05","F04","A04","F03")
for (sample_name in interesting_cells) {
title <- sprintf("Sample: %s\nExpression: %0.02f", sample_name, data$rna[sample==sample_name,expr])
print(title)
plot_data_profile(data_obj=data, prof_obj=profiles, bpr_opts=bpr_opts, sample_name=sample_name, main_lab=title)
}
title <- sprintf("Expression: %0.02f", data$rna[sample==sample_name,expr])
print(title)
plot_data_profile(data_obj=data, prof_obj=profiles, bpr_opts=bpr_opts, sample_name=sample_name, main_lab=title)
interesting_cells <- c("G08","H08","H07","F07","F06","C06","G05","D05","B05","F04","A04","F03")
# for (sample_name in opts$cells) {
for (sample_name in interesting_cells) {
# title <- sprintf("Sample: %s\nExpression: %0.02f", sample_name, data$rna[sample==sample_name,expr])
title <- sprintf("Expression: %0.02f", data$rna[sample==sample_name,expr])
print(title)
plot_data_profile(data_obj=data, prof_obj=profiles, bpr_opts=bpr_opts, sample_name=sample_name, main_lab=title)
}
sample <- "B05"
title <- sprintf("Expression: %0.02f", data$rna[sample==sample_name,expr])
out <- sprintf("/Users/ricard/NMT-seq/zoom/Cth/out/%s_prom.pdf",sample)
pdf(file=out, width=5, height=5, useDingbats=FALSE)
plot_data_profile(data_obj=data, prof_obj=profiles, bpr_opts=bpr_opts, sample_name=sample, main_lab=title)
dev.off()
for (sample_name in interesting_cells) {
# title <- sprintf("Sample: %s\nExpression: %0.02f", sample_name, data$rna[sample==sample_name,expr])
title <- sprintf("Expression: %0.02f", data$rna[sample==sample_name,expr])
print(title)
plot_data_profile(data_obj=data, prof_obj=profiles, bpr_opts=bpr_opts, sample_name=sample_name, main_lab=title)
}
for (sample_name in interesting_cells) {
title <- sprintf("Sample: %s\nExpression: %0.02f", sample_name, data$rna[sample==sample_name,expr])
print(title)
plot_data_profile(data_obj=data, prof_obj=profiles, bpr_opts=bpr_opts, sample_name=sample_name, main_lab=title)
}
sample <- "F03"
title <- sprintf("Expression: %0.02f", data$rna[sample==sample_name,expr])
out <- sprintf("/Users/ricard/NMT-seq/zoom/Cth/out/%s_prom.pdf",sample)
pdf(file=out, width=5, height=5, useDingbats=FALSE)
plot_data_profile(data_obj=data, prof_obj=profiles, bpr_opts=bpr_opts, sample_name=sample, main_lab=title)
dev.off()
suppressMessages(library(scater))
suppressMessages(library(data.table))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
source("/Users/ricard/NMT-seq/zoom/andreas/utils_region.R")
io <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$basedir <- "/Users/ricard/data/NMT-seq"
} else {
io$basedir <- "/hps/nobackup/stegle/users/ricard/NMT-seq"
}
io$in.sample_metadata <- paste(io$basedir,"sample_info.txt",sep="/")
io$met_dir <- paste0(io$basedir,"/met/raw/allele_unspecific")
io$dna_dir <- paste0(io$basedir,"/dna/raw/allele_unspecific")
io$rna_file <- paste0(io$basedir,"/rna/parsed/allele_unspecific/sceset.rds")
opts <- list()
opts$gene <- "Cth"
opts$chr <- "3"
opts$start <- 157924248
opts$end <- 157928248
opts$cells <- c("B01","C01","E01","G01","A02","E02","G02","H02","A03","B03","C03","D03","E03","F03","G03","H03","A04","C04","E04","F04","H04","A05","B05","C05","D05","E05","F05","G05","H05","A06","B06","C06","D06","E06","F06","G06","H06","A07","C07","D07","E07","F07","H07","A08","B08","D08","F08","G08","H08","A09","B09","C09","D09","F09","G09","H09")
filename <- sprintf("/Users/ricard/NMT-seq/zoom/files/%s_chr%s_%s-%s.rds",opts$gene,opts$chr,opts$start,opts$end)
if (file.exists(filename)) {
data <- readRDS(filename)
} else {
data <- read_genomic_windows(io,opts)
saveRDS(data, file=filename)
}
metacc <- merge(data$met[,.(rate=mean(rate)),by="sample"],
data$dna[,.(rate=mean(rate)),by="sample"],
by="sample") %>% setnames(c("rate.x","rate.y"),c("met_rate","dna_rate"))
io$plot.outfile <- "/Users/ricard/NMT-seq/zoom/Cth/out/local_cor.pdf"
p <- ggplot(metacc, aes(x=met_rate,y=dna_rate)) +
geom_point(aes(color=sample, size=1.5)) +
scale_x_continuous(limits=c(0,100)) +
scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="black", alpha=0.5) +
ylab("Accessibility rate") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggsave(plot=p,height=6,width=6,dpi=200, filename=io$plot.outfile, useDingbats = FALSE )
suppressMessages(library(scater))
suppressMessages(library(data.table))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
suppressMessages(library(argparse))
source("/Users/ricard/NMT-seq/zoom/andreas/utils_region.R")
####################
## Define options ##
####################
## Options ##
opts <- list()
opts$gene <- "Cth"
opts$window <- 4000
opts$slide <- 500
opts$up <- 1000
opts$down <- 15000
## I/O ##
io <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$basedir <- "/Users/ricard/data/NMT-seq"
io$plot.outdir <- "/Users/ricard/NMT-seq/zoom/Cth/out"
io$genes.infile <- "/Users/ricard/data/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
} else {
io$basedir <- "/hps/nobackup/stegle/users/ricard/NMT-seq"
io$plot.outdir <- "/homes/ricard/NMT-seq/zoom/Cth/out"
io$genes.infile <- "/hps/nobackup/stegle/users/ricard/ensembl/mouse/BioMart/v87/mRNA/Mmusculus_genes_BioMart.87.txt"
}
if (!dir.exists(io$plot.outdir)) { dir.create(io$plot.outdir) }
io$in.sample_metadata <- paste(io$basedir,"sample_info.txt",sep="/")
# io$met_dir <- paste0(io$basedir,"/met/raw/allele_unspecific/unstranded/binarised")
io$met_dir <- paste0(io$basedir,"/met/raw/allele_unspecific")
io$dna_dir <- paste0(io$basedir,"/dna/raw/allele_unspecific")
io$rna_file <- paste0(io$basedir,"/rna/parsed/allele_unspecific/sceset.rds")
io$features_dir <- paste0(io$basedir,"/features/filt")
io$plot.outfile <- sprintf("%s/%s.pdf", io$plot.outdir, opts$gene)
## Options ##
opts$features <- c("CGI","prom_2000_0","exons","active_enhancers","Nanog","Oct4","p300")
opts$cells <- c("A02","A03","A04","A05","A06","A07","A08","A09","B01","B02","B03","B05","B06","B08","B09","C01","C03","C04","C05","C06","C07","C09","D01","D03","D05","D06","D07","D08","D09","E01","E02","E03","E04","E05","E06","E07","F02","F03","F04","F05","F06","F07","F08","F09","G01","G02","G03","G05","G06","G08","G09","H02","H03","H04","H05","H06","H07","H08","H09")
###############
## Load data ##
###############
## Load gene information
gene <- fread(sprintf(io$genes.infile))[,c(1,2,3,4,7)] %>%
.[,chr:=sub("chr","",chr)] %>%
.[symbol==opts$gene]
opts$chr <- gene$chr
opts$start <- gene$start-opts$up
opts$end <- gene$end+opts$down
# Methylation and Accessibility
filename <- sprintf("~/NMT-seq/zoom/files/%s_chr%s_%s-%s.rds",opts$gene,opts$chr,opts$start,opts$end)
if (file.exists(filename)) {
data <- readRDS(filename)
} else {
data <- read_genomic_windows(io,opts)
saveRDS(data, file=filename)
}
# data$met[,rate:=rate*100]
# Expression
rna <- exprs(readRDS(io$rna_file))[opts$gene,]
data$rna <- data.table(sample=names(rna), expr=rna)
# Genomic contexts
files <- paste(io$features_dir,paste0(opts$features,".bed"),sep="/")
anno_list <- files %>% map(~ fread(.x, sep="\t", verbose=F, stringsAsFactors=F)[,c(1,2,3,4,5,6)])
anno_df <- rbindlist(anno_list) %>% setnames(c("chr","start","end","strand","ens_id","anno")) %>%
.[,anno:=as.factor(anno)] %>% .[,chr:=as.factor(sub("chr","",chr))] %>% setkey("chr","start","end") %>%
foverlaps(data.table(chr=opts$chr,start=opts$start,end=opts$end) %>% setkey("chr","start","end"), nomatch=0) %>%
.[,c("chr","i.start","i.end","anno")] %>% setnames(c("i.start","i.end"),c("start","end"))
anno_df$start <- ifelse(anno_df$start<gene$start-opts$up, gene$start-opts$up, anno_df$start)
anno_df$end <- ifelse(anno_df$end>gene$end+opts$down, gene$end+opts$down, anno_df$end)
View(anno_df)
##########################################################
## Script to do scatter plots on specific local regions ##
##########################################################
# Load libraries
suppressMessages(library(scater))
suppressMessages(library(data.table))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
source("/Users/ricard/NMT-seq/zoom/andreas/utils_region.R")
####################
## Define options ##
####################
## I/O ##
io <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$basedir <- "/Users/ricard/data/NMT-seq"
} else {
io$basedir <- "/hps/nobackup/stegle/users/ricard/NMT-seq"
}
io$in.sample_metadata <- paste(io$basedir,"sample_info.txt",sep="/")
io$met_dir <- paste0(io$basedir,"/met/raw/allele_unspecific")
io$dna_dir <- paste0(io$basedir,"/dna/raw/allele_unspecific")
io$rna_file <- paste0(io$basedir,"/rna/parsed/allele_unspecific/sceset.rds")
## options ##
opts <- list()
opts$gene <- "Cth"
opts$chr <- "3"
opts$start <- 157924976
opts$end <- 157925184
# opts$M <- 50
opts$cells <- c("B01","C01","E01","G01","A02","E02","G02","H02","A03","B03","C03","D03","E03","F03","G03","H03","A04","C04","E04","F04","H04","A05","B05","C05","D05","E05","F05","G05","H05","A06","B06","C06","D06","E06","F06","G06","H06","A07","C07","D07","E07","F07","H07","A08","B08","D08","F08","G08","H08","A09","B09","C09","D09","F09","G09","H09")
################
## Load data  ##
################
# Methylation and Accessibility
filename <- sprintf("/Users/ricard/NMT-seq/zoom/files/%s_chr%s_%s-%s.rds",opts$gene,opts$chr,opts$start,opts$end)
if (file.exists(filename)) {
data <- readRDS(filename)
} else {
data <- read_genomic_windows(io,opts)
saveRDS(data, file=filename)
}
rna <- exprs(readRDS(io$rna_file)[opts$gene,opts$cells])
data$rna <- data.table(sample=colnames(rna), expr=rna[1,])
accrna <- merge(data$rna, data$dna[,.(rate=mean(rate)),by="sample"], by="sample") %>%
setnames(c("rate.x","rate.y"),c("met_rate","dna_rate"))
accrna <- merge(data$rna, data$dna[,.(rate=mean(rate)),by="sample"], by="sample")
View(accrna)
p <- ggplot(metacc, aes(x=rate,y=expr)) +
geom_point(aes(color=sample, size=1.5)) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="black", alpha=0.5) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
p <- ggplot(accrna, aes(x=rate,y=expr)) +
geom_point(aes(color=sample, size=1.5)) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="black", alpha=0.5) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
io$plot.outfile <- "/Users/ricard/NMT-seq/zoom/Cth/out/local_cor2.pdf"
p <- ggplot(accrna, aes(x=rate,y=expr)) +
geom_point(aes(color=sample, size=1.5)) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="black", alpha=0.5) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggsave(plot=p,height=6,width=6,dpi=200, filename=io$plot.outfile, useDingbats = FALSE )
library(MOFAtools)
file = "/Users/ricard/test.hdf5"
model <- loadModel(file)
expectations <- rhdf5::h5read(file,"expectations")
parameters <- rhdf5::h5read(file,"parameters")
training_stats <- rhdf5::h5read(file,"training_stats")
colnames(training_stats$elbo_terms) <- attr(rhdf5::h5read(file,"training_stats/elbo_terms", read.attributes=T),"colnames")
training_opts <- as.list(rhdf5::h5read(file,"training_opts", read.attributes=T))
parameters$Theta
parameters$Y
data <- rhdf5::h5read(file,"data")
featuredata <- rhdf5::h5read(file,"features")
sampledata <- rhdf5::h5read(file,"samples")
for (m in names(data)) {
rownames(data[[m]]) <- sampledata
colnames(data[[m]]) <- featuredata[[m]]
}
parameters$Y
file = "/Users/ricard/test.hdf5"
model <- loadModel(file)
model@Parameters$Y$mRNA
model@Parameters$Y$mut
model@Parameters$Y$viab
model@Parameters$Y$mut
model@Expectations$Y
model@Expectations$Theta
model@Expectations$Clusters
