io   <- list()
# io$base_dir   <- "/Users/ricard/data/NMT-seq"
# io$base_dir   <- "/Users/kapouranis/Documents/Andreas/Code/datasets/nmt-seq-data"
io$base_dir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$met_file   <- paste0(io$base_dir, "/met/parsed/met_data.tsv.gz")
io$acc_file   <- paste0(io$base_dir, "/acc/parsed/acc_data.tsv.gz")
# Filtering parameters
opts <- list()
opts$met.min.weight <- 3      # minimum weight per feature (met)
opts$acc.min.weight <- 3      # minimum weight per feature (acc)
opts$min.coverage   <- 0.4    # minimum coverage per feature across samples (met/acc)
opts$fraction.sites <- 0.5    # fraction of sites (met/acc) to keep based on variance
opts$min.n          <- 100    # minimum number of features per annotation
opts$min.s          <- 20     # minimum number of samples to do the correlation
opts$n_perms        <- 100    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
# Define which annotations to use and the order for plotting
opts$met_annos <- c("prom_500_500_cgi","prom_500_500_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
opts$acc_annos <- c("prom_100_100_cgi","prom_100_100_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
anno_names <- c("prom_100_100_cgi"="CGI promoters", "prom_100_100_noncgi"="non-CGI promoters", "prom_500_500_cgi"="CGI promoters", "prom_500_500_noncgi"="non-CGI promoters", "active_enhancers"="Active enhancers", "super_enhancers"="Super enhancers", "primed_enhancers"="Primed enhancers", "exons"="Exons", "introns"="Introns")
load("out/cor.RData")
pp = qq <- list()
for (n in unique(cor_samples$anno)) {
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
# Create volcano plot
pp[[n]] <- gg_volcano_plot(cor_samples[anno == n,], title = "")
# Crete qqplot
qq[[n]] <- gg_qqplot(cor_samples[anno == n, ], cor_samples_perm[anno == n]$p, title = "")
pdf(file=paste0("out/cor_", n, ".pdf"), width = 14, height = 8, useDingbats = FALSE)
grid.arrange(pp[[n]], qq[[n]], ncol=2, top = textGrob(n, gp=gpar(fontsize=29, fontface = "bold")), newpage = TRUE)
dev.off()
# print(plot_grid(pp[[n]], qq[[n]], labels = c("", ""), label_size = 20, ncol = 2, nrow = 1))
}
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
# Create a quantile-quantile plot
# https://gist.github.com/slowkow/9041570
# Assumptions:
#   - Expected P values are uniformly distributed.
#   - Confidence intervals assume independence between tests
#
# cor_res is a data.table
# perm_xs is a vector of permuted p-values
# ci is the size of the confidence interval
gg_qqplot = function(cor_res, perm_xs, ci=0.95, title = "Quantile-quantile plot of p-values"){
xs <- cor_res$p
cor_res <- cor_res[, expected := -log10(1:.N / .N)]
N  <- length(xs)
df <- data.frame(observed = -log10(sort(xs)),
permuted = -log10(sort(perm_xs)),
expected = -log10(1:N / N),
cupper   = -log10(qbeta(ci,     1:N, N - 1:N + 1)),
clower   = -log10(qbeta(1 - ci, 1:N, N - 1:N + 1)))
log10Pe = expression(paste("Expected -log"[10], "(", plain(p), ")" ))
log10Po = expression(paste("Observed -log"[10], "(", plain(p), ")" ))
ggplot(df) +
geom_point(aes(expected, permuted), shape=3, size=1.5, color = "cornflowerblue") +
geom_abline(intercept=0, slope=1, alpha=0.5, color = "darkgrey") +
geom_line(aes(expected, cupper), linetype=2, color = "darkgrey") +
geom_line(aes(expected, clower), linetype=2, color = "darkgrey") +
#geom_point(aes(expected, observed), size=2) +
geom_point(data=cor_res, aes(expected, -log10(sort(p)), color = sig), size=2) +
scale_color_manual(values=c("black","red")) +
xlab(log10Pe) + ylab(log10Po) + labs(title=title) + scatter_theme()
}
# Create a volcano plot with correlations on the x-axis
# and p-values on the y-axis
#
# cor_samples is a data.table with at least two columns:
#  r : correlations
#  p : p-values
gg_volcano_plot <- function(cor_samples, title = ""){
p <- ggplot(cor_samples, aes(x=r, y=-log10(p))) +
labs(title=title, x="Weighted Pearson correlation", y=expression(paste("-log"[10],"(",plain(p),")"))) +
#geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=8.1), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
scale_x_continuous(limits=c(-1,1)) +
scale_y_continuous(limits=c(0,8.5)) +
annotate("text", x=0, y=8.47, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-0.5, y=8.47, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=0.5, y=8.47, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# geom_text(data=cor_samples[sig == TRUE], aes(x=r, y=log_padj_fdr, label=gene), vjust=-0.0, hjust=-0.3) +
ggrepel::geom_text_repel(data=cor_samples[sig == TRUE], aes(x=r, y=-log10(p), label=gene), size=6) +
scatter_theme()
}
# Define ggplot2 theme for scatter plots
scatter_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,10,0), hjust=0.5),
axis.text=element_text(size=rel(1.75), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.title.x = element_text(margin=margin(10,0,0,0)),
legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
# Define ggplot2 boxplot theme for boxplots
boxplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5, margin=margin(0,0,20,0)),
axis.title.y = element_text(colour="black", size=20, vjust=1.5),
axis.title.x = element_text(colour="black", size=20, vjust=1.5, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.6)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="none",
legend.text=element_text(size=15),
legend.title=element_blank(),
legend.background=element_blank(),
panel.border = element_blank()
)
}
# Data
io   <- list()
io$base_dir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
# io$base_dir   <- "/Users/kapouranis/Documents/Andreas/Code/datasets/nmt-seq-data"
# io$base_dir   <- "/Users/ricard/data/NMT-seq"
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$rna_file   <- paste0(io$base_dir, "/rna/parsed/allele_unspecific/sceset.rds")
io$met_file   <- paste0(io$base_dir, "/met/parsed/met_data.tsv.gz")
# Filtering parameters
opts <- list()
opts$min.weight     <- 3      # Minimum weight per feature
opts$min.coverage   <- 0.4    # minimum coverage per feature across samples (met)
opts$min.cdr        <- 0.5    # minimum cellular detection rate per gene (expr)
opts$fraction.genes <- 0.5    # fraction of genes (expr) to keep based on variance
opts$fraction.sites <- 0.5    # fraction of sites (met) to keep based on variance
opts$min.n          <- 100    # minimum number of features per annotation
opts$min.s          <- 20     # minimum number of samples to do the correlation
opts$gene_window    <- 8e3    # window length for the overlap between genes and features
opts$n_perms        <- 100    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
# gene-associated contexts
opts$annos <- c("prom_500_500_cgi", "prom_500_500_noncgi","active_enhancers", "super_enhancers", "primed_enhancers", "CTCF", "p300","exons", "introns","Nanog","Oct4")
anno_names <- c("prom_500_500_cgi"="CGI promoters", "prom_500_500_noncgi"="non-CGI promoters", "prom_500_500$"="Promoters", "active_enhancers"="Active enhancers", "super_enhancers"="Super enhancers", "primed_enhancers"="Primed enhancers", "exons"="Exons", "introns"="Introns")
load("out/cor.RData")
pp = qq <- list()
for (n in unique(cor_samples$anno)) {
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
# Create volcano plot
pp[[n]] <- gg_volcano_plot(cor_samples[anno == n,], title = "")
# Crete qqplot
qq[[n]] <- gg_qqplot(cor_samples[anno == n, ], cor_samples_perm[anno == n]$p, title = "")
pdf(file=paste0("out/cor_", n, ".pdf"), width = 14, height = 8, useDingbats = FALSE)
grid.arrange(pp[[n]], qq[[n]], ncol=2, top = textGrob(n, gp=gpar(fontsize=29, fontface = "bold")), newpage = TRUE)
dev.off()
# print(plot_grid(pp[[n]], qq[[n]], labels = c("", ""), label_size = 20, ncol = 2, nrow = 1))
}
# save(cor_samples, cor_samples_perm, cor_genes, file = "out/cor.RData")
?vapply
suppressPackageStartupMessages(library(scater))
setwd("~/Documents/Code/nmt-seq/correlations/metacc")
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
# Create a quantile-quantile plot
# https://gist.github.com/slowkow/9041570
# Assumptions:
#   - Expected P values are uniformly distributed.
#   - Confidence intervals assume independence between tests
#
# cor_res is a data.table
# perm_xs is a vector of permuted p-values
# ci is the size of the confidence interval
gg_qqplot = function(cor_res, perm_xs, ci=0.95, title = "Quantile-quantile plot of p-values"){
xs <- cor_res$p
cor_res <- cor_res[, expected := -log10(1:.N / .N)]
N  <- length(xs)
df <- data.frame(observed = -log10(sort(xs)),
permuted = -log10(sort(perm_xs)),
expected = -log10(1:N / N),
cupper   = -log10(qbeta(ci,     1:N, N - 1:N + 1)),
clower   = -log10(qbeta(1 - ci, 1:N, N - 1:N + 1)))
log10Pe = expression(paste("Expected -log"[10], "(", plain(p), ")" ))
log10Po = expression(paste("Observed -log"[10], "(", plain(p), ")" ))
ggplot(df) +
geom_point(aes(expected, permuted), shape=3, size=1.5, color = "cornflowerblue") +
geom_abline(intercept=0, slope=1, alpha=0.5, color = "darkgrey") +
geom_line(aes(expected, cupper), linetype=2, color = "darkgrey") +
geom_line(aes(expected, clower), linetype=2, color = "darkgrey") +
#geom_point(aes(expected, observed), size=2) +
geom_point(data=cor_res, aes(expected, -log10(sort(p)), color = sig), size=2) +
scale_color_manual(values=c("black","red")) +
xlab(log10Pe) +
ylab(log10Po) +
labs(title=title) +
scatter_theme()
}
# Create a volcano plot with correlations on the x-axis
# and p-values on the y-axis
#
# cor_samples is a data.table with at least two columns:
#  r : correlations
#  p : p-values
gg_volcano_plot <- function(cor_samples, title = ""){
p <- ggplot(cor_samples, aes(x=r, y=-log10(p))) +
labs(title=title, x="Weighted Pearson correlation", y=expression(paste("-log"[10],"(",plain(p),")"))) +
#geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=7), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
scale_x_continuous(limits=c(-1,1)) +
scale_y_continuous(limits=c(0,7.5)) +
annotate("text", x=0, y=7.37, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-0.5, y=7.37, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=0.5, y=7.37, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# ggrepel::geom_text_repel(data=cor_samples[sig == TRUE], aes(x=r, y=-log10(p), label=gene), size=6) +
scatter_theme()
}
# Define ggplot2 theme for scatter plots
scatter_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,10,0), hjust=0.5),
axis.text=element_text(size=rel(1.75), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.title.x = element_text(margin=margin(10,0,0,0)),
legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
# Define ggplot2 boxplot theme for boxplots
boxplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5, margin=margin(0,0,20,0)),
axis.title.y = element_text(colour="black", size=28, vjust=1.5),
axis.title.x = element_text(colour="black", size=28, vjust=1.5, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.8)),
axis.text.y = element_text(colour="black",size=rel(1.8)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="none",
legend.text=element_text(size=15),
legend.title=element_blank(),
legend.background=element_blank(),
panel.border = element_blank()
)
}
# Data
io   <- list()
# io$base_dir   <- "/Users/ricard/data/NMT-seq"
# io$base_dir   <- "/Users/kapouranis/Documents/Andreas/Code/datasets/nmt-seq-data"
io$base_dir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$met_file   <- paste0(io$base_dir, "/met/parsed/met_data.tsv.gz")
io$acc_file   <- paste0(io$base_dir, "/acc/parsed/acc_data.tsv.gz")
# Filtering parameters
opts <- list()
opts$met.min.weight <- 3      # minimum weight per feature (met)
opts$acc.min.weight <- 3      # minimum weight per feature (acc)
opts$min.coverage   <- 0.4    # minimum coverage per feature across samples (met/acc)
opts$fraction.sites <- 0.5    # fraction of sites (met/acc) to keep based on variance
opts$min.n          <- 100    # minimum number of features per annotation
opts$min.s          <- 20     # minimum number of samples to do the correlation
opts$n_perms        <- 100    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
# Define which annotations to use and the order for plotting
opts$met_annos <- c("prom_500_500_cgi","prom_500_500_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
opts$acc_annos <- c("prom_100_100_cgi","prom_100_100_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
anno_names <- c("prom_100_100_cgi"="CGI promoters", "prom_100_100_noncgi"="non-CGI promoters", "prom_500_500_cgi"="CGI promoters", "prom_500_500_noncgi"="non-CGI promoters", "active_enhancers"="Active enhancers", "super_enhancers"="Super enhancers", "primed_enhancers"="Primed enhancers", "exons"="Exons", "introns"="Introns")
load("out/cor.RData")
pp = qq <- list()
for (n in unique(cor_samples$anno)) {
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
# Create volcano plot
pp[[n]] <- gg_volcano_plot(cor_samples[anno == n,], title = "")
# Crete qqplot
qq[[n]] <- gg_qqplot(cor_samples[anno == n, ], cor_samples_perm[anno == n]$p, title = "")
hist(cor_samples[anno == n]$p, freq = FALSE,
main = paste(n, "p-value distribution"), xlab = "p-value", col = "cornflowerblue", breaks = 30)
# pdf(file=paste0("out/cor_", n, ".pdf"), width = 14, height = 8, useDingbats = FALSE)
# grid.arrange(pp[[n]], qq[[n]], ncol=2, top = textGrob(n, gp=gpar(fontsize=29, fontface = "bold")), newpage = TRUE)
# dev.off()
#print(plot_grid(pp[[n]], qq[[n]], labels = c("", ""), label_size = 20, ncol = 2, nrow = 1))
}
load("out/cor.RData")
pp = qq <- list()
for (n in unique(cor_samples$anno)) {
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
# Create volcano plot
pp[[n]] <- gg_volcano_plot(cor_samples[anno == n,], title = "")
# Crete qqplot
qq[[n]] <- gg_qqplot(cor_samples[anno == n, ], cor_samples_perm[anno == n]$p, title = "")
hist(cor_samples[anno == n]$p, freq = FALSE,
main = paste(n, "p-value distribution"), xlab = "p-value", col = "cornflowerblue", breaks = 40)
# pdf(file=paste0("out/cor_", n, ".pdf"), width = 14, height = 8, useDingbats = FALSE)
# grid.arrange(pp[[n]], qq[[n]], ncol=2, top = textGrob(n, gp=gpar(fontsize=29, fontface = "bold")), newpage = TRUE)
# dev.off()
#print(plot_grid(pp[[n]], qq[[n]], labels = c("", ""), label_size = 20, ncol = 2, nrow = 1))
}
setwd("~/Documents/Code/nmt-seq/correlations")
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(htmlTable))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
# Data
io   <- list()
io$base_dir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
# io$base_dir   <- "/Users/ricard/data/NMT-seq"
# io$base_dir   <- "/Users/kapouranis/Documents/Andreas/Code/datasets/nmt-seq-data"
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$rna_file   <- paste0(io$base_dir, "/rna/parsed/allele_unspecific/sceset.rds")
io$acc_file   <- paste0(io$base_dir, "/acc/parsed/acc_data.tsv.gz")
io$met_file   <- paste0(io$base_dir, "/met/parsed/met_data.tsv.gz")
# Filtering parameters
opts <- list()
opts$min.weight     <- 3      # minimum weight per feature
opts$min.coverage   <- 0.4    # minimum coverage per feature across samples (acc)
opts$min.cdr        <- 0.5    # minimum cellular detection rate per gene (expr)
opts$fraction.genes <- 0.5    # fraction of genes (expr) to keep based on variance
opts$fraction.sites <- 0.5    # fraction of sites (acc) to keep based on variance
opts$min.n          <- 100    # minimum number of features per annotation
opts$min.s          <- 20     # minimum number of samples to do the correlation
opts$gene_window    <- 8e3    # window length for the overlap between genes and features
opts$n_perms        <- 100    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
# gene-associated contexts
opts$acc_annos <- c("prom_100_100","prom_100_100_cgi","prom_100_100_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
opts$met_annos <- c("prom_100_100","prom_500_500_cgi","prom_500_500_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
anno_names <- c("prom_100_100_cgi"="CGI promoters", "prom_100_100_noncgi"="non-CGI promoters", "prom_500_500_cgi"="CGI promoters", "prom_500_500_noncgi"="non-CGI promoters", "prom_100_100$"="Promoters", "active_enhancers"="Active enhancers", "super_enhancers"="Super enhancers", "primed_enhancers"="Primed enhancers", "exons"="Exons", "introns"="Introns")
load("summary.RData")
metrna_filt_sum
install.packages("xtable")
install.packages("xtable")
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(xtable))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
# Data
io   <- list()
io$base_dir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
# io$base_dir   <- "/Users/ricard/data/NMT-seq"
# io$base_dir   <- "/Users/kapouranis/Documents/Andreas/Code/datasets/nmt-seq-data"
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$rna_file   <- paste0(io$base_dir, "/rna/parsed/allele_unspecific/sceset.rds")
io$acc_file   <- paste0(io$base_dir, "/acc/parsed/acc_data.tsv.gz")
io$met_file   <- paste0(io$base_dir, "/met/parsed/met_data.tsv.gz")
# Filtering parameters
opts <- list()
opts$min.weight     <- 3      # minimum weight per feature
opts$min.coverage   <- 0.4    # minimum coverage per feature across samples (acc)
opts$min.cdr        <- 0.5    # minimum cellular detection rate per gene (expr)
opts$fraction.genes <- 0.5    # fraction of genes (expr) to keep based on variance
opts$fraction.sites <- 0.5    # fraction of sites (acc) to keep based on variance
opts$min.n          <- 100    # minimum number of features per annotation
opts$min.s          <- 20     # minimum number of samples to do the correlation
opts$gene_window    <- 8e3    # window length for the overlap between genes and features
opts$n_perms        <- 100    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
# gene-associated contexts
opts$acc_annos <- c("prom_100_100","prom_100_100_cgi","prom_100_100_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
opts$met_annos <- c("prom_100_100","prom_500_500_cgi","prom_500_500_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
anno_names <- c("prom_100_100_cgi"="CGI promoters", "prom_100_100_noncgi"="non-CGI promoters", "prom_500_500_cgi"="CGI promoters", "prom_500_500_noncgi"="non-CGI promoters", "prom_100_100$"="Promoters", "active_enhancers"="Active enhancers", "super_enhancers"="Super enhancers", "primed_enhancers"="Primed enhancers", "exons"="Exons", "introns"="Introns")
load("summary.RData")
accrna_cor_samples
accrna_cor_samples[,.(median = median(r)), by = c("anno")]
accrna_cor_samples[,.(median = mean(r)), by = c("anno")]
print(xtable(accrna_sum))
print(xtable(as.matrix(accrna_sum)))
as.matrix(accrna_sum)
accrna_filt_sum
load("summary.RData")
accrna_filt_sum <- accrna_cor_samples[,.(n = .N), by = c("anno")]
metrna_filt_sum <- metrna_cor_samples[,.(n = .N), by = c("anno")]
metacc_filt_sum <- metacc_cor_samples[,.(n = .N), by = c("anno")]
accrna_filt_sum
accrna_sum
accrna_cor_samples
accrna_sum
accrna_filt_sum <- accrna_cor_samples[,.(filtered = .N, median = median(r)), by = c("anno")]
metrna_filt_sum <- metrna_cor_samples[,.(filtered = .N, median = median(r)), by = c("anno")]
metacc_filt_sum <- metacc_cor_samples[,.(filtered = .N, median = median(r)), by = c("anno")]
metacc_filt_sum
metrna_filt_sum
accrna_filt_sum
accrna_filt_sum <- accrna_cor_samples[,.(filtered = .N, median = round(median(r), 2)), by = c("anno")]
accrna_filt_sum
merge(acrrna_sum, accrna_filt_sum, by = c("anno"))
accrna <- merge(accrna_sum, accrna_filt_sum, by = c("anno"))
accrna
load("summary.RData")
accrna_filt_sum <- accrna_cor_samples[,.(Filtered = .N, median = round(median(r), 3)), by = c("anno")]
metrna_filt_sum <- metrna_cor_samples[,.(Filtered = .N, median = round(median(r), 3)), by = c("anno")]
metacc_filt_sum <- metacc_cor_samples[,.(Filtered = .N, median = round(median(r), 3)), by = c("anno")]
accrna <- merge(accrna_sum %>% setnames(c("n"), c("Total")), accrna_filt_sum %>% setnames(c("median"), c("Median r")), by = c("anno"))
metrna <- merge(metrna_sum %>% setnames(c("n"), c("Total")), metrna_filt_sum %>% setnames(c("median"), c("Median r")), by = c("anno"))
metacc <- merge(metacc_sum %>% setnames(c("n"), c("Total")), metacc_filt_sum %>% setnames(c("median"), c("Median r")), by = c("anno"))
accrna
metrna
metacc
metacc_filt_sum
metacc
htmlTable(accrna)
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(htmlTable))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
load("summary.RData")
accrna_filt_sum <- accrna_cor_samples[,.(Filtered = .N, median = round(median(r), 3)), by = c("anno")]
metrna_filt_sum <- metrna_cor_samples[,.(Filtered = .N, median = round(median(r), 3)), by = c("anno")]
metacc_filt_sum <- metacc_cor_samples[,.(Filtered = .N, median = round(median(r), 3)), by = c("anno")]
accrna <- merge(accrna_sum %>% setnames(c("n"), c("Total")), accrna_filt_sum %>% setnames(c("median"), c("Median r")), by = c("anno")) %>%
setnames(c("anno"), c("Genomic context"))
metrna <- merge(metrna_sum %>% setnames(c("n"), c("Total")), metrna_filt_sum %>% setnames(c("median"), c("Median r")), by = c("anno")) %>%
setnames(c("anno"), c("Genomic context"))
metacc <- merge(metacc_sum %>% setnames(c("n"), c("Total")), metacc_filt_sum %>% setnames(c("median"), c("Median r")), by = c("anno")) %>%
setnames(c("anno"), c("Genomic context"))
htmlTable(accrna)
install.packages("pander")
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(htmlTable))
suppressPackageStartupMessages(library(pander))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(data.table))
load("summary.RData")
accrna_filt_sum <- accrna_cor_samples[,.(Filtered = .N, median = round(median(r), 3)), by = c("anno")]
metrna_filt_sum <- metrna_cor_samples[,.(Filtered = .N, median = round(median(r), 3)), by = c("anno")]
metacc_filt_sum <- metacc_cor_samples[,.(Filtered = .N, median = round(median(r), 3)), by = c("anno")]
accrna <- merge(accrna_sum %>% setnames(c("n"), c("Total")), accrna_filt_sum %>% setnames(c("median"), c("Median r")), by = c("anno")) %>%
setnames(c("anno"), c("Genomic context"))
metrna <- merge(metrna_sum %>% setnames(c("n"), c("Total")), metrna_filt_sum %>% setnames(c("median"), c("Median r")), by = c("anno")) %>%
setnames(c("anno"), c("Genomic context"))
metacc <- merge(metacc_sum %>% setnames(c("n"), c("Total")), metacc_filt_sum %>% setnames(c("median"), c("Median r")), by = c("anno")) %>%
setnames(c("anno"), c("Genomic context"))
load("summary.RData")
accrna_filt_sum <- accrna_cor_samples[,.(Filtered = .N, median = round(median(r), 3)), by = c("anno")]
metrna_filt_sum <- metrna_cor_samples[,.(Filtered = .N, median = round(median(r), 3)), by = c("anno")]
metacc_filt_sum <- metacc_cor_samples[,.(Filtered = .N, median = round(median(r), 3)), by = c("anno")]
accrna <- merge(accrna_sum %>% setnames(c("n"), c("Total")), accrna_filt_sum %>% setnames(c("median"), c("Median r")), by = c("anno")) %>%
setnames(c("anno"), c("Genomic context"))
metrna <- merge(metrna_sum %>% setnames(c("n"), c("Total")), metrna_filt_sum %>% setnames(c("median"), c("Median r")), by = c("anno")) %>%
setnames(c("anno"), c("Genomic context"))
metacc <- merge(metacc_sum %>% setnames(c("n"), c("Total")), metacc_filt_sum %>% setnames(c("median"), c("Median r")), by = c("anno")) %>%
setnames(c("anno"), c("Genomic context"))
pdf(file=paste0("accrna_sum.pdf"), width = 14, height = 8, useDingbats = FALSE)
print(pander(accrna))
dev.off()
pdf(file=paste0("accrna_sum.pdf"), width = 14, height = 8, useDingbats = FALSE)
pander(accrna)
dev.off()
?pander
