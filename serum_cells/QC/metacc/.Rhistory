report2 <- fread(io$in.report2, header=T) %>%
setnames(c("output","name"),c("sample","metric")) %>%
.[,sample:=sub("cpg/","",sample)] %>%
.[metric%in%opts$metrics]
reprot2
report2
report1 <- fread(io$in.report1, header=T) %>%
setnames("output","sample") %>%
.[,sample:=sub("cpg/","",sample)] %>%
.[metric%in%opts$metrics] %>%
.[,metric:=stringr::str_replace_all(metric,c("acc"="Accuracy","mcc"="Matthews correlation coefficient","auc"="AUC","tnr"="True Negative Rate","tpr"="True Positive Rate"))] %>%
setkey(metric)
View(report1)
report1 <- fread(io$in.report1, header=T)
View(report1)
report1 <- fread(io$in.report1, header=T) %>%
setnames("output","sample") %>%
.[,sample:=sub("cpg/","",sample)] %>%
.[metric%in%opts$metrics]
report1 <- fread(io$in.report1, header=T) %>%
setnames("output","sample")
report1 <- fread(io$in.report1, header=T) %>%
setnames("output","sample") %>%
.[,sample:=sub("cpg/","",sample)]
opts$metrics
asd <- report2[,sum:=(1-x)+y]
report2[,sum:=(1-x)+y]
report2
report2[sample=="E06"] %>% View
report2[sample=="E06"] %>% View
report2[sample=="E06"] %>% setorder(sum) %>% View
report2 <- fread(io$in.report2, header=T) %>%
setnames(c("output","name","x","y"),c("sample","metric","FPR","TPR")) %>%
.[,sample:=sub("cpg/","",sample)] %>%
.[metric%in%opts$metrics]
report2[,c("TNR","sum")=.(1-FPR,TNR+FPR)]
report2[,c("TNR","sum"):=list(1-FPR,TNR+FPR)]
report2[,TNR:=1-FPR][,sum:=TNR+FPR]
report2[sample=="E06"] %>% setorder(sum) %>% View
report2[,TNR:=1-FPR][,sum:=TNR+TPR]
report2[sample=="E06"] %>% setorder(sum) %>% View
library(data.table)
library(ggplot2)
library(purrr)
io <- list()
opts <- list()
io$in.dir <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/imputed/joint_module/unfilt"
io$in.sample_metadata <- "/Users/ricard/data/NMT-seq/sample_info.txt"
io$in.report1 <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/imputed/joint_module/eval/report_global.csv"
io$in.report2 <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/imputed/joint_module/eval/curve_global.csv"
opts$min.threshold_range <- rev(seq(0,0.50,0.05))
opts$max.threshold_range <- 1-opts$min.threshold_range
opts$samples <- "all"
# opts$min.threshold <- 0.3
# opts$max.threshold <- 0.7
if (opts$samples == "all")
opts$samples <- fread(io$in.sample_metadata, header=T, sep=" ") %>% .[passQC_met==T,sample]
tmp_list <- list()
for (sample in head(opts$samples)) {
file <- sprintf("%s/%s.h5",io$in.dir,sample)
data <- data.table(chr=h5read(file,"chromo"), pos=h5read(file,"pos"), value=h5read(file,"value"))
tmp <- data.table(
sample=sample,
min_threshold=opts$min.threshold_range,
max_threshold=opts$max.threshold_range,
cov=map2_dbl(opts$min.threshold_range,opts$max.threshold_range, function(x,y) (nrow(data[value<=x | value>=y]))/nrow(data)),
mean=map2_dbl(opts$min.threshold_range,opts$max.threshold_range, function(x,y) mean(data[value<=x | value>=y,value])),
nmet=map2_int(opts$min.threshold_range,opts$max.threshold_range, function(x,y) sum(round(data[value<=x | value>=y,value])==1)),
nunmet=map2_int(opts$min.threshold_range,opts$max.threshold_range, function(x,y) sum(round(data[value<=x | value>=y,value])==0)))
tmp_list[[sample]] <- tmp
}
tmp <- rbindlist(tmp_list)
View(tmp)
library(data.table)
library(purrr)
library(tidyr)
library(ggplot2)
library(cowplot)
# source("/Users/ricard/NMT-seq/Rutils/stats_utils.R")
barplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5),
# axis.title.x = element_text(colour="black", size=25, vjust=1.5),
axis.title.x = element_blank(),
axis.title.y = element_text(colour="black", size=20),
# axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(1.0)),
axis.ticks.y = element_line(colour="black", size=rel(1.0)),
legend.position="none",
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
io <- list()
io$in.metdir <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/filtered/unstranded/binarised"
io$in.accdir <- "/Users/ricard/data/NMT-seq/acc/raw/allele_unspecific/filtered/unstranded/binarised"
opts <- list()
opts$samples <- fread("/Users/ricard/data/NMT-seq/sample_info_all.txt", header=T, showProgress=F) %>% .[type=="NMT",sample]
opts$mapping_threshold <- 0.10
opts$met_coverage_threshold <- 5e5
opts$acc_coverage_threshold <- 5e6
opopts$samples
opts$samples
bismark = fread("/Users/ricard/data/NMT-seq/bismark_report.txt") %>%
.[, File := map(File, strsplit, split = "_") %>% flatten() %>% map_chr(3)] %>%
.[, lapply(.SD, mean), by=File] %>%
.[, mapping := `Aligned Reads` / `Total Reads`] %>%
setnames("File","sample") %>% .[sample %in% opts$samples]
efficiency <- data.table(sample=opts$samples) %>% merge(bismark,by="sample", all.x=TRUE) %>%
.[,mapping:=ifelse(is.na(mapping),0,mapping)]
foo <- efficiency[,c("sample","mapping")] %>% setkey(mapping) %>% .[,col:=mapping] %>% .[,sample:=factor(sample,levels=sample)]
cellcolor <- c("black","red")[as.numeric(foo$mapping<opts$mapping_threshold)+1]
p1 <- ggplot(foo, aes(x=sample, y=mapping, fill=col)) +
geom_bar(stat='identity', position="dodge") +
geom_hline(yintercept=opts$mapping_threshold, colour="blue", linetype="dashed") +
scale_fill_gradient(low="red", high="green") +
labs(y="Mapping efficiency") +
barplot_theme() +
theme(
axis.text.x = element_text(colour="black", color=cellcolor, angle=90, size=10, vjust=0.5, hjust=1.0)
)
print(p1)
View(foo)
cellcolor
foo
foo$sample
cellcolor
stats=data.table(sample=opts$samples, CGs=0, CG.binary=0, CG.mean=0, GCs=0, GC.binary=0, GC.mean=0) %>% setkey(sample)
for (sample in opts$samples) {
# Methylation
filename <- sprintf("%s/%s.tsv.gz",io$in.metdir,sample)
if (file.exists(filename)) {
tmp <- fread(sprintf("zcat < %s",filename), sep="\t", header="auto", verbose=F, showProgress=F) %>% setnames(c("chr","pos","rate"))
stats[sample, CGs := nrow(tmp)]
stats[sample, CG.binary := mean(tmp$rate==100 | tmp$rate==0)*100]
stats[sample, CG.mean := mean(tmp$rate)]
}
# Accessibility
filename <- sprintf("%s/%s.tsv.gz",io$in.accdir,sample)
if (file.exists(filename)) {
tmp <- fread(sprintf("zcat < %s",filename), sep="\t", header="auto", verbose=F, showProgress=F) %>% setnames(c("chr","pos","rate"))
stats[sample, GCs := nrow(tmp)]
stats[sample, GC.binary := mean(tmp$rate==100 | tmp$rate==0)*100]
stats[sample, GC.mean := mean(tmp$rate)]
}
}
# stats <- stats[CGs>0 & GCs>0]
cellcolor <- c("black","red")[as.numeric(stats$CGs < opts$met_coverage_threshold | stats$GCs < opts$acc_coverage_threshold)+1]
foo <- stats[,c("sample","CGs","GCs")] %>% melt(id.vars="sample",measure.vars=c("CGs","GCs"), variable.name="context")
p2 <- ggplot(foo, aes(x=sample, y=value, fill=context)) +
geom_bar(stat="identity", position="dodge") +
labs(title="", x="", y="Number of observed sites") +
geom_hline(yintercept=opts$met_coverage_threshold, colour="red", linetype="dashed") +
geom_hline(yintercept=opts$acc_coverage_threshold, colour="blue", linetype="dashed") +
scale_fill_discrete(labels=c("CG methylation","GC accessibility")) +
barplot_theme() +
theme(
axis.text.x = element_text(colour="black", color=cellcolor, angle=90, size=10, vjust=0.5, hjust=1.0)
)
print(p2)
# pdf(file="out/coverage.pdf", width=10, height=5)
# print(p)
# dev.off()
library(data.table)
library(purrr)
library(ggplot2)
io <- list()
opts <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$in.metadata <- "/Users/ricard/data/NMT-seq/sample_info.txt"
io$in.acc_data <- "/Users/ricard/data/NMT-seq/acc/raw/allele_unspecific/filtered/unstranded/binarised/"
io$in.met_data <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/filtered/unstranded/binarised/"
io$stats <- "/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/sample_stats.txt"
} else {
stop()
# io$basedir <- "/hps/nobackup/stegle/users/ricard/NMT-seq"
# io$in.metadata <- paste0(io$basedir,"/sample_info.txt")
# io$in.acc_data <- paste0(io$basedir,"/acc/raw/allele_unspecific/")
# io$in.met_data <- paste0(io$basedir,"/acc/raw/allele_unspecific/")
# io$stats <- "/homes/ricard/NOME-seq/stats/samples/sample_stats.txt"
}
# Define which cells to use
opts$cells <- "all"
if (opts$cells == "all")
opts$cells <- fread(io$in.metadata) %>% .[pass_accQC==T & pass_metQC==T,sample]
# opts$cells <- head(opts$cells,n=10)
opts$cells
library(data.table)
library(purrr)
library(ggplot2)
io <- list()
opts <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$in.metadata <- "/Users/ricard/data/NMT-seq/sample_info_all.txt"
io$in.acc_data <- "/Users/ricard/data/NMT-seq/acc/raw/allele_unspecific/filtered/unstranded/binarised/"
io$in.met_data <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/filtered/unstranded/binarised/"
io$stats <- "/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/sample_stats.txt"
} else {
stop()
# io$basedir <- "/hps/nobackup/stegle/users/ricard/NMT-seq"
# io$in.metadata <- paste0(io$basedir,"/sample_info.txt")
# io$in.acc_data <- paste0(io$basedir,"/acc/raw/allele_unspecific/")
# io$in.met_data <- paste0(io$basedir,"/acc/raw/allele_unspecific/")
# io$stats <- "/homes/ricard/NOME-seq/stats/samples/sample_stats.txt"
}
# Define which cells to use
opts$cells <- "all"
if (opts$cells == "all")
opts$cells <- fread(io$in.metadata) %>% .[pass_accQC==T & pass_metQC==T,sample]
# opts$cells <- head(opts$cells,n=10)
opts$cells
metadata <- fread(io$in.metadata)
View(metadata)
head(metadata)
library(data.table)
library(purrr)
library(ggplot2)
io <- list()
opts <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$in.metadata <- "/Users/ricard/data/NMT-seq/sample_info_all.txt"
io$in.acc_data <- "/Users/ricard/data/NMT-seq/acc/raw/allele_unspecific/filtered/unstranded/binarised/"
io$in.met_data <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/filtered/unstranded/binarised/"
io$stats <- "/Users/ricard/NMT-seq/rebuttal/2i_vs_serum/sample_stats.txt"
} else {
stop()
# io$basedir <- "/hps/nobackup/stegle/users/ricard/NMT-seq"
# io$in.metadata <- paste0(io$basedir,"/sample_info.txt")
# io$in.acc_data <- paste0(io$basedir,"/acc/raw/allele_unspecific/")
# io$in.met_data <- paste0(io$basedir,"/acc/raw/allele_unspecific/")
# io$stats <- "/homes/ricard/NOME-seq/stats/samples/sample_stats.txt"
}
# Load metadata
metadata <- fread(io$in.metadata)[,c("sample","culture","type","pass_metQC","pass_accQC")]
# Define which cells to use
opts$cells <- "all"
if (opts$cells == "all")
opts$cells <- metadata %>% .[pass_accQC==T & pass_metQC==T,sample]
# opts$cells <- head(opts$cells,n=10)
opts$cells <- "all"
if (opts$cells == "all") {
opts$cells <- metadata %>% .[pass_accQC==T & pass_metQC==T,sample]
}
metadata <- metadata[opts$cells]
metadata <- metadata[sample%in%opts$cells]
View(metadata)
metadata <- metadata[sample%in%opts$cells] %>% .[,c("pass_accQC","pass_metQC"):=NULL]
View(metadata)
stats <- rbind(data.table(sample=opts$cells, context="CG", coverage=0, rate=0), data.table(sample=opts$cells, context="GC", coverage=0, rate=0))
for (cell in opts$cells) {
# Met
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.met_data,cell))) {
print(sprintf("Loading %s methylation...",cell))
tmp <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.met_data,cell), sep="\t", verbose=F, showProgress=F) %>% setnames(c("chr","pos","rate"))
stats[sample==cell & context=="CG",coverage:=nrow(tmp)]
stats[sample==cell & context=="CG",mean:=mean(tmp$rate)]
} else {
print(sprintf("Sample %s not found for methylation",cell))
}
# Acc
if (file.exists(sprintf("%s/%s.tsv.gz",io$in.acc_data,cell))) {
print(sprintf("Loading %s accessibility...",cell))
tmp <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.acc_data,cell), sep="\t", verbose=F, showProgress=F) %>% setnames(c("chr","pos","rate"))
stats[sample==cell & context=="GC",coverage:=nrow(tmp)]
stats[sample==cell & context=="GC",mean:=mean(tmp$rate)]
} else {
print(sprintf("Sample %s not found for accessibility",cell))
}
}
# stats <- merge(stats,metadata,by="sample")
# fwrite(stats,file=io$stats, sep="\t", row.names=F, col.names=T)
foo <- stats[,c("sample","rate","context")]
p <- ggplot(foo, aes(x=sample, y=rate, fill=context)) +
geom_bar(stat='identity', position="dodge") +
scale_y_continuous(expand=c(0,0)) +
scale_fill_discrete(labels=c("CG methylation","GC accessibility")) +
ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=9, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
# pdf("/Users/ricard/NMT-seq/stats/samples/out/means.pdf", height=5, width=7)
# print(p)
# dev.off()
View(stats)
asd <- merge(stats,metadata,by="sample")
stats <- merge(stats,metadata,by="sample")
foo <- stats[,c("sample","mean","context")]
p <- ggplot(foo, aes(x=sample, y=mean, fill=context)) +
geom_bar(stat='identity', position="dodge") +
scale_y_continuous(expand=c(0,0)) +
scale_fill_discrete(labels=c("CG methylation","GC accessibility")) +
ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=9, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=9, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p <- ggplot(foo, aes(x=culture, y=mean, fill=context)) +
geom_boxplot() +
# scale_y_continuous(expand=c(0,0)) +
# scale_fill_discrete(labels=c("CG methylation","GC accessibility")) +
# ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=9, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
foo
foo <- stats[,c("sample","culture","mean","context")]
foo
p <- ggplot(foo, aes(x=culture, y=mean, fill=context)) +
geom_boxplot() +
# scale_y_continuous(expand=c(0,0)) +
# scale_fill_discrete(labels=c("CG methylation","GC accessibility")) +
# ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=9, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
p <- ggplot(foo, aes(x=culture, y=mean, fill=context)) +
geom_boxplot() +
geom_jitter() +
# scale_y_continuous(expand=c(0,0)) +
# scale_fill_discrete(labels=c("CG methylation","GC accessibility")) +
# ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=9, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
p <- ggplot(foo, aes(x=culture, y=mean, fill=context)) +
geom_boxplot(alpha=0.7) +
geom_jitter(aes(color=context), size=0.5) +
# scale_y_continuous(expand=c(0,0)) +
# scale_fill_discrete(labels=c("CG methylation","GC accessibility")) +
# ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=9, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
p <- ggplot(foo, aes(x=culture, y=mean, fill=context)) +
geom_boxplot(alpha=0.7) +
geom_point(aes(color=context), size=0.5) +
# scale_y_continuous(expand=c(0,0)) +
# scale_fill_discrete(labels=c("CG methylation","GC accessibility")) +
# ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=9, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
p <- ggplot(foo, aes(x=culture, y=mean, fill=context)) +
geom_boxplot(alpha=0.7) +
# scale_y_continuous(expand=c(0,0)) +
# scale_fill_discrete(labels=c("CG methylation","GC accessibility")) +
# ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=9, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
p <- ggplot(foo, aes(x=culture, y=mean, fill=context)) +
geom_boxplot(alpha=1.0) +
# scale_y_continuous(expand=c(0,0)) +
# scale_fill_discrete(labels=c("CG methylation","GC accessibility")) +
# ylab("Genome-wide mean rate") +
theme(
axis.title.y = element_text(colour="black", size=17, margin=margin(0,20,0,0)),
axis.title.x = element_blank(),
axis.text.x = element_text(colour="black", angle=90, size=9, vjust=0.5, hjust=1.0),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.ticks = element_line(colour="black"),
axis.line = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.direction = "horizontal",
legend.key.width=unit(1.2,"line"),
legend.key.height=unit(1.0,"line"),
legend.text = element_text(size=15),
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
p
