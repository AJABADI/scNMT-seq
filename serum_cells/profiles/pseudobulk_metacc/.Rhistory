line_theme()
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
print(p)
p
# Define ggplot2 theme for line plots
line_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,15,0), hjust=0.5),
axis.text=element_text(size=rel(1.35), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,15,0,0)),
axis.title.x = element_text(margin=margin(15,0,0,0)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
legend.position="right",
legend.title=element_blank(),
legend.text=element_text(size=15),
#panel.border=element_blank(),
panel.grid.major = element_line(),
panel.grid.minor = element_line()
#panel.background = element_blank()
)
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
print(p)
# Define ggplot2 theme for line plots
line_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,15,0), hjust=0.5),
axis.text=element_text(size=rel(1.35), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,15,0,0)),
axis.title.x = element_text(margin=margin(15,0,0,0)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
legend.position="right",
legend.title=element_blank(),
legend.text=element_text(size=15),
#panel.border=element_blank(),
#panel.grid.major = element_line(),
#panel.grid.minor = element_line()
panel.background = element_line()
)
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
# Define ggplot2 theme for line plots
line_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,15,0), hjust=0.5),
axis.text=element_text(size=rel(1.35), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,15,0,0)),
axis.title.x = element_text(margin=margin(15,0,0,0)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
legend.position="right",
legend.title=element_blank(),
legend.text=element_text(size=15),
#panel.border=element_blank(),
#panel.grid.major = element_line(),
#panel.grid.minor = element_line()
panel.background = element_blank()
)
}
# Define ggplot2 theme for line plots
line_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,15,0), hjust=0.5),
axis.text=element_text(size=rel(1.35), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,15,0,0)),
axis.title.x = element_text(margin=margin(15,0,0,0)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
legend.position="right",
legend.title=element_blank(),
legend.text=element_text(size=15)
#panel.border=element_blank(),
#panel.grid.major = element_line(),
#panel.grid.minor = element_line()
#panel.background = element_blank()
)
}
# Create AUC line plot
roc_line_plot <- function(dt, title = "", x_lab = "False positive rate", y_lab = "True positive rate"){
p <- ggplot(dt, aes(x = fpr, y = tpr, group=method)) +
geom_line(aes(color=method), size=2) +
scale_color_manual(values=c("red3", "cornflowerblue", "chocolate2", "green4")) +
#scale_color_brewer(palette="Dark2") +
labs(title=title, x=x_lab, y=y_lab) +
line_theme() + theme_bw()
}
# Create AUC line plot
auc_line_plot <- function(dt, title = "", x_lab = "", y_lab = ""){
p <- ggplot(dt, aes(x = cpg_prcg, y = auc, group=method)) +
geom_line(aes(color=method), size=2) +
scale_color_manual(values=c("red3", "cornflowerblue", "chocolate2", "green4")) +
#scale_color_brewer(palette="Dark2") +
labs(x=x_lab, y=y_lab) +
line_theme() + theme_bw()
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
print(p)
# Define ggplot2 theme for line plots
line_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,15,0), hjust=0.5),
axis.text=element_text(size=rel(1.35), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,15,0,0)),
axis.title.x = element_text(margin=margin(15,0,0,0)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
legend.position="right",
legend.title=element_blank(),
legend.text=element_text(size=15),
panel.border=element_blank()
#panel.grid.major = element_line(),
#panel.grid.minor = element_line()
#panel.background = element_blank()
)
}
# Create AUC line plot
roc_line_plot <- function(dt, title = "", x_lab = "False positive rate", y_lab = "True positive rate"){
p <- ggplot(dt, aes(x = fpr, y = tpr, group=method)) +
geom_line(aes(color=method), size=2) +
scale_color_manual(values=c("red3", "cornflowerblue", "chocolate2", "green4")) +
#scale_color_brewer(palette="Dark2") +
labs(title=title, x=x_lab, y=y_lab) +
line_theme() + theme_bw()
}
# Create AUC line plot
auc_line_plot <- function(dt, title = "", x_lab = "", y_lab = ""){
p <- ggplot(dt, aes(x = cpg_prcg, y = auc, group=method)) +
geom_line(aes(color=method), size=2) +
scale_color_manual(values=c("red3", "cornflowerblue", "chocolate2", "green4")) +
#scale_color_brewer(palette="Dark2") +
labs(x=x_lab, y=y_lab) +
line_theme() + theme_bw()
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
print(p)
auc_line_plot <- function(dt, title = "", x_lab = "", y_lab = ""){
p <- ggplot(dt, aes(x = cpg_prcg, y = auc, group=method)) +
geom_line(aes(color=method), size=2) +
scale_color_manual(values=c("red3", "cornflowerblue", "chocolate2", "green4")) +
#scale_color_brewer(palette="Dark2") +
labs(x=x_lab, y=y_lab) + theme_bw() +
line_theme()
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
print(p)
# Create AUC line plot
auc_line_plot <- function(dt, title = "", x_lab = "", y_lab = ""){
p <- ggplot(dt, aes(x = cpg_prcg, y = auc, group=method)) +
geom_line(aes(color=method), size=2) +
scale_color_manual(values=c("red3", "cornflowerblue", "chocolate2", "green4")) +
#scale_color_brewer(palette="Dark2") +
labs(x=x_lab, y=y_lab) + theme_light() +
line_theme()
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
print(p)
# Define ggplot2 theme for line plots
line_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,15,0), hjust=0.5),
axis.text=element_text(size=rel(1.35), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,15,0,0)),
axis.title.x = element_text(margin=margin(15,0,0,0)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
legend.position="right",
legend.title=element_blank(),
legend.text=element_text(size=15)
#panel.border=element_blank()
#panel.grid.major = element_line(),
#panel.grid.minor = element_line()
#panel.background = element_blank()
)
}
auc_line_plot <- function(dt, title = "", x_lab = "", y_lab = ""){
p <- ggplot(dt, aes(x = cpg_prcg, y = auc, group=method)) +
geom_line(aes(color=method), size=2) +
scale_color_manual(values=c("red3", "cornflowerblue", "chocolate2", "green4")) +
#scale_color_brewer(palette="Dark2") +
labs(x=x_lab, y=y_lab) + theme_light() +
line_theme()
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
print(p)
# Create AUC line plot
auc_line_plot <- function(dt, title = "", x_lab = "", y_lab = ""){
p <- ggplot(dt, aes(x = cpg_prcg, y = auc, group=method)) +
geom_line(aes(color=method), size=2) +
scale_color_manual(values=c("red3", "cornflowerblue", "chocolate2", "green4")) +
#scale_color_brewer(palette="Dark2") +
labs(x=x_lab, y=y_lab) + #theme_light() +
line_theme()
}
# Define ggplot2 theme for line plots
line_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,15,0), hjust=0.5),
axis.text=element_text(size=rel(1.35), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,15,0,0)),
axis.title.x = element_text(margin=margin(15,0,0,0)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
legend.position="right",
legend.title=element_blank(),
legend.text=element_text(size=15),
panel.border=element_blank(),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_line(colour = "grey"),
panel.background = element_blank()
)
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
print(p)
# Define ggplot2 theme for scatter plots
scatter_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,10,0), hjust=0.5),
axis.text=element_text(size=rel(1.75), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.title.x = element_text(margin=margin(10,0,0,0)),
legend.position="none",
panel.border=element_blank(),
panel.grid = element_blank(),
#panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
print(p)
# Define ggplot2 theme for line plots
line_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,15,0), hjust=0.5),
axis.text=element_text(size=rel(1.35), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,15,0,0)),
axis.title.x = element_text(margin=margin(15,0,0,0)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
legend.position="right",
legend.title=element_blank(),
legend.text=element_text(size=15),
panel.border=element_blank(),
panel.grid = element_line(colour = "grey"),
#panel.grid.minor = element_line(colour = "grey"),
panel.background = element_blank()
)
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
print(p)
# Define ggplot2 theme for line plots
line_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,15,0), hjust=0.5),
axis.text=element_text(size=rel(1.35), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,15,0,0)),
axis.title.x = element_text(margin=margin(15,0,0,0)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
legend.position="right",
legend.title=element_blank(),
legend.text=element_text(size=15),
panel.border=element_blank(),
panel.grid.major = element_line(colour = "grey"),
#panel.grid.minor = element_line(colour = "grey"),
panel.background = element_blank()
)
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
print(p)
p
# Define ggplot2 theme for line plots
line_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,15,0), hjust=0.5),
axis.text=element_text(size=rel(1.35), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,15,0,0)),
axis.title.x = element_text(margin=margin(15,0,0,0)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
legend.position="right",
legend.title=element_blank(),
legend.text=element_text(size=15),
panel.border=element_blank(),
panel.grid.major = element_line(colour = "gainsboro"),
#panel.grid.minor = element_line(colour = "grey"),
panel.background = element_blank()
)
}
# Create data.table in the required format
dt1 <- data.table(joint_prof = joint_prof_auc, joint_mean = joint_mean_auc, sep_prof = sep_prof_auc, sep_mean = sep_mean_auc) %>% setnames(c("joint_prof", "joint_mean", "sep_prof", "sep_mean"), c("Joint Profile", "Joint Mean", "Sep Profile", "Sep Mean")) %>% melt(variable.name = "method", value.name = "auc") %>% .[, cpg_prcg := input$cpg_prcg]
# Make AUC plot
p <- auc_line_plot(dt1, x_lab = "CpG coverage", y_lab = "AUC")
print(p)
p
install.packages("scales")
detach("ggplot2")
detach(ggplot2)
detach("package:ggplot2", unload = TRUE)
detach("package:cowplot", unload = TRUE)
detach("package:ggplot", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:grid", unload = TRUE)
detach("package:gridExtra", unload = TRUE)
detach("package:grid", unload = TRUE)
install.packages("scales")
install.packages("scales")
install.packages("scales")
source('~/Documents/Code/Examples/Regression/main_bayes_poly.R')
pred
setwd("~/Documents/Code/nmt-seq/profiles/metdna")
library(data.table)
library(purrr)
library(ggplot2)
loadMultipleMetData <- function(files, context) {
data <- files %>% map(~ fread(sprintf("zcat < %s",.x), sep="\t", verbose=F, stringsAsFactors=F, showProgress=F))
names(data) <- opts$cells
list(data,names(data)) %>% pwalk(~.x[,sample:=.y])
data <- rbindlist(data)
colnames(data) <- c("chr","pos","rate","sample")
return(data)
}
io$base_dir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
io <- list()
io$base_dir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
io$in.sample_metadata <- paste0(io$basedir,"/sample_info.txt")
io$in.sample_metadata <- paste0(io$basedir,"/sample_info.txt")
io$features.indir <- paste(io$basedir,"features/filt",sep="/")
io$met.indir <- paste(io$basedir,"met/raw/allele_unspecific/",sep="/")
io$acc.indir <- paste(io$basedir,"acc/raw/allele_unspecific/",sep="/")
opts <- list()
opts$window_size <- 1500 # in bp
opts$tile <- 25          # window size to calculate methylation rates
# Define which cells to use (ideally they should have similar mean methylation rate)
opts$cells <- c("A07","A08","A09","B02","C03","C04","C09","D07","D08","E03","F05","F08","G01","G03","G06","H02","H03","H05")
# opts$cells <- c("A07","A08","A09")
# Define which annotations to use and where to center the windows
opts$annotations <- c(
# "prom_1000_1000"="center",
"prom_1000_1000_cgi"="center",
"prom_1000_1000_noncgi"="center",
# "prom_1000_1000_active"="center",
# "prom_1000_1000_inactive"="center",
# "prom_1000_1000_poised"="center",
"active_enhancers"="center",
"super_enhancers"="center",
"primed_enhancers"="center",
"CTCF"="center",
"p300"="center",
"Nanog"="center",
"Oct4"="center",
"DHS"="center"
)
cat(sprintf("- Cells: %s\n",paste(opts$cells,collapse=" ")))
cat(sprintf("- Window size: %d\n",opts$window_size))
cat(sprintf("- Tile: %d\n",opts$tile))
met <- loadMultipleMetData(paste0(io$met.indir,opts$cells,".tsv.gz"), context="CG") %>% .[,c("start","end","context") := list(pos,pos,"CG")] %>% setnames("pos","bp")
io$met.indir
io$basedir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
io$in.sample_metadata <- paste0(io$basedir,"/sample_info.txt")
io$features.indir <- paste(io$basedir,"features/filt",sep="/")
io$met.indir <- paste(io$basedir,"met/raw/allele_unspecific/",sep="/")
io$acc.indir <- paste(io$basedir,"acc/raw/allele_unspecific/",sep="/")
opts <- list()
opts$window_size <- 1500 # in bp
opts$tile <- 25          # window size to calculate methylation rates
# Define which cells to use (ideally they should have similar mean methylation rate)
opts$cells <- c("A07","A08","A09","B02","C03","C04","C09","D07","D08","E03","F05","F08","G01","G03","G06","H02","H03","H05")
# opts$cells <- c("A07","A08","A09")
# Define which annotations to use and where to center the windows
opts$annotations <- c(
# "prom_1000_1000"="center",
"prom_1000_1000_cgi"="center",
"prom_1000_1000_noncgi"="center",
# "prom_1000_1000_active"="center",
# "prom_1000_1000_inactive"="center",
# "prom_1000_1000_poised"="center",
"active_enhancers"="center",
"super_enhancers"="center",
"primed_enhancers"="center",
"CTCF"="center",
"p300"="center",
"Nanog"="center",
"Oct4"="center",
"DHS"="center"
)
cat(sprintf("- Cells: %s\n",paste(opts$cells,collapse=" ")))
cat(sprintf("- Window size: %d\n",opts$window_size))
cat(sprintf("- Tile: %d\n",opts$tile))
met <- loadMultipleMetData(paste0(io$met.indir,opts$cells,".tsv.gz"), context="CG") %>% .[,c("start","end","context") := list(pos,pos,"CG")] %>% setnames("pos","bp")
acc <- loadMultipleMetData(paste0(io$acc.indir,opts$cells,".tsv.gz"), context="GC") %>% .[,c("start","end","context") := list(pos,pos,"GC")] %>% setnames("pos","bp")
# Define which cells to use (ideally they should have similar mean methylation rate)
opts$cells <- c("A07","A08","A09","B02")#,"C03","C04","C09","D07","D08","E03","F05","F08","G01","G03","G06","H02","H03","H05")
# opts$cells <- c("A07","A08","A09")
# Define which annotations to use and where to center the windows
opts$annotations <- c(
# "prom_1000_1000"="center",
"prom_1000_1000_cgi"="center",
"prom_1000_1000_noncgi"="center"
# "prom_1000_1000_active"="center",
# "prom_1000_1000_inactive"="center",
# "prom_1000_1000_poised"="center",
#"active_enhancers"="center",
#"super_enhancers"="center",
#"primed_enhancers"="center",
#"CTCF"="center",
#"p300"="center",
#"Nanog"="center",
#"Oct4"="center",
#"DHS"="center"
)
cat(sprintf("- Cells: %s\n",paste(opts$cells,collapse=" ")))
cat(sprintf("- Window size: %d\n",opts$window_size))
cat(sprintf("- Tile: %d\n",opts$tile))
met <- loadMultipleMetData(paste0(io$met.indir,opts$cells,".tsv.gz"), context="CG") %>% .[,c("start","end","context") := list(pos,pos,"CG")] %>% setnames("pos","bp")
acc <- loadMultipleMetData(paste0(io$acc.indir,opts$cells,".tsv.gz"), context="GC") %>% .[,c("start","end","context") := list(pos,pos,"GC")] %>% setnames("pos","bp")
# Combine met and acc into one object and remove old data to free some space
data <- rbind(met,acc) %>% setkey(chr, start, end); rm(acc,met)
anno_list <- list()
for (anno in names(opts$annotations)) {
anno_list[[anno]] <- fread(sprintf("%s/%s.bed",io$features.indir,anno))[,c(1,2,3,4,6)]
colnames(anno_list[[anno]]) <- c("chr","start","end","strand","anno")
}
anno_df <- rbindlist(anno_list)[,anno:=as.factor(anno)][,chr:=as.factor(sub("chr","",chr))]; rm(anno_list)
setkey(anno_df,"anno")
tmp <- list()
for (anno in names(opts$annotations)) {
if (opts$annotations[anno] == "start") {
tmp[[anno]] <- rbind(anno_df[anno,][strand == "+",.(chr,start,strand,anno)][, center := start][,c("start") := list(NULL) ],
anno_df[anno,][strand == "-",.(chr,end,strand,anno)][, center := end][,c("end") := list(NULL) ])
}
if (opts$annotations[anno] == "center") {
stopifnot(all(anno_df[anno,end] > anno_df[anno,start]))
tmp[[anno]] <- anno_df[anno,.(chr,start,end,strand,anno)][, center := round(end+start)/2][,c("start","end") := list(NULL,NULL)]
}
if (opts$annotations[anno] == "end") {
tmp[[anno]] <- rbind(anno_df[anno,][strand == "+",.(chr,end,strand,anno)][, center := end][,c("end") := list(NULL) ],
anno_df[anno,][strand == "-",.(chr,start,strand,anno)][, center := start][,c("start") := list(NULL) ])
}
}
tmp <- tmp %>% rbindlist %>% .[, c("start","end") := list(center-opts$window_size,center+opts$window_size)] %>% setkey(chr, start, end)
ov <- foverlaps(data, tmp, nomatch = 0)[, c("start","end","i.start", "i.end") := NULL]
rm(data) # remove old data to free some space
ov <-  rbind(ov[strand == "+"][, dist := bp-center],
ov[strand == "-"][, dist := center-bp],
ov[strand == "*"][, dist := bp-center])
to.plot <- ov[, dist := opts$tile*round(dist/opts$tile)][,list(mean=mean(rate)),by=.(sample,context,dist,anno)]
rm(ov) # remove data to free some space
# Rename annotations
anno_names <- c(
"prom_1000_1000_cgi"="CGI promoters",
"prom_1000_1000_noncgi"="non-CGI promoters",
"prom_1000_1000_active"="Active promoters",
"prom_1000_1000_inactive"="Inactive promoters",
"prom_1000_1000_poised"="Poised promoters","prom$"="Promoters",
"active_enhancers"="Active enhancers",
"super_enhancers"="Super enhancers",
"primed_enhancers"="Primed enhancers"
)
to.plot$anno <- stringr::str_replace_all(to.plot$anno,anno_names)
setkey(to.plot,anno)
to.plot
f <- function(x) { return(data.frame(y=mean(x), ymin=mean(x)-sd(x), ymax=mean(x)+sd(x))) }
