feature.sets_filt <- feature.sets[,features]
asd <- melt.data.table(as.data.table(feature.sets_filt, keep.rownames="pathway"), id.vars = "pathway", variable.name="gene", value.name="value") %>% merge(rna_filt[,c("gene","group")], allow.cartesian=T, by="gene")
# Perform Gene ontology enrichment per cluster
go_list <- list()
for (c in unique(asd$group)) {
go_list[[c]] <- asd[,.(p=fisher.test(x=matrix(data=c(.SD[group==c & value==1,.N],
.SD[group!=c & value==1,.N],
.SD[group==c & value==0,.N],
.SD[group!=c & value==0,.N]),
nrow=2, ncol=2), alternative="greater")[["p.value"]]), by="pathway"] %>% .[,padj:=p.adjust(p, method = "fdr")]
}
opts$threshold_fdr <- 0.01
go_results <- lapply(names(go_list), function(x) go_list[[x]][padj<=opts$threshold_fdr] %>% .[,group:=x]) %>% rbindlist
rna_filt[,.N,by="group"]
top.var
unique(top.var$id)
opts$top.genes <- 0.10 # % more variable genes
opts$bottom.genes <- 0.10 # % less variable genes
top.var <- tmp %>% split(.$anno) %>% map(~ setkey(.,var) %>% tail(.,n=opts$top.genes*nrow(.))) %>% rbindlist %>% setkey(var)
tmp <- acc[,.(var=var(rate)),by=c("anno","id")]
opts$top.genes <- 0.10 # % more variable genes
opts$bottom.genes <- 0.10 # % less variable genes
top.var <- tmp %>% split(.$anno) %>% map(~ setkey(.,var) %>% tail(.,n=opts$top.genes*nrow(.))) %>% rbindlist %>% setkey(var)
bottom.var <- tmp %>% split(.$anno) %>% map(~ setkey(.,var) %>% head(.,n=opts$bottom.genes*nrow(.))) %>% rbindlist %>% setkey(var)
var <- rbind(top.var[,group:="HV"],bottom.var[,group:="LV"])
unique(var$id)
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>%
melt(id.vars = "sample", value.name = "expr", variable.name = "gene") %>%
merge(fData(sceset_filt) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id","totalVar","bioVar")] %>%
setnames("ens_id","id")) %>%
merge(var[anno=="prom_100_100",c("id","group")], by="id", allow.cartesian = T) %>%
.[,.(mean_expr=mean(expr), bioVar=unique(bioVar), totalVar=unique(totalVar)),by=c("gene","group")]
unique(rna$gene)
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>%
melt(id.vars = "sample", value.name = "expr", variable.name = "gene") %>%
merge(fData(sceset_filt) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id","totalVar","bioVar")] %>%
setnames("ens_id","id"))
unique(rna$gene)
dim(sceset)
# Extract highly variable and lowly variable genes
# top.var.genes <- top.var[anno=="prom_100_100",id]
# bottom.var.genes <- bottom.var[anno=="prom_100_100",id]
# sceset_filt <- sceset[fData(sceset)$ens_id %in% c(top.var.genes,bottom.var.genes),]
# fData(sceset_filt)$group <- c("HV","LV")[as.numeric(fData(sceset_filt)$ens_id %in% top.var.genes)+1]
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>%
melt(id.vars = "sample", value.name = "expr", variable.name = "gene") %>%
merge(fData(sceset) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id","totalVar","bioVar")] %>%
setnames("ens_id","id")) %>%
merge(var[anno=="prom_100_100",c("id","group")], by="id", allow.cartesian = T) %>%
.[,.(mean_expr=mean(expr), bioVar=unique(bioVar), totalVar=unique(totalVar)),by=c("gene","group")]
## Mean expression ##
ggplot(rna, aes(x=group, y=mean_expr)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Mean expression") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
## Variance ##
ggplot(rna, aes(x=group, y=totalVar)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Variance") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
## Biological overdispersion ##
ggplot(rna, aes(x=group, y=bioVar)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Biological overdispersion") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
io$reactomeFile <- "/Users/ricard/data/reactome/v59/mus_musculus/out/mouse_v75_reactome.rds"
io$reactomeFile2 <- "/Users/ricard/data/reactome/v59/mus_musculus/AllPathways.txt"
io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/mus_musculus/C5/bp_binary_matrix_ensembl.rds"
# io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/mus_musculus/C2/binary_matrix_ensembl.rds"
# Reactome
reactome <- readRDS(io$reactomeFile); colnames(reactome) <- toupper(colnames(reactome))
tmp <- read.table(io$reactomeFile2, header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
feature.sets <- reactome
# mSigDB
# feature.sets <- readRDS(io$msigFile)
# Filter feature sets with small number of features
opts$min.size <- 10
feature.sets <- feature.sets[rowSums(feature.sets)>=opts$min.size,]
# Remove features that do not intersect between the feature sets and the data
features <- intersect(toupper(rna$gene),colnames(feature.sets))
rna_filt <- rna[,gene:=toupper(gene)] %>% .[gene %in% features]
feature.sets_filt <- feature.sets[,features]
asd <- melt.data.table(as.data.table(feature.sets_filt, keep.rownames="pathway"), id.vars = "pathway", variable.name="gene", value.name="value") %>% merge(rna_filt[,c("gene","group")], allow.cartesian=T, by="gene")
# Perform Gene ontology enrichment per cluster
go_list <- list()
for (c in unique(asd$group)) {
go_list[[c]] <- asd[,.(p=fisher.test(x=matrix(data=c(.SD[group==c & value==1,.N],
.SD[group!=c & value==1,.N],
.SD[group==c & value==0,.N],
.SD[group!=c & value==0,.N]),
nrow=2, ncol=2), alternative="greater")[["p.value"]]), by="pathway"] %>% .[,padj:=p.adjust(p, method = "fdr")]
}
opts$threshold_fdr <- 0.01
go_results <- lapply(names(go_list), function(x) go_list[[x]][padj<=opts$threshold_fdr] %>% .[,group:=x]) %>% rbindlist
View(go_results)
opts$top.genes <- 0.15 # % more variable genes
opts$bottom.genes <- 0.15 # % less variable genes
top.var <- tmp %>% split(.$anno) %>% map(~ setkey(.,var) %>% tail(.,n=opts$top.genes*nrow(.))) %>% rbindlist %>% setkey(var)
tmp <- acc[,.(var=var(rate)),by=c("anno","id")]
ggplot(tmp, aes(var, fill=anno, colour=anno)) +
geom_density(alpha=0.5) +
theme_bw()
opts$top.genes <- 0.15 # % more variable genes
opts$bottom.genes <- 0.15 # % less variable genes
top.var <- tmp %>% split(.$anno) %>% map(~ setkey(.,var) %>% tail(.,n=opts$top.genes*nrow(.))) %>% rbindlist %>% setkey(var)
bottom.var <- tmp %>% split(.$anno) %>% map(~ setkey(.,var) %>% head(.,n=opts$bottom.genes*nrow(.))) %>% rbindlist %>% setkey(var)
var <- rbind(top.var[,group:="HV"],bottom.var[,group:="LV"])
# Extract highly variable and lowly variable genes
# top.var.genes <- top.var[anno=="prom_100_100",id]
# bottom.var.genes <- bottom.var[anno=="prom_100_100",id]
# sceset_filt <- sceset[fData(sceset)$ens_id %in% c(top.var.genes,bottom.var.genes),]
# fData(sceset_filt)$group <- c("HV","LV")[as.numeric(fData(sceset_filt)$ens_id %in% top.var.genes)+1]
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>%
melt(id.vars = "sample", value.name = "expr", variable.name = "gene") %>%
merge(fData(sceset) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id","totalVar","bioVar")] %>%
setnames("ens_id","id")) %>%
merge(var[anno=="prom_100_100",c("id","group")], by="id", allow.cartesian = T) %>%
.[,.(mean_expr=mean(expr), bioVar=unique(bioVar), totalVar=unique(totalVar)),by=c("gene","group")]
## Mean expression ##
ggplot(rna, aes(x=group, y=mean_expr)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Mean expression") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
## Variance ##
ggplot(rna, aes(x=group, y=totalVar)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Variance") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
## Biological overdispersion ##
ggplot(rna, aes(x=group, y=bioVar)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Biological overdispersion") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
io$reactomeFile <- "/Users/ricard/data/reactome/v59/mus_musculus/out/mouse_v75_reactome.rds"
io$reactomeFile2 <- "/Users/ricard/data/reactome/v59/mus_musculus/AllPathways.txt"
io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/mus_musculus/C5/bp_binary_matrix_ensembl.rds"
# io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/mus_musculus/C2/binary_matrix_ensembl.rds"
# Reactome
reactome <- readRDS(io$reactomeFile); colnames(reactome) <- toupper(colnames(reactome))
tmp <- read.table(io$reactomeFile2, header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
feature.sets <- reactome
# mSigDB
# feature.sets <- readRDS(io$msigFile)
# Filter feature sets with small number of features
opts$min.size <- 10
feature.sets <- feature.sets[rowSums(feature.sets)>=opts$min.size,]
# Remove features that do not intersect between the feature sets and the data
features <- intersect(toupper(rna$gene),colnames(feature.sets))
rna_filt <- rna[,gene:=toupper(gene)] %>% .[gene %in% features]
feature.sets_filt <- feature.sets[,features]
asd <- melt.data.table(as.data.table(feature.sets_filt, keep.rownames="pathway"), id.vars = "pathway", variable.name="gene", value.name="value") %>% merge(rna_filt[,c("gene","group")], allow.cartesian=T, by="gene")
# Perform Gene ontology enrichment per cluster
go_list <- list()
for (c in unique(asd$group)) {
go_list[[c]] <- asd[,.(p=fisher.test(x=matrix(data=c(.SD[group==c & value==1,.N],
.SD[group!=c & value==1,.N],
.SD[group==c & value==0,.N],
.SD[group!=c & value==0,.N]),
nrow=2, ncol=2), alternative="greater")[["p.value"]]), by="pathway"] %>% .[,padj:=p.adjust(p, method = "fdr")]
}
opts$threshold_fdr <- 0.01
go_results <- lapply(names(go_list), function(x) go_list[[x]][padj<=opts$threshold_fdr] %>% .[,group:=x]) %>% rbindlist
View(go_results)
View(var)
top.var.genes <- top.var[anno=="prom_100_100",id]
bottom.var.genes <- bottom.var[anno=="prom_100_100",id]
tmp[,group=c("HV","LV")[as.numeric(id %in% top.var.genes)+1]]
tmp[,group:=c("HV","LV")[as.numeric(id %in% top.var.genes)+1]]
tmp
tmp <- acc[,.(var=var(rate)),by=c("anno","id")]
opts$top.genes <- 0.15 # % more variable genes
opts$bottom.genes <- 0.15 # % less variable genes
top.var <- tmp %>% split(.$anno) %>% map(~ setkey(.,var) %>% tail(.,n=opts$top.genes*nrow(.))) %>% rbindlist %>% setkey(var)
bottom.var <- tmp %>% split(.$anno) %>% map(~ setkey(.,var) %>% head(.,n=opts$bottom.genes*nrow(.))) %>% rbindlist %>% setkey(var)
top.var.genes <- top.var[anno=="prom_100_100",id]
bottom.var.genes <- bottom.var[anno=="prom_100_100",id]
tmp[,group:=c("HV","LV")[as.numeric(id %in% top.var.genes)+1]]
View(tmp)
tmp[id%in%top.var.genes,group:="HV"]
View(tmp)
tmp <- acc[,.(var=var(rate)),by=c("anno","id")]
opts$top.genes <- 0.15 # % more variable genes
opts$bottom.genes <- 0.15 # % less variable genes
top.var <- tmp %>% split(.$anno) %>% map(~ setkey(.,var) %>% tail(.,n=opts$top.genes*nrow(.))) %>% rbindlist %>% setkey(var)
bottom.var <- tmp %>% split(.$anno) %>% map(~ setkey(.,var) %>% head(.,n=opts$bottom.genes*nrow(.))) %>% rbindlist %>% setkey(var)
# var <- rbind(top.var[,group:="HV"],bottom.var[,group:="LV"])
top.var.genes <- top.var[anno=="prom_100_100",id]
bottom.var.genes <- bottom.var[anno=="prom_100_100",id]
tmp[id%in%top.var.genes,group:="HV"]
tmp[id%in%bottom.var.genes,group:="LV"]
View(tmp)
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>%
melt(id.vars = "sample", value.name = "expr", variable.name = "gene") %>%
merge(fData(sceset) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id","totalVar","bioVar")] %>%
setnames("ens_id","id")) %>%
merge(var[anno=="prom_100_100",c("id","group")], by="id", allow.cartesian = T) %>%
.[,.(mean_expr=mean(expr), bioVar=unique(bioVar), totalVar=unique(totalVar)),by=c("gene","group")]
# Extract highly variable and lowly variable genes
# top.var.genes <- top.var[anno=="prom_100_100",id]
# bottom.var.genes <- bottom.var[anno=="prom_100_100",id]
# sceset_filt <- sceset[fData(sceset)$ens_id %in% c(top.var.genes,bottom.var.genes),]
# fData(sceset_filt)$group <- c("HV","LV")[as.numeric(fData(sceset_filt)$ens_id %in% top.var.genes)+1]
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>%
melt(id.vars = "sample", value.name = "expr", variable.name = "gene") %>%
merge(fData(sceset) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id","totalVar","bioVar")] %>%
setnames("ens_id","id")) %>%
merge(var[anno=="prom_100_100",c("id","group")], by="id", allow.cartesian = T) %>%
.[,.(mean_expr=mean(expr), bioVar=unique(bioVar), totalVar=unique(totalVar)),by=c("gene","group")]
## Mean expression ##
ggplot(rna, aes(x=group, y=mean_expr)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Mean expression") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
## Variance ##
ggplot(rna, aes(x=group, y=totalVar)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Variance") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
## Biological overdispersion ##
ggplot(rna, aes(x=group, y=bioVar)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Biological overdispersion") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
io$reactomeFile <- "/Users/ricard/data/reactome/v59/mus_musculus/out/mouse_v75_reactome.rds"
io$reactomeFile2 <- "/Users/ricard/data/reactome/v59/mus_musculus/AllPathways.txt"
io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/mus_musculus/C5/bp_binary_matrix_ensembl.rds"
reactome <- readRDS(io$reactomeFile); colnames(reactome) <- toupper(colnames(reactome))
tmp <- read.table(io$reactomeFile2, header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
feature.sets <- reactome
opts$min.size <- 10
feature.sets <- feature.sets[rowSums(feature.sets)>=opts$min.size,]
features <- intersect(toupper(rna$gene),colnames(feature.sets))
rna_filt <- rna[,gene:=toupper(gene)] %>% .[gene %in% features]
feature.sets_filt <- feature.sets[,features]
asd <- melt.data.table(as.data.table(feature.sets_filt, keep.rownames="pathway"), id.vars = "pathway", variable.name="gene", value.name="value") %>% merge(rna_filt[,c("gene","group")], allow.cartesian=T, by="gene")
unique(asd$gene)
unique(rna$gene)
var[,group:="None"]
opts$top.genes <- 0.15 # % more variable genes
opts$bottom.genes <- 0.15 # % less variable genes
top.var <- var %>% split(.$anno) %>% map(~ setkey(.,var) %>% tail(.,n=opts$top.genes*nrow(.))) %>% rbindlist %>% setkey(var)
bottom.var <- var %>% split(.$anno) %>% map(~ setkey(.,var) %>% head(.,n=opts$bottom.genes*nrow(.))) %>% rbindlist %>% setkey(var)
# var <- rbind(top.var[,group:="HV"],bottom.var[,group:="LV"])
top.var.genes <- top.var[anno=="prom_100_100",id]
bottom.var.genes <- bottom.var[anno=="prom_100_100",id]
var[,group:="None"]
var[id%in%top.var.genes,group:="HV"]
var[id%in%bottom.var.genes,group:="LV"]
var <- acc[,.(var=var(rate)),by=c("anno","id")]
opts$top.genes <- 0.15 # % more variable genes
opts$bottom.genes <- 0.15 # % less variable genes
top.var <- var %>% split(.$anno) %>% map(~ setkey(.,var) %>% tail(.,n=opts$top.genes*nrow(.))) %>% rbindlist %>% setkey(var)
bottom.var <- var %>% split(.$anno) %>% map(~ setkey(.,var) %>% head(.,n=opts$bottom.genes*nrow(.))) %>% rbindlist %>% setkey(var)
# var <- rbind(top.var[,group:="HV"],bottom.var[,group:="LV"])
top.var.genes <- top.var[anno=="prom_100_100",id]
bottom.var.genes <- bottom.var[anno=="prom_100_100",id]
var[,group:="None"]
var[id%in%top.var.genes,group:="HV"]
var[id%in%bottom.var.genes,group:="LV"]
View(var)
# Extract highly variable and lowly variable genes
# top.var.genes <- top.var[anno=="prom_100_100",id]
# bottom.var.genes <- bottom.var[anno=="prom_100_100",id]
# sceset_filt <- sceset[fData(sceset)$ens_id %in% c(top.var.genes,bottom.var.genes),]
# fData(sceset_filt)$group <- c("HV","LV")[as.numeric(fData(sceset_filt)$ens_id %in% top.var.genes)+1]
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>%
melt(id.vars = "sample", value.name = "expr", variable.name = "gene") %>%
merge(fData(sceset) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id","totalVar","bioVar")] %>%
setnames("ens_id","id")) %>%
merge(var[anno=="prom_100_100",c("id","group")], by="id", allow.cartesian = T) %>%
.[,.(mean_expr=mean(expr), bioVar=unique(bioVar), totalVar=unique(totalVar)),by=c("gene","group")]
## Mean expression ##
ggplot(rna, aes(x=group, y=mean_expr)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Mean expression") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
## Variance ##
ggplot(rna, aes(x=group, y=totalVar)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Variance") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
## Biological overdispersion ##
ggplot(rna, aes(x=group, y=bioVar)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Biological overdispersion") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
io$reactomeFile <- "/Users/ricard/data/reactome/v59/mus_musculus/out/mouse_v75_reactome.rds"
io$reactomeFile2 <- "/Users/ricard/data/reactome/v59/mus_musculus/AllPathways.txt"
io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/mus_musculus/C5/bp_binary_matrix_ensembl.rds"
# io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/mus_musculus/C2/binary_matrix_ensembl.rds"
# Reactome
reactome <- readRDS(io$reactomeFile); colnames(reactome) <- toupper(colnames(reactome))
tmp <- read.table(io$reactomeFile2, header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
feature.sets <- reactome
# mSigDB
# feature.sets <- readRDS(io$msigFile)
# Filter feature sets with small number of features
opts$min.size <- 10
feature.sets <- feature.sets[rowSums(feature.sets)>=opts$min.size,]
# Remove features that do not intersect between the feature sets and the data
features <- intersect(toupper(rna$gene),colnames(feature.sets))
rna_filt <- rna[,gene:=toupper(gene)] %>% .[gene %in% features]
feature.sets_filt <- feature.sets[,features]
asd <- melt.data.table(as.data.table(feature.sets_filt, keep.rownames="pathway"), id.vars = "pathway", variable.name="gene", value.name="value") %>% merge(rna_filt[,c("gene","group")], allow.cartesian=T, by="gene")
# Perform Gene ontology enrichment per cluster
go_list <- list()
for (c in unique(asd$group)) {
go_list[[c]] <- asd[,.(p=fisher.test(x=matrix(data=c(.SD[group==c & value==1,.N],
.SD[group!=c & value==1,.N],
.SD[group==c & value==0,.N],
.SD[group!=c & value==0,.N]),
nrow=2, ncol=2), alternative="greater")[["p.value"]]), by="pathway"] %>% .[,padj:=p.adjust(p, method = "fdr")]
}
opts$threshold_fdr <- 0.01
go_results <- lapply(names(go_list), function(x) go_list[[x]][padj<=opts$threshold_fdr] %>% .[,group:=x]) %>% rbindlist
View(go_results)
asd
View(asd)
pluri <- fread("/Users/ricard/NMT-seq/genesets/pluripotency.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
diff <- fread("/Users/ricard/NMT-seq/genesets/differentiation.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
housek <- fread("/Users/ricard/NMT-seq/genesets/housekeeping.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
pluri
toupper(pluri) %in% var[group=="HV"]
haed(rna)
head(rna)
toupper(pluri) %in% rna[group=="HV",gene]
toupper(pluri) %in% rna[group=="LV",gene]
toupper(diff) %in% rna[group=="HV",gene]
toupper(diff) %in% rna[group=="LV",gene]
var <- acc[,.(var=var(rate)),by=c("anno","id")]
ggplot(var, aes(var, fill=anno, colour=anno)) +
geom_density(alpha=0.5) +
theme_bw()
opts$top.genes <- 0.10 # % more variable genes
opts$bottom.genes <- 0.10 # % less variable genes
top.var <- var %>% split(.$anno) %>% map(~ setkey(.,var) %>% tail(.,n=opts$top.genes*nrow(.))) %>% rbindlist %>% setkey(var)
bottom.var <- var %>% split(.$anno) %>% map(~ setkey(.,var) %>% head(.,n=opts$bottom.genes*nrow(.))) %>% rbindlist %>% setkey(var)
# var <- rbind(top.var[,group:="HV"],bottom.var[,group:="LV"])
top.var.genes <- top.var[anno=="prom_100_100",id]
bottom.var.genes <- bottom.var[anno=="prom_100_100",id]
var[,group:="None"]
var[id%in%top.var.genes,group:="HV"]
var[id%in%bottom.var.genes,group:="LV"]
# Extract highly variable and lowly variable genes
# top.var.genes <- top.var[anno=="prom_100_100",id]
# bottom.var.genes <- bottom.var[anno=="prom_100_100",id]
# sceset_filt <- sceset[fData(sceset)$ens_id %in% c(top.var.genes,bottom.var.genes),]
# fData(sceset_filt)$group <- c("HV","LV")[as.numeric(fData(sceset_filt)$ens_id %in% top.var.genes)+1]
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>%
melt(id.vars = "sample", value.name = "expr", variable.name = "gene") %>%
merge(fData(sceset) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id","totalVar","bioVar")] %>%
setnames("ens_id","id")) %>%
merge(var[anno=="prom_100_100",c("id","group")], by="id", allow.cartesian = T) %>%
.[,.(mean_expr=mean(expr), bioVar=unique(bioVar), totalVar=unique(totalVar)),by=c("gene","group")]
## Mean expression ##
ggplot(rna, aes(x=group, y=mean_expr)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Mean expression") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
## Variance ##
ggplot(rna, aes(x=group, y=totalVar)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Variance") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
## Biological overdispersion ##
ggplot(rna, aes(x=group, y=bioVar)) +
geom_boxplot(aes(fill=group), outlier.size=0) +
labs(x="", y="Biological overdispersion") +
boxplot_theme() +
theme(
legend.position="right",
axis.text.x = element_blank(),
strip.text.x = element_blank(),
strip.background = element_blank()
)
io$reactomeFile <- "/Users/ricard/data/reactome/v59/mus_musculus/out/mouse_v75_reactome.rds"
io$reactomeFile2 <- "/Users/ricard/data/reactome/v59/mus_musculus/AllPathways.txt"
io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/mus_musculus/C5/bp_binary_matrix_ensembl.rds"
# io$msigFile <- "/Users/ricard/data/MSigDB/v6.0/mus_musculus/C2/binary_matrix_ensembl.rds"
# Reactome
reactome <- readRDS(io$reactomeFile); colnames(reactome) <- toupper(colnames(reactome))
tmp <- read.table(io$reactomeFile2, header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
feature.sets <- reactome
# mSigDB
# feature.sets <- readRDS(io$msigFile)
# Filter feature sets with small number of features
opts$min.size <- 10
feature.sets <- feature.sets[rowSums(feature.sets)>=opts$min.size,]
# Remove features that do not intersect between the feature sets and the data
features <- intersect(toupper(rna$gene),colnames(feature.sets))
rna_filt <- rna[,gene:=toupper(gene)] %>% .[gene %in% features]
feature.sets_filt <- feature.sets[,features]
asd <- melt.data.table(as.data.table(feature.sets_filt, keep.rownames="pathway"), id.vars = "pathway", variable.name="gene", value.name="value") %>% merge(rna_filt[,c("gene","group")], allow.cartesian=T, by="gene")
# Perform Gene ontology enrichment per cluster
go_list <- list()
for (c in unique(asd$group)) {
go_list[[c]] <- asd[,.(p=fisher.test(x=matrix(data=c(.SD[group==c & value==1,.N],
.SD[group!=c & value==1,.N],
.SD[group==c & value==0,.N],
.SD[group!=c & value==0,.N]),
nrow=2, ncol=2), alternative="greater")[["p.value"]]), by="pathway"] %>% .[,padj:=p.adjust(p, method = "fdr")]
}
opts$threshold_fdr <- 0.01
go_results <- lapply(names(go_list), function(x) go_list[[x]][padj<=opts$threshold_fdr] %>% .[,group:=x]) %>% rbindlist
# Load marker genes
pluri <- fread("/Users/ricard/NMT-seq/genesets/pluripotency.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
diff <- fread("/Users/ricard/NMT-seq/genesets/differentiation.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
housek <- fread("/Users/ricard/NMT-seq/genesets/housekeeping.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
toupper(pluri) %in% rna[group=="HV",gene]
toupper(pluri) %in% rna[group=="LV",gene]
toupper(diff) %in% rna[group=="HV",gene]
toupper(diff) %in% rna[group=="LV",gene]
toupper(pluri) %in% rna[group=="HV",gene]
toupper(pluri) %in% rna[group=="LV",gene]
toupper(diff) %in% rna[group=="HV",gene]
toupper(diff) %in% rna[group=="LV",gene]
toupper(housek) %in% rna[group=="HV",gene]
toupper(housek) %in% rna[group=="LV",gene]
