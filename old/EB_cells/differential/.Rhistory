library(scater)
library(data.table)
library(purrr)
library(ggplot2)
scatter_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,10,0), hjust=0.5),
axis.text=element_text(size=rel(1.75), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.title.x = element_text(margin=margin(10,0,0,0)),
legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
gg_volcano_plot <- function(tmp, title = "") {
negative_hits <- tmp[sig==TRUE & diff<0,id]
positive_hits <- tmp[sig==TRUE & diff>0,id]
all <- nrow(tmp)
xlim <- max(abs(tmp$diff))
ylim <- max(-log10(tmp$p.value))
# p <- ggplot(tmp, aes(x=diff, y=-padj_fdr)) +
p <- ggplot(tmp, aes(x=diff, y=-log10(p.value))) +
labs(title=title, x="Expression difference", y=expression(paste("-log"[10],"(p.value)"))) +
# geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=8), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
scale_x_continuous(limits=c(-xlim-2,xlim+2)) +
scale_y_continuous(limits=c(0,ylim+1)) +
annotate("text", x=0, y=ylim+1, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-10, y=ylim+1, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=10, y=ylim+1, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# ggrepel::geom_text_repel(data=cor_samples[sig == TRUE], aes(x=r, y=-log10(p), label=gene), size=6) +
scatter_theme()
return(p)
}
boxplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5, margin=margin(0,0,20,0)),
axis.title.y = element_text(colour="black", size=20, vjust=1.5),
axis.title.x = element_text(colour="black", size=20, vjust=1.5, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.6)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="none",
legend.text=element_text(size=15),
legend.title=element_blank(),
legend.background=element_blank(),
panel.border = element_blank()
)
}
round_df <- function(df, digits) {
nums <- names(which(vapply(df, is.numeric, FUN.VALUE = logical(1))))
df[,(nums) := round(.SD,digits), .SDcols=nums]
return(df)
}
matrix.please<-function(x) {
m<-as.matrix(x[,-1])
rownames(m)<-x[[1]]
m
}
io <- list()
io$basedir <- "/Users/ricard/data/NMT-seq_EB"
io$outdir <- "/Users/ricard/NMT-seq/rebuttal/EB/differential/out"
io$in.sample_metadata <- paste0(io$basedir,"/sample_sheet.csv")
io$rna.infile <- paste(io$basedir,"rna/parsed/sceset.rds",sep="/")
## Define options
opts <- list()
# Define which cells to use
opts$cells <- fread(io$in.sample_metadata, header=T) %>% .[pass_rnaQC==T,sample]
sample_metadata <- fread(io$in.sample_metadata) %>% .[sample%in%opts$cells]
# Load SCEset object
sce <- readRDS(io$rna.infile)
# Remove duplicated ensembl IDs and spike ins
sce <- sce[!duplicated(fData(sce)$ens_id),]
sce <- sce[!is.na(fData(sce)$ens_id),]
# Extract feature metadata to do the overlap
rna_metadata <- fData(sce) %>% tibble::rownames_to_column("gene") %>% as.data.table %>%
.[,c("chr","start","end","gene","ens_id")]  %>%
.[,chr:=as.factor(sub("chr","",chr))] %>%
setnames("ens_id","id")
# Create data.table from SCEset object
rna <- exprs(sce) %>% t %>% as.data.table(keep.rownames="sample") %>% melt(id.vars="sample", value.name="expr", variable.name="gene") %>%
merge(fData(sce) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id")] %>% as.data.table %>% setnames("ens_id","id"))
rna <- merge(rna, sample_metadata[,c("sample","lineage")], by="sample")
# rna_filt <- rna
# Filter genes based on dropout
# opts$max.dropout <- 0.25
# rna <- rna[,dropout:=mean(expr<0.1),by="gene"] %>% .[dropout<=opts$max.dropout] %>% .[,dropout:=NULL]
# Filter genes based on variance
# opts$fvar <- 0.5
# genes_var <- names(tail(sort(apply(exprs(sce_filt),1,var)), n=nrow(sce_filt)*opts$fvar))
# sce_filt <- sce_filt[genes_var,opts$cells]
# Filter genes based on biological overdispersion
# opts$fvar <- 0.5
# genes_var <- rownames(sce_filt)[tail(sort(fData(sce_filt)$bioVar, index.return=TRUE)$ix, n=nrow(sce_filt)*opts$fvar)]
# sce_filt <- sce_filt[genes_var,opts$cells]
# genes_oversdispersion <- rownames(sce_filt)[fData(sce_filt)$bioVar > 1]
# sce_filt <- sce_filt[genes_oversdispersion,opts$cells]
opts$threshold_fdr <- 0.0001
# Normal assumption
diff.out <- rna[, .(N1 = .SD[lineage=="pluri",.N], N2 = .SD[lineage=="diff",.N],
diff = mean(.SD[lineage=="pluri",expr]) - mean(.SD[lineage=="diff",expr]),
p.value = t.test(x=.SD[lineage=="pluri",expr], y=.SD[lineage=="diff",expr], var.equal=FALSE)[["p.value"]]), by = c("gene","id")] %>%
.[, c("padj_fdr") := list(p.adjust(p.value, method = "fdr"))] %>%
.[, c("log_padj_fdr") := list(-log10(padj_fdr))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>%
.[complete.cases(sig)] %>% setorder(padj_fdr)
opts$threshold_fdr <- 0.0001
# Normal assumption
Differentiated.out <- rna[, .(N1 = .SD[lineage=="Pluripotent",.N], N2 = .SD[lineage=="Differentiated",.N],
Differentiated = mean(.SD[lineage=="Pluripotent",expr]) - mean(.SD[lineage=="Differentiated",expr]),
p.value = t.test(x=.SD[lineage=="Pluripotent",expr], y=.SD[lineage=="Differentiated",expr], var.equal=FALSE)[["p.value"]]), by = c("gene","id")] %>%
.[, c("padj_fdr") := list(p.adjust(p.value, method = "fdr"))] %>%
.[, c("log_padj_fdr") := list(-log10(padj_fdr))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>%
.[complete.cases(sig)] %>% setorder(padj_fdr)
View(Differentiated.out)
View(Differentiated.out)
View(Differentiated.out)
p <- ggplot(rna[gene=="EFHD1"], aes(x=lineage, y=expr)) +
geom_jitter(aes(color=lineage), size=2.0) +
geom_boxplot(aes(fill=lineage), alpha=0.5, outlier.shape=NA) +
boxplot_theme() +
theme(
plot.title = element_text(size=rel(1.5), hjust=0.5, vjust=0)
)
print(p)
p <- ggplot(rna[gene=="Efhd1"], aes(x=lineage, y=expr)) +
geom_jitter(aes(color=lineage), size=2.0) +
geom_boxplot(aes(fill=lineage), alpha=0.5, outlier.shape=NA) +
boxplot_theme() +
theme(
plot.title = element_text(size=rel(1.5), hjust=0.5, vjust=0)
)
print(p)
