kk <- which.max(r[,k])
dt_nonsparse[factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar2[,k])<1e-2) )]
dt_nonsparse[factor==k, cor:=cor(abs(foo[,kk]),abs(bar2[,k]))]
}
r <- cor(abs(foo),abs(bar3))
dt_pca <- data.table(model="pca", factor=1:ncol(r), mean=0, cor=0)
for (k in 1:ncol(r)) {
kk <- which.max(r[,k])
dt_pca[factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar3[,k])<1e-2) )]
dt_pca[factor==k, cor:=cor(abs(foo[,kk]),abs(bar3[,k]))]
}
dt <- rbind(dt_sparse, dt_nonsparse, dt_pca)
p <- ggplot(dt, aes(x=model, y=mean)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Fraction of true zero weights recovered") +
theme_bw() + theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
p <- ggplot(dt, aes(x=model, y=cor)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Correlation with true weights") +
theme_bw()
print(p)
models <- names(weights_list)
models
models <- names(weights_list)
dt_sparse <- list()
dt_nonsparse <- list()
dt_pca <- list()
for (model in models) {
d <- as.numeric(strsplit(model,"_")[[1]][1])
trial <- strsplit(model,"_")[[1]][2]
# True weights
foo <- weights_list[[model]][["0"]]
# Sparse model weights
R2 <- calculateVarianceExplained(sparse_models[[model]], plotit=F)$R2PerFactor[,"0"]
sparse_active_factors <- as.character(which(R2>0.01))
bar1 <- getWeights(sparse_models[[model]])[["0"]][,sparse_active_factors]
# Non-sparse model weights
R2 <- calculateVarianceExplained(nonsparse_models[[model]], plotit=F)$R2PerFactor[,"0"]
nonsparse_active_factors <- as.character(which(R2>0.01))
bar2 <- getWeights(nonsparse_models[[model]])[["0"]][,nonsparse_active_factors]
# PCA weights
bar3 <- pca_models[[model]]@loadings[1:d,]
r <- cor(abs(foo),abs(bar1))
dt_sparse[[model]] <- data.table(model="sparse", D=d, trial=trial, factor=sparse_active_factors, mean=0, cor=0)
for (k in sparse_active_factors) {
kk <- which.max(r[,k])
dt_sparse[[model]][factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar1[,k])<1e-2) )]
dt_sparse[[model]][factor==k, cor:=cor(abs(foo[,kk]),abs(bar1[,k]))]
}
r <- cor(abs(foo),abs(bar2))
dt_nonsparse[[model]] <- data.table(model="nonsparse", D=d, trial=trial, factor=nonsparse_active_factors, mean=0, cor=0)
for (k in nonsparse_active_factors) {
kk <- which.max(r[,k])
dt_nonsparse[[model]][factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar2[,k])<1e-2) )]
dt_nonsparse[[model]][factor==k, cor:=cor(abs(foo[,kk]),abs(bar2[,k]))]
}
r <- cor(abs(foo),abs(bar3))
dt_pca[[model]] <- data.table(model="pca", D=d, trial=trial, factor=1:ncol(r), mean=0, cor=0)
for (k in 1:ncol(r)) {
kk <- which.max(r[,k])
dt_pca[[model]][factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar3[,k])<1e-2) )]
dt_pca[[model]][factor==k, cor:=cor(abs(foo[,kk]),abs(bar3[,k]))]
}
}
dt <- rbind(rbindlist(dt_sparse), rbindlist(dt_nonsparse), rbindlist(dt_pca))
View(dt)
p <- ggplot(dt, aes(x=model, y=mean)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Fraction of true zero weights recovered") +
theme_bw() + theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
p <- ggplot(dt, aes(x=model, y=cor)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Correlation with true weights") +
theme_bw()
print(p)
p <- ggplot(dt, aes(x=model, y=mean)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Fraction of true zero weights recovered") +
theme_bw() + theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
head(weights)
p <- ggplot(weights[D=="D=5000"], aes(x=value)) +
# p <- ggplot(weights[D=="D=1000" & type%in%c("sparse","nonsparse")], aes(x=value)) +
stat_ecdf(aes(group=trial, color=type), geom = "step") +
theme_bw() +
guides(colour = guide_legend(override.aes = list(size=1.5))) +
scale_x_continuous(limits=c(-1,1)) +
labs(y="Cumulative density", x="Weights") +
theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
# pdf("/Users/ricard/CLL/simulations/elementwise_sparsity/out/cdf.pdf", width=7, height=5, useDingbats = F)
# print(p)
# dev.off()
weughts
weights
unique(weights$trial)
unique(weights$type)
p <- ggplot(weights[D=="D=5000"], aes(x=value)) +
# p <- ggplot(weights[D=="D=1000" & type%in%c("sparse","nonsparse")], aes(x=value)) +
stat_ecdf(aes(group=interaction(trial,type), color=type), geom = "step") +
theme_bw() +
guides(colour = guide_legend(override.aes = list(size=1.5))) +
scale_x_continuous(limits=c(-1,1)) +
labs(y="Cumulative density", x="Weights") +
theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
# pdf("/Users/ricard/CLL/simulations/elementwise_sparsity/out/cdf.pdf", width=7, height=5, useDingbats = F)
# print(p)
# dev.off()
View(dt)
View(dt)
weighs
weights_list
weights_list$`5000_5`$`0`[,"6"]
weights_list$`5000_5`$`0`[,6]
head(weights_list$`5000_5`$`0`[,6])
?stat_ecdf
dt
p <- ggplot(dt, aes(x=model, y=cor)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Correlation with true weights") +
facet_wrap(~D) +
theme_bw()
print(p)
dt
dt$D
unique(dt$D)
models
model
models
models <- names(weights_list)
dt_sparse <- list()
dt_nonsparse <- list()
dt_pca <- list()
for (model in models) {
d <- as.numeric(strsplit(model,"_")[[1]][1])
print(d)
trial <- strsplit(model,"_")[[1]][2]
# True weights
foo <- weights_list[[model]][["0"]]
# Sparse model weights
R2 <- calculateVarianceExplained(sparse_models[[model]], plotit=F)$R2PerFactor[,"0"]
sparse_active_factors <- as.character(which(R2>0.01))
bar1 <- getWeights(sparse_models[[model]])[["0"]][,sparse_active_factors]
# Non-sparse model weights
R2 <- calculateVarianceExplained(nonsparse_models[[model]], plotit=F)$R2PerFactor[,"0"]
nonsparse_active_factors <- as.character(which(R2>0.01))
bar2 <- getWeights(nonsparse_models[[model]])[["0"]][,nonsparse_active_factors]
# PCA weights
bar3 <- pca_models[[model]]@loadings[1:d,]
r <- cor(abs(foo),abs(bar1))
dt_sparse[[model]] <- data.table(model="sparse", D=d, trial=trial, factor=sparse_active_factors, mean=0, cor=0)
for (k in sparse_active_factors) {
kk <- which.max(r[,k])
dt_sparse[[model]][factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar1[,k])<1e-2) )]
dt_sparse[[model]][factor==k, cor:=cor(abs(foo[,kk]),abs(bar1[,k]))]
}
r <- cor(abs(foo),abs(bar2))
dt_nonsparse[[model]] <- data.table(model="nonsparse", D=d, trial=trial, factor=nonsparse_active_factors, mean=0, cor=0)
for (k in nonsparse_active_factors) {
kk <- which.max(r[,k])
dt_nonsparse[[model]][factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar2[,k])<1e-2) )]
dt_nonsparse[[model]][factor==k, cor:=cor(abs(foo[,kk]),abs(bar2[,k]))]
}
r <- cor(abs(foo),abs(bar3))
dt_pca[[model]] <- data.table(model="pca", D=d, trial=trial, factor=1:ncol(r), mean=0, cor=0)
for (k in 1:ncol(r)) {
kk <- which.max(r[,k])
dt_pca[[model]][factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar3[,k])<1e-2) )]
dt_pca[[model]][factor==k, cor:=cor(abs(foo[,kk]),abs(bar3[,k]))]
}
}
model
foo <- weights_list[[model]][["0"]]
foo
R2 <- calculateVarianceExplained(sparse_models[[model]], plotit=F)$R2PerFactor[,"0"]
sparse_models[[model]]
names(sparse_models)
names(models)
names(sparse_models)
names(nonsparse_models)
devtools::load_all("/Users/ricard/mofa/MOFAtools")
# library(MOFAtools)
library(data.table)
library(purrr)
library(ggplot2)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D"
D_list <- c(5000,10000)
ntrials <- 10
views <- "0"
pca_models <- list()
for (d in D_list) {
for (trial in seq(0,ntrials-1)) {
data_list <- list()
for (m in views) {
data_list[[m]] <- fread(paste0(in.folder,"/trial",trial,"/",d,"_",m,".txt")) %>% as.matrix
}
data <- do.call("cbind",data_list)
pca_models[[paste0(d,"_",trial)]] <- pcaMethods::pca(data, nPcs=10, center=T, scale="none")
}
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D"
D_list <- c(5000,10000)
ntrials <- 10
views <- "0"
weights_list <- list()
for (d in D_list) {
for (trial in seq(0,ntrials-1)) {
weights_list[[paste0(d,"_",trial)]] <- list()
for (m in views) {
weights_list[[paste0(d,"_",trial)]][[m]] <- fread(paste0(in.folder,"/trial",trial,"/",d,"_W_",m,".txt")) %>% as.matrix
}
}
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/results/sparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
sparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
sparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/results/nonsparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
nonsparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
nonsparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
# PCA model
pca_weights <- list()
for (i in names(pca_models)) {
d <- strsplit(i,"_")[[1]][1]
trial <- strsplit(i,"_")[[1]][2]
pca_weights[[i]] <- pca_models[[i]]@scores %>% as.data.table %>%
.[,c("feature","trial","D","view"):=list(1:nrow(.),trial,paste0("D=",d),"all")] %>%
melt(id.vars=c("feature","trial","D","view"), variable.name="factor") %>%
.[,c("feature","factor","value","view","D","trial")]
}
pca_weights <- pca_weights %>% rbindlist %>% .[,type:="Concatenated PCA"]
# Spike and slab model
sparse_weights <- list()
for (i in names(sparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(sparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
# R2 <- calculateVarianceExplained(sparse_models[[i]], plotit=F)$R2PerFactor
# sparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
sparse_weights[[i]] <- tmp
}
sparse_weights <- sparse_weights %>% rbindlist %>% .[,type:="Spike and Slab"]
# ARD model
nonsparse_weights <- list()
for (i in names(nonsparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(nonsparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
# R2 <- calculateVarianceExplained(nonsparse_models[[i]], plotit=F)$R2PerFactor
# nonsparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
nonsparse_weights[[i]] <- tmp
}
nonsparse_weights <- nonsparse_weights %>% rbindlist %>% .[,type:="ARD"]
weights <- rbind(pca_weights, sparse_weights, nonsparse_weights)
models <- names(weights_list)
dt_sparse <- list()
dt_nonsparse <- list()
dt_pca <- list()
for (model in models) {
d <- as.numeric(strsplit(model,"_")[[1]][1])
print(d)
trial <- strsplit(model,"_")[[1]][2]
# True weights
foo <- weights_list[[model]][["0"]]
# Sparse model weights
R2 <- calculateVarianceExplained(sparse_models[[model]], plotit=F)$R2PerFactor[,"0"]
sparse_active_factors <- as.character(which(R2>0.01))
bar1 <- getWeights(sparse_models[[model]])[["0"]][,sparse_active_factors]
# Non-sparse model weights
R2 <- calculateVarianceExplained(nonsparse_models[[model]], plotit=F)$R2PerFactor[,"0"]
nonsparse_active_factors <- as.character(which(R2>0.01))
bar2 <- getWeights(nonsparse_models[[model]])[["0"]][,nonsparse_active_factors]
# PCA weights
bar3 <- pca_models[[model]]@loadings[1:d,]
r <- cor(abs(foo),abs(bar1))
dt_sparse[[model]] <- data.table(model="sparse", D=d, trial=trial, factor=sparse_active_factors, mean=0, cor=0)
for (k in sparse_active_factors) {
kk <- which.max(r[,k])
dt_sparse[[model]][factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar1[,k])<1e-2) )]
dt_sparse[[model]][factor==k, cor:=cor(abs(foo[,kk]),abs(bar1[,k]))]
}
r <- cor(abs(foo),abs(bar2))
dt_nonsparse[[model]] <- data.table(model="nonsparse", D=d, trial=trial, factor=nonsparse_active_factors, mean=0, cor=0)
for (k in nonsparse_active_factors) {
kk <- which.max(r[,k])
dt_nonsparse[[model]][factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar2[,k])<1e-2) )]
dt_nonsparse[[model]][factor==k, cor:=cor(abs(foo[,kk]),abs(bar2[,k]))]
}
r <- cor(abs(foo),abs(bar3))
dt_pca[[model]] <- data.table(model="pca", D=d, trial=trial, factor=1:ncol(r), mean=0, cor=0)
for (k in 1:ncol(r)) {
kk <- which.max(r[,k])
dt_pca[[model]][factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar3[,k])<1e-2) )]
dt_pca[[model]][factor==k, cor:=cor(abs(foo[,kk]),abs(bar3[,k]))]
}
}
dt <- rbind(rbindlist(dt_sparse), rbindlist(dt_nonsparse), rbindlist(dt_pca))
p <- ggplot(dt, aes(x=model, y=mean)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Fraction of true zero weights recovered") +
theme_bw() + theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
p <- ggplot(dt, aes(x=model, y=cor)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Correlation with true weights") +
facet_wrap(~D) +
theme_bw()
print(p)
ç
print(p)
r
r
r <- cor(abs(foo),abs(bar1))
r
head(foo[,kk])
head(bar1[,k])
k
kk
kk <- which.max(r[,k])
kk
k
mean( (abs(foo[,kk])<1e-2)==(abs(bar1[,k])<1e-2) )
cor(abs(foo[,kk]),abs(bar1[,k]))
foo[,kk]
head(foo[,kk])
head(bar1[,k])
plot(abs(foo[,kk]),abs(bar1[,k]))
plot(foo[,kk],bar1[,k])
cor(foo[,kk],bar1[,k])
R2 <- calculateVarianceExplained(nonsparse_models[[model]], plotit=F)$R2PerFactor[,"0"]
nonsparse_active_factors <- as.character(which(R2>0.01))
bar2 <- getWeights(nonsparse_models[[model]])[["0"]][,nonsparse_active_factors]
r <- cor(abs(foo),abs(bar2))
k
kk <- which.max(r[,k])
r
kk
k
cor(abs(foo[,kk]),abs(bar2[,k]))
plot(abs(foo[,kk]),abs(bar2[,k]))
k
r[,k]
p <- ggplot(dt, aes(x=model, y=mean)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
facet_wrap(~D) +
labs(x="", y="Fraction of true zero weights recovered") +
theme_bw() + theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
