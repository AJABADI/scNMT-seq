res_dir = '/Users/ricard/CLL/scalability'
library(plyr)
library(ggplot2)
res_dir = '/Users/ricard/CLL/scalability'
D = read.table(paste(res_dir, 'results/D.txt', sep='/'), header=FALSE)
M = read.table(paste(res_dir, 'results/M.txt', sep='/'), header=FALSE)
K = read.table(paste(res_dir, 'results/K.txt', sep='/'), header=FALSE)
N = read.table(paste(res_dir, 'results/N.txt', sep='/'), header=FALSE)
D = cbind(D, 'D')
M = cbind(M, 'M')
K = cbind(K, 'K')
N = cbind(N, 'N')
colnames(D) = c('val', 'time', 'param')
colnames(M) = c('val', 'time', 'param')
colnames(K) = c('val', 'time', 'param')
colnames(N) = c('val', 'time', 'param')
D = ddply(D, c('val', 'param'), summarise, time_mean=mean(time, na.rm=TRUE), sd=sd(time, na.rm=TRUE))
K = ddply(K, c('val', 'param'), summarise, time_mean=mean(time, na.rm=TRUE), sd=sd(time, na.rm=TRUE))
M = ddply(M, c('val', 'param'), summarise, time_mean=mean(time, na.rm=TRUE), sd=sd(time, na.rm=TRUE))
N = ddply(N, c('val', 'param'), summarise, time_mean=mean(time, na.rm=TRUE), sd=sd(time, na.rm=TRUE))
tmp = rbind(D, M)
tmp = rbind(tmp,  K)
all = rbind(tmp,  N)
sd_error_bars = aes(ymax = time_mean + sd, ymin=time_mean - sd)
ggplot(all, aes(x=val, y=time_mean))+
geom_errorbar(sd_error_bars, width=.3,position=position_dodge(width=.9))+
geom_point()+
facet_wrap(~param, scales='free')+
theme_bw() +
geom_smooth(method='lm')
# Script to parse the annotations:
# - Assign a unique id to each region
# - Remove overlapping regions
# - Create a metadata file with all annotations
# - Remove weird chromosomes
# Input:
# - annotation files in BED format
#     Example: chr1    4284766 4284898 ENSMUSG00000025900      0       -
# Output:
# - filtered annotation files in BED4 format
#     Example: chr1    4284766 4284898 genebody_1
suppressMessages(library(stringr))
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(GenomicRanges))
convert_chr_format <- function(chr, to) {
# Function to convert the chr from short to long format and viceversa
# to: "short" or "long"
chr <- as.character(chr)
stopifnot(to %in% c("short","long"))
short_alphabet <- c(1:19,"X","Y","MT")
long_alphabet <- paste("chr",short_alphabet,sep="")
if (to == "short") {
if (all(chr %in% short_alphabet)) {
return(chr)
} else {
stopifnot(all(chr %in% long_alphabet))
names(short_alphabet) <- long_alphabet
return(unname(short_alphabet[chr]))
}
}
if (to == "long") {
if (all(chr %in% long_alphabet)) {
return(chr)
} else {
stopifnot(all(chr %in% short_alphabet))
names(long_alphabet) <- short_alphabet
return(unname(long_alphabet[chr]))
}
}
}
####################
## Define options ##
####################
# I/O
io <- list()
io$in.folder <- "/Users/ricard/data/NMT-seq/features/unfilt"
io$out.folder <- "/Users/ricard/data/NMT-seq/features/filt"
# Options
opts <- list()
opts$anno <- "all"
opts$chr_list <- c(1:19,"X","Y")
opts$min.size <- 25
###############################
## Load the genomic contexts ##
###############################
# The data is accepted in the following formats:
# BED3: chrom, start, end
# BED4: chrom, start, end, name
# BED6: chrom, start, end, name, score, strand
# Select input genomic contexts
if (opts$anno == "all") {
opts$in.files <- list.files(path=io$in.folder, pattern = "\\.bed$")
opts$anno <- sapply(str_split(opts$in.files,"\\."),"[[", 1)
} else {
opts$in.files <- str_c(opts$anno,".bed")
}
data <- list()
data_gr <- list()
for (anno in opts$anno) {
# Load data
print(sprintf("Loading %s",anno))
data[[anno]] <- read.table(str_c(io$in.folder,"/",anno,".bed"), stringsAsFactors=F) %>% tbl_df
if (ncol(data[[anno]]) == 3) {
colnames(data[[anno]]) <- c("chr","start","end")
data[[anno]]$strand = "*"
}
if (ncol(data[[anno]]) == 4) {
colnames(data[[anno]]) <- c("chr","start","end","name")
data[[anno]]$strand = "*"
}
if (ncol(data[[anno]]) == 6)
colnames(data[[anno]]) <- c("chr","start","end","name","score","strand")
# Remove weird chromosoms
data[[anno]] <- data[[anno]] %>% mutate(chr=convert_chr_format(chr, to="short")) %>%
filter(chr %in% opts$chr_list)
# Create GRanges objects
data_gr[[anno]] = makeGRangesFromDataFrame(data[[anno]][,c("chr","start","end","strand")], start.field="start", end.field="end", seqnames.field="chr", strand.field="strand")
# If some annotation is already present, use it, otherwise create a unique id for each site
if ( (ncol(data[[anno]]) == 6) | (ncol(data[[anno]]) == 4) ) {
# If some gene names are duplicated then
if (!sum(duplicated(data[[anno]]$name))==0) {
tmp <- table(factor(data[[anno]]$name, levels=unique(data[[anno]]$name)))
data_gr[[anno]]$name <- unlist(sapply(names(tmp), function(i)
if (tmp[i] > 1) {
str_c(i,"_",1:tmp[i])
} else {
i
}, simplify=FALSE)
)
} else {
data_gr[[anno]]$name <- data[[anno]]$name
}
} else {
data_gr[[anno]]$name <- str_c(anno,"_",1:length(data_gr[[anno]]))
}
}
#####################
## Filter the data ##
#####################
# Remove overlapping ranges
# a <- data_gr[[anno]][!is.na(findOverlaps(data_gr[[anno]], type="within", select="arbitrary", drop.self=T))]
# Remove sites with no strand information that start < end
for (anno in opts$anno) {
if (all(strand(data_gr[[anno]]) == "*"))
data_gr[[anno]] <- data_gr[[anno]][!start(data_gr[[anno]])>=end(data_gr[[anno]])]
}
# Remove sites that are smaller than opts$min.size nucleotides long
for (anno in opts$anno) {
keep.id <- (end(data_gr[[anno]])-start(data_gr[[anno]]) > opts$min.size)
data_gr[[anno]] <- data_gr[[anno]][keep.id]
}
lapply(data_gr,length)
# Generate metadata dataframe by combining all genomic contexts
metadata <- list()
for (anno in opts$anno) {
metadata[[anno]] <- data.frame(chr=seqnames(data_gr[[anno]]), start=start(data_gr[[anno]]),
end=end(data_gr[[anno]]), strand=strand(data_gr[[anno]]),
id=data_gr[[anno]]$name, name=anno)
}
####################################
## Calculate genome-wide coverage ##
####################################
genome_stats <- read.table("/Users/ricard/data/mm10_regulation/mm10.genome",header=F);
colnames(genome_stats) <- c("chr","size")
total_n <- sum(as.numeric(genome_stats$size))
ov <- c()
for (anno in opts$anno) {
anno_nonov <- reduce(data_gr[[anno]])
ov[anno] <- sum(width(anno_nonov))/total_n
print(sprintf("Genome-wide coverage for %s: %0.4f",anno,ov[anno]))
}
#######################
## Calculate overlap ##
#######################
# ov_df <- matrix(nrow=length(opts$anno), ncol=length(opts$anno))
# colnames(ov_df) <- opts$anno
# rownames(ov_df) <- opts$anno
#
# for (i in 1:length(opts$anno)) {
#   for (j in 1:length(opts$anno)) {
#
#     anno1 = data_gr[[opts$anno[i]]]
#     anno2 = data_gr[[opts$anno[j]]]
#
#     # For simplicity, remove overlapping regions within the same dataset
#     anno1 <- reduce(anno1)
#     anno2 <- reduce(anno2)
#
#     # Now I am obtaining only the fraction of nucleotides of the overlaps
#     # I also want the non-overlaps
#     ov = findOverlaps(query=anno1, subject=anno2, type='any')
#     intersect = pintersect(anno1[queryHits(ov),], anno2[subjectHits(ov),])
#
#     # Compute fraction of nucleotides that overlap
#     ov_ij <- sum(width(intersect))/sum(width(anno1))
#     ov_ji <- sum(width(intersect))/sum(width(anno2))
#
#     if (ov_ij > 1.0 | ov_ji > 1.0)
#       stop("Fraction overlap is higher than 1")
#
#     ov_df[i,j] <- ov_ij
#     ov_df[j,i] <- ov_ji
#   }
# }
##################
## Save results ##
##################
# Create output directory
if (!dir.exists(io$out.folder)) { dir.create(io$out.folder) }
# # Generate correlation plot
# col <- colorRampPalette(c("#67001F", "#B2182B", "#D6604D", "#F4A582", "#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE", "#4393C3", "#2166AC", "#053061"))
# png(filename=paste0(io$out.folder,"/overlap.png"))
# corrplot::corrplot(ov_df, method='color', order="original", hclust.method = c("average"),
#                    title="", cl.lim=c(0,1), cl.cex=0.9, tl.cex=1.0, tl.col="black", col=col(200), mar=c(0,0,0,0))
# dev.off()
# Save data
for (anno in opts$anno)
write.table(metadata[[anno]], file=sprintf("%s/%s.bed",io$out.folder,anno), quote=F, sep="\t", row.names=F, col.names=F)
# Save metadata
# write.table(data.table::rbindlist(metadata) %>% tbl_df %>% arrange(chr,start,end),
# file=sprintf("%s/metadata.txt",io$out.folder), quote=F, sep="\t", row.names=F, col.names=F)
