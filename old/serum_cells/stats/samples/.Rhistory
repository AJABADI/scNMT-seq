ls
if (opts$context == "GC") {
opts$cells <- fread(io$in.metadata, sep=" ") %>% .[passQC_met==T,sample]
} else {}
opts$cells <- c("A07","A08","B05")
io <- list()
opts <- list()
# Define whether to look at methylation (CG) or DNA accessibility (GC)
opts$context <- "GC"
opts$imputed <- TRUE
io$in.metadata <- "/Users/ricard/data/NMT-seq/sample_info.txt"
if (opts$context == "GC") {
if (opts$imputed) { print("No imputed data for GC contet"); stop() }
io$in.data <- "/Users/ricard/data/NMT-seq/dna/raw/allele_unspecific/unstranded/"
} else {
if (opts$imputed) {
io$in.data <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/imputed/filt/"
} else {
io$in.data <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/filt/"
}
}
library(data.table)
# library(dplyr)
library(purrr)
library(ggplot2)
source("/Users/ricard/NOMe-seq/Rutils/stats_utils.R")
source("/Users/ricard/NOMe-seq/Rutils/Met_functions.R")
io <- list()
opts <- list()
# Define whether to look at methylation (CG) or DNA accessibility (GC)
opts$context <- "CG"
opts$imputed <- TRUE
io$in.metadata <- "/Users/ricard/data/NMT-seq/sample_info.txt"
if (opts$context == "GC") {
if (opts$imputed) { print("No imputed data for GC contet"); stop() }
io$in.data <- "/Users/ricard/data/NMT-seq/dna/raw/allele_unspecific/unstranded/"
} else {
if (opts$imputed) {
io$in.data <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/imputed/filt/"
} else {
io$in.data <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/filt/"
}
}
# Define which cells to use
opts$cells <- c("A07","A08","B05")
# opts$cells <- "all"
if (opts$cells == "all") {
if (opts$context == "GC") {
opts$cells <- fread(io$in.metadata, sep=" ") %>% .[passQC_dna==T,sample]
} else {
opts$cells <- fread(io$in.metadata, sep=" ") %>% .[passQC_met==T,sample]
}
}
data <- loadMultipleMetData(paste0(io$in.data,opts$cells,".tsv.gz"), osx=T, context=opts$context)
data
tmp <- data[,.(ncpg=.N,rate=mean(rate),var=var(rate)), by="sample"]
View(tmp)
foo <- tmp[,c("sample","ncpg")] %>% setkey(ncpg) %>% .[,col:=ncpg]# %>% .[,sample:=factor(sample,levels=sample)]
p <- barPlot(foo, ylabel="Number of observed CpG sites")
p + scale_fill_gradient(low="green", high="red") +
theme(
legend.position="none",
axis.title.y = element_text(colour="black", size=20, vjust=1.5),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
foo <- tmp[,c("sample","ncpg")] %>% setkey(ncpg) %>% .[,col:=ncpg]# %>% .[,sample:=factor(sample,levels=sample)]
p <- barPlot(foo, ylabel="Number of observed CpG sites") +
# scale_fill_gradient(low="green", high="red") +
theme(
legend.position="none",
axis.title.y = element_text(colour="black", size=20, vjust=1.5),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
print(p)
foo
foo
foo <- tmp[,c("sample","ncpg")] %>% setkey(ncpg)# %>% .[,col:=ncpg] %>% .[,sample:=factor(sample,levels=sample)]
p <- barPlot(foo, ylabel="Number of observed CpG sites") +
# scale_fill_gradient(low="green", high="red") +
theme(
legend.position="none",
axis.title.y = element_text(colour="black", size=20, vjust=1.5),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
print(p)
foo <- tmp[,c("sample","ncpg")] %>% setkey(ncpg)# %>% .[,col:=ncpg] %>% .[,sample:=factor(sample,levels=sample)]
p <- barPlot(foo, ylabel="Number of observed CpG sites") +
# scale_fill_gradient(low="green", high="red") +
theme(
legend.position="none",
axis.title.y = element_text(colour="black", size=20, vjust=1.5),
axis.text.x = element_text(colour="black", size=20, vjust=1.5, hjust=1.0),
axis.ticks.x = element_blank()
)
print(p)
foo <- tmp[,c("sample","ncpg")] %>% setkey(ncpg)# %>% .[,col:=ncpg] %>% .[,sample:=factor(sample,levels=sample)]
p <- barPlot(foo, ylabel="Number of observed CpG sites") +
# scale_fill_gradient(low="green", high="red") +
theme(
legend.position="none",
axis.title.y = element_text(colour="black", size=20),
axis.text.x = element_text(colour="black", angle=90, size=10, vjust=0.5, hjust=1.0),
axis.ticks.x = element_line(colour="black")
)
print(p)
foo <- tmp[,c("sample","ncpg")] %>% setkey(ncpg)# %>% .[,col:=ncpg] %>% .[,sample:=factor(sample,levels=sample)]
p <- barPlot(foo, ylabel="Number of observed CpG sites") +
# scale_fill_gradient(low="green", high="red") +
theme(
legend.position="none",
axis.title.y = element_text(colour="black", size=20),
axis.text.x = element_text(colour="black", angle=90, size=15, vjust=0.5, hjust=1.0),
axis.ticks.x = element_line(colour="black")
)
print(p)
foo <- tmp[,c("sample","rate")] %>% setkey(rate)# %>% .[,col:=rate] %>% .[,sample:=factor(sample,levels=sample)]
p <- barPlot(foo, ylabel="Mean methylation rate")
p + scale_fill_gradient(low="green", high="red") +
theme(
legend.position="none",
axis.title.y = element_text(colour="black", size=18, vjust=1.5),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
foo <- tmp[,c("sample","rate")] %>% setkey(rate)# %>% .[,col:=rate] %>% .[,sample:=factor(sample,levels=sample)]
p <- barPlot(foo, ylabel="Mean methylation rate")
p + scale_fill_gradient(low="green", high="red") +
theme(
legend.position="none",
axis.title.y = element_text(colour="black", size=20),
axis.text.x = element_text(colour="black", angle=90, size=15, vjust=0.5, hjust=1.0),
axis.ticks.x = element_line(colour="black")
)
foo <- tmp[,c("sample","rate","ncpg")]
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# turn the 'e+' into plotmath format
l <- gsub("e", "%*%10^", l)
# return this as an expression
parse(text=l)
}
ggplot(foo, aes(x=rate,y=ncpg)) +
geom_point() +
stat_smooth(method="lm") +
scale_y_continuous(labels=fancy_scientific) +
xlab("Mean methylation rate") + ylab("Number of observed CpGs") +
theme(
# plot.margin = margin(40,40,20,20),
axis.text = element_text(size=rel(1.3), color='black'),
axis.title = element_text(size=rel(1.5), color="black"),
axis.title.y = element_text(margin=margin(0,15,0,0)),
axis.title.x = element_text(margin=margin(15,0,0,0)),
axis.line = element_line(colour="black", size=0.5),
axis.ticks = element_line(colour="black", size=0.5),
legend.position='none',
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
library(data.table)
library(ggplot2)
library(purrr)
library(rhdf5)
io <- list()
opts <- list()
io$in.dir <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/imputed/unfilt"
io$out.dir <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/imputed/filt"
io$in.sample_metadata <- "/Users/ricard/data/NMT-seq/sample_info.txt"
opts$min.threshold_range <- rev(seq(0,0.50,0.05))
opts$max.threshold_range <- 1-opts$min.threshold_range
opts$samples <- "all"
opts$save <- TRUE
opts$min.threshold <- 0.30
opts$max.threshold <- 0.70
if (opts$samples == "all")
opts$samples <- fread(io$in.sample_metadata, header=T, sep=" ") %>% .[passQC_met==T,sample]
library(data.table)
library(purrr)
library(ggplot2)
library(weights)
source("/Users/ricard/NOMe-seq/Rutils/stats_utils.R")
library(data.table)
library(purrr)
library(ggplot2)
library(weights)
source("/Users/ricard/NOMe-seq/Rutils/stats_utils.R")
io <- list()
io$in.dna <- "/Users/ricard/data/NMT-seq/dna/parsed/allele_unspecific/filt/dna_data.rds"
io$in.met <- "/Users/ricard/data/NMT-seq/met/parsed/allele_unspecific/filt/met_data.rds"
opts <- list()
# opts$method <- "pearson"
# opts$weight <- T
opts$min.cov <- 0.5 # minimum coverage per site
opts$fraction.sites <- 0.6 # fraction of sites to keep based on variance
opts$threshold_fdr <- 0.05
opts$min.n <- 1000
# gene-associated contexts
opts$annos1 <- c("prom","prom_cgi","prom_noncgi","prom_active","prom_inactive","prom_poised","genebody")
# regulatory elements
opts$annos2 <- c("active_enhancers","super_enhancers","primed_enhancers","CTCF","p300")
# pluripotency factors
opts$annos3 <- c("Nanog","Oct4")
# others
opts$annos4 <- c("CGI","Tet1","Tet2","DHS","intergenic","IAP")
opts$annos <- c(opts$annos1,opts$annos2,opts$annos3,opts$annos4)
# opts$annos <- opts$annos4
io <- list()
io$in.dna <- "/Users/ricard/data/NMT-seq/dna/parsed/allele_unspecific/filt/dna_data.rds"
io$in.met <- "/Users/ricard/data/NMT-seq/met/parsed/allele_unspecific/filt/met_data.rds"
opts <- list()
# opts$method <- "pearson"
# opts$weight <- T
opts$min.cov <- 0.5 # minimum coverage per site
opts$fraction.sites <- 0.6 # fraction of sites to keep based on variance
opts$threshold_fdr <- 0.05
opts$min.n <- 1000
# gene-associated contexts
opts$annos1 <- c("prom","prom_cgi","prom_noncgi","prom_active","prom_inactive","prom_poised","genebody","cds_genebody","noncds_genebody")
# regulatory elements
opts$annos2 <- c("active_enhancers","super_enhancers","primed_enhancers","CTCF","p300")
# pluripotency factors
opts$annos3 <- c("Nanog","Oct4")
# others
opts$annos4 <- c("CGI","Tet1","Tet2","DHS","intergenic","IAP")
opts$annos <- c(opts$annos1,opts$annos2,opts$annos3,opts$annos4)
# opts$annos <- opts$annos4
met <- readRDS(io$in.met) %>% as.data.table %>% .[anno %in% opts$annos] %>% .[,anno:=factor(anno, levels=opts$annos)]
dna <- readRDS(io$in.dna) %>% as.data.table %>% .[anno %in% opts$annos] %>% .[,anno:=factor(anno, levels=opts$annos)]
# Intersect the two data sets
join <- merge(met[,c("sample","id","anno","rate","weight")] %>% setnames(c("rate","weight"),c("met_rate","met_weight")),
dna[,c("sample","id","anno","rate","weight")] %>% setnames(c("rate","weight"),c("dna_rate","dna_weight")),
by=c("sample","id","anno"))
# Filter based on coverage
Nsamples <- length(unique(join$sample))
keep_id1 <- join[, .(coverage=.N/Nsamples), by=c("id","anno")] %>% .[coverage>=opts$min.cov,id]
join <- join[id%in%keep_id1]
# Filter based on variability (separately for each feature)
# keep_id2 <- join[, .(met_var=wtd.var(met_rate,met_weight), dna_var=wtd.var(dna_rate,dna_weight)), by=c("id","anno")] %>% .[,var:=dna_var*met_var] %>% setorder(-var) %>% head(n=nrow(.)*opts$fraction.sites) %>% .$id
# join <- join[id%in%keep_id2]
keep_id2 <- join[, .(met_var=wtd.var(met_rate,met_weight), dna_var=wtd.var(dna_rate,dna_weight)), by=c("id","anno")] %>%
.[met_var>0 & dna_var>0] %>% .[,var:=dna_var*met_var] %>%
split(.$anno) %>% map(function(x) setorder(x,-var)) %>% map(function(x) head(x,n=nrow(x)*opts$fraction.sites) %>% .$id)
join <- map2(join %>% split(.$anno), keep_id2, function(x,y) x[id%in%y]) %>% rbindlist
# Filter annotations that have less than opts$min.n elements
keep_anno <- join[,.(asd=length(unique(id))),by="anno"] %>% .[asd>opts$min.n,anno]
join <- join[anno%in%keep_anno] %>% .[,anno:=drop.levels(anno)]
print(unlist(join %>% split(.$anno) %>% map(function(x) length(unique(x$id)))))
?int
?as.numeric
library(data.table)
library(ggplot2)
library(purrr)
library(rhdf5)
io <- list()
opts <- list()
io$in.dir <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/imputed/unfilt"
io$out.dir <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/imputed/filt"
io$in.sample_metadata <- "/Users/ricard/data/NMT-seq/sample_info.txt"
opts$min.threshold <- 0.30
opts$max.threshold <- 0.70
opts$binarise <- TRUE
opts$samples <- "all"
if (opts$samples == "all")
opts$samples <- fread(io$in.sample_metadata, header=T, sep=" ") %>% .[passQC_met==T,sample]
opts$samples <- "A02"
sample="A03"
infile <- sprintf("%s/%s.h5",io$in.dir,sample)
outfile <- sprintf("%s/%s.tsv",io$out.dir,sample)
data <- data.table(chr=h5read(infile,"chromo"), pos=h5read(infile,"pos"), value=h5read(infile,"value"))
data <- data[value<=opts$min.threshold | value>=opts$max.threshold]
data
opts$binarise
data[,value:=round(value)]
data
data[,value:=as.integer(value*100)]
data
io <- list()
opts <- list()
io$in.dir <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/imputed/unfilt"
io$out.dir <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific/unstranded/imputed/filt"
io$in.sample_metadata <- "/Users/ricard/data/NMT-seq/sample_info.txt"
opts$min.threshold <- 0.30
opts$max.threshold <- 0.70
opts$binarise <- TRUE
opts$samples <- "all"
if (opts$samples == "all")
opts$samples <- fread(io$in.sample_metadata, header=T, sep=" ") %>% .[passQC_met==T,sample]
opts$samples
library(data.table)
library(purrr)
library(ggplot2)
## Define I/O ##
io <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$in.metadata <- "/Users/ricard/data/NMT-seq/sample_info.txt"
# io$in.data <- "/Users/ricard/data/NMT-seq/met/raw/allele_unspecific"
io$in.data <- "/Users/ricard/data/NMT-seq/acc/raw/allele_unspecific"
io$stats <- "/Users/ricard/NMT-seq/stats/samples/sample_stats.txt"
io$outdir <- "/Users/ricard/NMT-seq/stats/samples/out"
} else {
io$in.metadata <- "/hps/nobackup/stegle/users/ricard/NMT-seq/sample_info.txt"
# io$in.data <- "/hps/nobackup/stegle/users/ricard/NMT-seq/met/raw/allele_unspecific/filtered"
io$in.data <- "/hps/nobackup/stegle/users/ricard/NMT-seq/acc/raw/allele_unspecific/filtered"
io$stats <- "/homes/ricard/NOME-seq/stats/samples/out/sample_stats.txt"
io$outdir <- "/homes/ricard/NOME-seq/stats/samples/out"
}
## Define options ##
opts <- list()
# Define which context to use
opts$context <- "GC"
# Define which cells to use
if (opts$context == "CG") {
opts$cells <- fread(io$in.metadata) %>% .[pass_metQC==T, sample]
} else {
opts$cells <- fread(io$in.metadata) %>% .[pass_accQC==T, sample]
}
metadata <- fread(io$in.metadata) %>% .[sample %in% opts$cells] %>%
merge(fread(io$stats)[context==opts$context], by="sample")
outfile <- paste0(io$outdir,"/",opts$context,"_cor.txt")
if (file.exists(outfile)) {
r <- read.table(outfile)
# colnames(r) <- sub(pattern="X", replacement="", colnames(r)) # ????????
} else {
r <- matrix(nr=length(opts$cells), nc=length(opts$cells)); diag(r) <- 1
# n <- matrix(nr=length(opts$cells), nc=length(opts$cells)); diag(r) <- 1
rownames(r) <- opts$cells; colnames(r) <- opts$cells
for (i in 1:length(opts$cells)) {
print(sprintf("Calculating correlations for %s (%d/%d)...",opts$cells[i], i, length(opts$cells)))
data_i <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.data,opts$cells[i])) %>% setnames(c("chr","pos","rate"))
for (j in i:length(opts$cells)) {
if (i!=j) {
data_j <- fread(sprintf("zcat < %s/%s.tsv.gz",io$in.data,opts$cells[j])) %>% setnames(c("chr","pos","rate"))
data <- merge(data_i,data_j, by=c("chr","pos"))
r[i,j] <- r[j,i] <- cor(data$rate.x, data$rate.y)
# n[i,j] <- n[j,i] <- nrow(data)
}
}
}
write.table(r, file=outfile, sep="\t", row.names=T, col.names=T, quote=F)
}
r <- r[opts$cells,opts$cells]
View(r)
annos <- data.frame(
row.names = metadata$sample,
culture=metadata$culture,
mean=metadata$mean
)
annos <- annos[order(annos$mean),]
pdf(file=paste0(io$outdir,"/cor_heatmap.pdf"), height = 6, width=9)
pheatmap::pheatmap(r[rownames(annos),rownames(annos)], cluster_rows=F, cluster_cols=F, show_rownames=F, show_colnames=F, annotation_col=annos)
dev.off()
pdf(file=paste0(io$outdir,"/cor_",opts$context,"_heatmap.pdf"), height = 6, width=9)
dev.off()
annos <- data.frame(
row.names = metadata$sample,
culture=metadata$culture,
mean=metadata$mean
)
annos <- annos[order(annos$mean),]
pdf(file=paste0(io$outdir,"/cor_",opts$context,"_heatmap.pdf"), height = 6, width=9)
pheatmap::pheatmap(r[rownames(annos),rownames(annos)], cluster_rows=F, cluster_cols=F, show_rownames=F, show_colnames=F, annotation_col=annos)
dev.off()
