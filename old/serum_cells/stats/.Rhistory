data <-  rbind(data[strand == "+"][, start := end-500 ],
data[strand == "-"][, end := end+500])
}
fwrite(data, file=paste0(outdir,"/",feature,"_short.bed"), sep="\t", col.names=F, row.names=F)
}
library(data.table)
features1 <- c("CGI","Stat3","CTCF","Tet1","DHS","Tet2","Esrrb","active_enhancers","Klf4","c-myc","Nanog","Oct4","p300","super_enhancers","Sox2","primed_enhancers")
features2 <- c("prom_active","prom","prom_cgi","prom_inactive","prom_noncgi","prom_poised")
features <- c(features1,features2)
indir <- "/Users/ricard/data/NMT-seq/features/unfilt"
outdir <- "/Users/ricard/data/NMT-seq/features/unfilt/short"
# list.files(indir)
for (feature in features) {
# Load data
print(sprintf("Loading %s",feature))
data <- fread(paste0(indir,"/",feature,".bed"), stringsAsFactors=F)
if (ncol(data) == 3) {
colnames(data) <- c("chr","start","end")
}
if (ncol(data) == 4) {
colnames(data) <- c("chr","start","end","id")
}
if (ncol(data) == 6) {
colnames(data) <- c("chr","start","end","id","score","strand")
}
if (feature %in% features1) {
center <- round((data$end + data$start)/2)
length <- abs(data$end-data$start)
data$start <- ifelse(length>1000,center-500,data$start)
data$end <- ifelse(length>1000,center+500,data$end)
}
if (feature %in% features2) {
data <-  rbind(data[strand == "+"][, start := end-500 ],
data[strand == "-"][, end := start+500])
}
fwrite(data, file=paste0(outdir,"/",feature,"_short.bed"), sep="\t", col.names=F, row.names=F)
}
# Script to parse the annotations:
# - Assign a unique id to each region
# - Remove overlapping regions
# - Create a metadata file with all annotations
# - Remove weird chromosomes
# Input:
# - annotation files in BED format
#     Example: chr1    4284766 4284898 ENSMUSG00000025900      0       -
# Output:
# - filtered annotation files in BED4 format
#     Example: chr1    4284766 4284898 genebody_1
library(stringr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(GenomicRanges)
####################
## Define options ##
####################
# I/O
io <- list()
io$in.folder <- "/Users/ricard/data/NMT-seq/features/unfilt"
io$out.folder <- "/Users/ricard/data/NMT-seq/features/filt"
# Options
opts <- list()
opts$anno <- "all"
opts$chr_list <- str_c("chr",c(1:19,"X","Y"))
opts$min.size <- 10
###############################
## Load the genomic contexts ##
###############################
# The data is accepted in the following formats:
# BED3: chrom, start, end
# BED4: chrom, start, end, name
# BED6: chrom, start, end, name, score, strand
# Select input genomic contexts
if (opts$anno == "all") {
opts$in.files <- list.files(path=io$in.folder, pattern = "\\.bed$")
opts$anno <- sapply(str_split(opts$in.files,"\\."),"[[", 1)
} else {
opts$in.files <- str_c(opts$anno,".bed")
}
data <- list()
data_gr <- list()
for (anno in opts$anno) {
# Load data
print(sprintf("Loading %s",anno))
data[[anno]] <- read.table(str_c(io$in.folder,"/",anno,".bed"), stringsAsFactors=F) %>% tbl_df
if (ncol(data[[anno]]) == 3) {
colnames(data[[anno]]) <- c("chr","start","end")
data[[anno]]$strand = "*"
}
if (ncol(data[[anno]]) == 4) {
colnames(data[[anno]]) <- c("chr","start","end","name")
data[[anno]]$strand = "*"
}
if (ncol(data[[anno]]) == 6)
colnames(data[[anno]]) <- c("chr","start","end","name","score","strand")
# Remove weird chromosoms
data[[anno]] <- data[[anno]] %>% filter(chr %in% opts$chr_list)
# Create GRanges objects
data_gr[[anno]] = makeGRangesFromDataFrame(data[[anno]][,c("chr","start","end","strand")], start.field="start", end.field="end", seqnames.field="chr", strand.field="strand")
# If some annotation is already present, use it, otherwise create a unique id for each site
if ( (ncol(data[[anno]]) == 6) | (ncol(data[[anno]]) == 4) ) {
# If some gene names are duplicated then
if (!sum(duplicated(data[[anno]]$name))==0) {
tmp <- table(factor(data[[anno]]$name, levels=unique(data[[anno]]$name)))
data_gr[[anno]]$name <- unlist(sapply(names(tmp), function(i)
if (tmp[i] > 1) {
str_c(i,"_",1:tmp[i])
} else {
i
}, simplify=FALSE)
)
} else {
data_gr[[anno]]$name <- data[[anno]]$name
}
} else {
data_gr[[anno]]$name <- str_c(anno,"_",1:length(data_gr[[anno]]))
}
}
#####################
## Filter the data ##
#####################
# Remove overlapping ranges
# a <- data_gr[[anno]][!is.na(findOverlaps(data_gr[[anno]], type="within", select="arbitrary", drop.self=T))]
# Remove sites with no strand information that start < end
for (anno in opts$anno) {
if (all(strand(data_gr[[anno]]) == "*"))
data_gr[[anno]] <- data_gr[[anno]][!start(data_gr[[anno]])>=end(data_gr[[anno]])]
}
# Remove sites that are smaller than opts$min.size nucleotides long
for (anno in opts$anno) {
keep.id <- (end(data_gr[[anno]])-start(data_gr[[anno]]) > opts$min.size)
data_gr[[anno]] <- data_gr[[anno]][keep.id]
}
lapply(data_gr,length)
# Generate metadata dataframe by combining all genomic contexts
metadata <- list()
for (anno in opts$anno) {
metadata[[anno]] <- data.frame(chr=seqnames(data_gr[[anno]]), start=start(data_gr[[anno]]),
end=end(data_gr[[anno]]), strand=strand(data_gr[[anno]]),
id=data_gr[[anno]]$name, name=anno)
}
####################################
## Calculate genome-wide coverage ##
####################################
genome_stats <- read.table("/Users/ricard/data/mm10_regulation/mm10.genome",header=F);
colnames(genome_stats) <- c("chr","size")
total_n <- sum(as.numeric(genome_stats$size))
ov <- c()
for (anno in opts$anno) {
anno_nonov <- reduce(data_gr[[anno]])
ov[anno] <- sum(width(anno_nonov))/total_n
print(sprintf("Genome-wide coverage for %s: %0.4f",anno,ov[anno]))
}
#######################
## Calculate overlap ##
#######################
ov_df <- matrix(nrow=length(opts$anno), ncol=length(opts$anno))
colnames(ov_df) <- opts$anno
rownames(ov_df) <- opts$anno
for (i in 1:length(opts$anno)) {
for (j in 1:length(opts$anno)) {
anno1 = data_gr[[opts$anno[i]]]
anno2 = data_gr[[opts$anno[j]]]
# For simplicity, remove overlapping regions within the same dataset
anno1 <- reduce(anno1)
anno2 <- reduce(anno2)
# Now I am obtaining only the fraction of nucleotides of the overlaps
# I also want the non-overlaps
ov = findOverlaps(query=anno1, subject=anno2, type='any')
intersect = pintersect(anno1[queryHits(ov),], anno2[subjectHits(ov),])
# Compute fraction of nucleotides that overlap
ov_ij <- sum(width(intersect))/sum(width(anno1))
ov_ji <- sum(width(intersect))/sum(width(anno2))
if (ov_ij > 1.0 | ov_ji > 1.0)
stop("Fraction overlap is higher than 1")
ov_df[i,j] <- ov_ij
ov_df[j,i] <- ov_ji
}
}
library(data.table)
library(purrr)
library(ggplot2)
library(BSgenome.Mmusculus.UCSC.mm10)
library(seqinr)
source("/Users/ricard/NOMe-seq/Rutils/stats_utils.R")
io <- list()
opts <- list()
io$in.features_dir <- "/Users/ricard/data/NMT-seq/features/filt"
io$in.dna_dir <- "/Users/ricard/data/mm10_sequence"
io$in.data <- "/Users/ricard/data/NMT-seq/met/raw/allele_inspecific/unstranded/"
# Define whether to look at methylation (CG) or DNA accessibility (GC)
opts$cg_or_gc <- "CG"
# Define whcih annotations to look at
opts$annotations <- c("CGI","CTCF","DHS","Esrrb","IAP","Klf4","Nanog","Oct4","Sox2","Stat3","Tet1","Tet2","active_enhancers","c_myc","genebody","intergenic","p300","primed_enhancers","prom","prom_active","prom_cgi","prom_inactive","prom_noncgi","prom_poised","prom_short","super_enhancers")
features <- paste(io$in.features_dir,list.files(io$in.features_dir),sep="/") %>% map(~ fread(.x, sep="\t", verbose=F, stringsAsFactors=F, showProgress=F)) %>% rbindlist %>% setnames(c("chr","start","end","strand","id","feature"))
View(features)
paste(io$in.features_dir,opts$annotations,sep="/")
paste0(paste(io$in.features_dir,opts$annotations,sep="/"),".bed")
features <- paste0(paste(io$in.features_dir,opts$annotations,sep="/"),".bed") %>% map(~ fread(.x, sep="\t", verbose=F, stringsAsFactors=F, showProgress=F)) %>% rbindlist %>% setnames(c("chr","start","end","strand","id","feature"))
View(features)
p <- boxPlot(features[,length:=log2(end-start)] %>% .[,c("feature","length")], ylabel="Length (in bp, log2 scale)")
p + coord_flip() +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5)),
axis.text.y = element_text(colour="black",size=rel(1.1)),
axis.title.x = element_text(colour="black",size=15),
axis.ticks.y = element_line(colour="black", size=rel(0.8)),
legend.position="none"
)
log2(5)
4**2
5**2
tmp <- features[, .N, by="feature"]
p <- barPlot(tmp, ylabel="Number of features")
p + scale_fill_gradient(low="green", high="red") +
ggtitle("Number of features") +
coord_flip() +
theme(
legend.position="none",
plot.title = element_text(size=20),
axis.text.y = element_text(colour="black", size=11),
axis.text.x = element_text(size=11),
axis.title.x = element_blank(),
axis.ticks.x = element_line()
)
tmp
library(weights)
library(dplyr)
library(tidyr)
library(ggplot2)
source("/Users/ricard/NOMe-seq/Rutils/stats_utils.R")
opts <- list()
# Define whether to look at methylation (CG) or DNA accessibility (GC)
opts$cg_or_gc <- "GC"
# Define which annotations to use and the order for plotting
# gene-associated contexts
opts$annos1 <- c("prom","prom_cgi","prom_noncgi","prom_active","prom_inactive","prom_poised","genebody")
# regulatory elements
opts$annos2 <- c("active_enhancers","super_enhancers","primed_enhancers","CTCF","p300")
# pluripotency factors
opts$annos3 <- c("Esrrb","Klf4","Nanog","Oct4","Sox2","Stat3","c_myc")
# others
opts$annos4 <- c("Tet1","Tet2")
# controls
opts$annos5 <- c("intergenic","IAP","DHS","CGI")
opts$annos <- c(opts$annos1,opts$annos2,opts$annos3,opts$annos4,opts$annos5)
if (opts$cg_or_gc=="CG") {
data <- readRDS("/Users/ricard/data/NMT-seq/met/parsed/filt/met_data.rds") %>%
filter(anno %in% opts$annos) %>% mutate(anno=factor(anno, levels=opts$annos))
} else if (opts$cg_or_gc=="GC") {
data <- readRDS("/Users/ricard/data/NMT-seq/dna/parsed/filt/dna_data.rds") %>%
filter(anno %in% opts$annos) %>% mutate(anno=factor(anno, levels=opts$annos))
}
data <- readRDS("/Users/ricard/data/NMT-seq/met/parsed/allele_unspecific/filt/met_data.rds") %>%
filter(anno %in% opts$annos) %>% mutate(anno=factor(anno, levels=opts$annos))
data <- readRDS("/Users/ricard/data/NMT-seq/met/parsed/allele_unspecific/filt/met_data.rds") %>%
filter(anno %in% opts$annos) %>% mutate(anno=factor(anno, levels=opts$annos))
data <- readRDS("/Users/ricard/data/NMT-seq/dna/parsed/allele_unspecific/filt/dna_data.rds") %>%
filter(anno %in% opts$annos) %>% mutate(anno=factor(anno, levels=opts$annos))
sample_stats <- data %>% group_by(sample) %>% stats %>% ungroup
tmp <- sample_stats[,c("sample","weight")] %>% mutate(weight_col=weight) %>% arrange(weight) %>% mutate(sample=factor(sample,levels=sample))
p <- barPlot(tmp, ylabel="Library size")
p + scale_fill_gradient(low="green", high="red") +
theme(
legend.position="none",
axis.title.y = element_text(colour="black", size=20, vjust=1.5),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
View(tmp)
tmp <- sample_stats[,c("sample","wtd_mean")] %>% mutate(col=wtd_mean) %>% arrange(wtd_mean) %>% mutate(sample=factor(sample,levels=sample))
p <- barPlot(tmp, ylabel="(Weighted) mean methylation rate (%)")
p + scale_fill_gradient(low="green", high="red") +
theme(
legend.position="none",
axis.title.y = element_text(colour="black", size=18, vjust=1.5),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
anno_stats <- data %>% group_by(anno,id) %>% stats %>% ungroup
tmp <- anno_stats %>% group_by(anno) %>% summarise(n=n()) %>% mutate(fill=anno)
p <- barPlot(tmp, ylabel="Number of features")
p + coord_flip() +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5)),
axis.text.y = element_text(colour="black",size=rel(1.1)),
axis.title.x = element_text(colour="black",size=15),
axis.ticks.y = element_line(colour="black", size=rel(0.8)),
legend.position="none"
)
p <- boxPlot(anno_stats[,c("anno","wtd_mean")], ylabel="(Weighted) mean methylation rate (%)")
p + coord_flip() +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5)),
axis.text.y = element_text(colour="black",size=rel(1.1)),
axis.title.x = element_text(colour="black",size=15),
axis.ticks.y = element_line(colour="black", size=rel(0.8)),
legend.position="none"
)
hvs <- data %>% group_by(anno,id) %>% summarise(wtd_var=wtd.var(rate,weight))
p <- boxPlot(hvs[,c("anno","wtd_var")], ylabel="(Weighted) variance on the methylation rate")
p + coord_flip() +
ylim(0,1500) +
theme(
legend.position="none",
axis.title.x = element_text(colour="black", size=18, vjust=1.5),
axis.text.y = element_text(colour="black", size=14, vjust=1.5)
)
p + coord_flip() +
ylim(0,1500) +
theme(
legend.position="none",
axis.title.x = element_text(colour="black", size=18, vjust=1.5),
axis.text.y = element_text(colour="black", size=14, vjust=1.5)
)
hvs <- data %>% group_by(anno,id) %>% summarise(wtd_var=wtd.var(rate,weight))
p <- boxPlot(hvs[,c("anno","wtd_var")], ylabel="(Weighted) variance on the methylation rate")
p + coord_flip() +
ylim(0,1500) +
theme(
legend.position="none",
axis.title.x = element_text(colour="black", size=18),
axis.text.y = element_text(colour="black", size=14)
)
p
p <- boxPlot(hvs[,c("anno","wtd_var")], ylabel="(Weighted) variance on the methylation rate")
p + coord_flip() +
theme(
legend.position="none",
axis.title.x = element_text(colour="black", size=18),
axis.text.y = element_text(colour="black", size=14)
)
p + coord_flip() +
theme(
legend.position="none",
axis.title.x = element_text(colour="black", size=18),
axis.text.y = element_text(colour="black", size=14)
)
data <- readRDS("/Users/ricard/data/NMT-seq/met/parsed/allele_unspecific/filt/met_data.rds")
unique(data$anno)
grep('dummy'data$id)
grep('dummy',data$id)
data[50620,]
View(filter(data,anno=="c_myc"))
filter(data,anno=="c_myc")
filter(data,anno=="c_myc") %>% group_by(id) %>% summarise(n=n())
View(filter(data,anno=="c_myc") %>% group_by(id) %>% summarise(n=n()))
data
library(weights)
library(dplyr)
library(tidyr)
library(ggplot2)
source("/Users/ricard/NOMe-seq/Rutils/stats_utils.R")
opts <- list()
# Define whether to look at methylation (CG) or DNA accessibility (GC)
opts$cg_or_gc <- "GC"
# Define which annotations to use and the order for plotting
# gene-associated contexts
opts$annos1 <- c("prom","prom_cgi","prom_noncgi","prom_active","prom_inactive","prom_poised","genebody")
# regulatory elements
opts$annos2 <- c("active_enhancers","super_enhancers","primed_enhancers","CTCF","p300")
# pluripotency factors
opts$annos3 <- c("Nanog","Oct4")
# others
opts$annos4 <- c("Tet1","Tet2")
# controls
opts$annos5 <- c("intergenic","IAP","DHS","CGI")
opts$annos <- c(opts$annos1,opts$annos2,opts$annos3,opts$annos4,opts$annos5)
if (opts$cg_or_gc=="CG") {
data <- readRDS("/Users/ricard/data/NMT-seq/met/parsed/allele_unspecific/filt/met_data.rds") %>%
filter(anno %in% opts$annos) %>% mutate(anno=factor(anno, levels=opts$annos))
} else if (opts$cg_or_gc=="GC") {
data <- readRDS("/Users/ricard/data/NMT-seq/dna/parsed/allele_unspecific/filt/dna_data.rds") %>%
filter(anno %in% opts$annos) %>% mutate(anno=factor(anno, levels=opts$annos))
}
anno_stats <- data %>% group_by(anno,id) %>% stats %>% ungroup
tmp <- anno_stats %>% group_by(anno) %>% summarise(n=n()) %>% mutate(fill=anno)
p <- barPlot(tmp, ylabel="Number of features")
p + coord_flip() +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5)),
axis.text.y = element_text(colour="black",size=rel(1.1)),
axis.title.x = element_text(colour="black",size=15),
axis.ticks.y = element_line(colour="black", size=rel(0.8)),
legend.position="none"
)
p <- boxPlot(anno_stats[,c("anno","wtd_mean")], ylabel="(Weighted) mean methylation rate (%)")
p + coord_flip() +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5)),
axis.text.y = element_text(colour="black",size=rel(1.1)),
axis.title.x = element_text(colour="black",size=15),
axis.ticks.y = element_line(colour="black", size=rel(0.8)),
legend.position="none"
)
p + coord_flip() +
scale_y_continuous(limits=c(15,75)),
p <- boxPlot(anno_stats[,c("anno","wtd_mean")], ylabel="(Weighted) mean methylation rate (%)")
p + coord_flip() +
scale_y_continuous(limits=c(15,75)) +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5)),
axis.text.y = element_text(colour="black",size=rel(1.1)),
axis.title.x = element_text(colour="black",size=15),
axis.ticks.y = element_line(colour="black", size=rel(0.8)),
legend.position="none"
)
p <- boxPlot(anno_stats[,c("anno","wtd_mean")], ylabel="(Weighted) mean methylation rate (%)")
p + coord_flip() +
scale_y_continuous(limits=c(15,65)) +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5)),
axis.text.y = element_text(colour="black",size=rel(1.1)),
axis.title.x = element_text(colour="black",size=15),
axis.ticks.y = element_line(colour="black", size=rel(0.8)),
legend.position="none"
)
p <- boxPlot(anno_stats[,c("anno","wtd_mean")], ylabel="(Weighted) mean methylation rate (%)")
p + coord_flip() +
scale_y_continuous(limits=c(17,60)) +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5)),
axis.text.y = element_text(colour="black",size=rel(1.1)),
axis.title.x = element_text(colour="black",size=15),
axis.ticks.y = element_line(colour="black", size=rel(0.8)),
legend.position="none"
)
p <- boxPlot(anno_stats[,c("anno","wtd_mean")], ylabel="(Weighted) mean methylation rate (%)")
p + coord_flip() +
scale_y_continuous(limits=c(18,55)) +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5)),
axis.text.y = element_text(colour="black",size=rel(1.1)),
axis.title.x = element_text(colour="black",size=15),
axis.ticks.y = element_line(colour="black", size=rel(0.8)),
legend.position="none"
)
p <- boxPlot(anno_stats[,c("anno","wtd_mean")], ylabel="(Weighted) mean methylation rate (%)")
p + coord_flip() +
scale_y_continuous(limits=c(19,51)) +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5)),
axis.text.y = element_text(colour="black",size=rel(1.1)),
axis.title.x = element_text(colour="black",size=15),
axis.ticks.y = element_line(colour="black", size=rel(0.8)),
legend.position="none"
)
hvs <- data %>% group_by(anno,id) %>% summarise(wtd_var=wtd.var(rate,weight))
p <- boxPlot(hvs[,c("anno","wtd_var")], ylabel="(Weighted) variance on the methylation rate")
p + coord_flip() +
theme(
legend.position="none",
axis.title.x = element_text(colour="black", size=18),
axis.text.y = element_text(colour="black", size=14)
)
p <- boxPlot(hvs[,c("anno","wtd_var")], ylabel="(Weighted) variance on the methylation rate")
p + coord_flip() +
scale_y_continuous(limits=c(0,1000)) +
theme(
legend.position="none",
axis.title.x = element_text(colour="black", size=18),
axis.text.y = element_text(colour="black", size=14)
)
p <- boxPlot(hvs[,c("anno","wtd_var")], ylabel="(Weighted) variance on the methylation rate")
p + coord_flip() +
scale_y_continuous(limits=c(0,1000)) +
theme(
legend.position="none",
axis.title.x = element_text(colour="black", size=18),
axis.text.y = element_text(colour="black", size=14),
axis.ticks.x=element_line(size=1)
)
p <- boxPlot(hvs[,c("anno","wtd_var")], ylabel="(Weighted) variance on the methylation rate")
p + coord_flip() +
scale_y_continuous(limits=c(0,1000)) +
theme(
legend.position="none",
axis.title.x = element_text(colour="black", size=18),
axis.text.y = element_text(colour="black", size=14),
axis.ticks.y=element_line(size=0.5)
)
opts$annos <- paste0(opts$annos,"_short")
opts$annos
if (opts$cg_or_gc=="CG") {
data <- readRDS("/Users/ricard/data/NMT-seq/met/parsed/allele_unspecific/filt/met_data.rds") %>%
filter(anno %in% opts$annos) %>% mutate(anno=factor(anno, levels=opts$annos))
} else if (opts$cg_or_gc=="GC") {
data <- readRDS("/Users/ricard/data/NMT-seq/dna/parsed/allele_unspecific/filt/dna_data.rds") %>%
filter(anno %in% opts$annos) %>% mutate(anno=factor(anno, levels=opts$annos))
}
data
anno_stats <- data %>% group_by(anno,id) %>% stats %>% ungroup
tmp <- anno_stats %>% group_by(anno) %>% summarise(n=n()) %>% mutate(fill=anno)
p <- barPlot(tmp, ylabel="Number of features")
p + coord_flip() +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5)),
axis.text.y = element_text(colour="black",size=rel(1.1)),
axis.title.x = element_text(colour="black",size=15),
axis.ticks.y = element_line(colour="black", size=rel(0.8)),
legend.position="none"
)
p <- boxPlot(anno_stats[,c("anno","wtd_mean")], ylabel="(Weighted) mean methylation rate (%)")
p + coord_flip() +
scale_y_continuous(limits=c(19,51)) +
theme(
axis.text.x = element_text(colour="black",size=rel(1.5)),
axis.text.y = element_text(colour="black",size=rel(1.1)),
axis.title.x = element_text(colour="black",size=15),
axis.ticks.y = element_line(colour="black", size=rel(0.8)),
legend.position="none"
)
