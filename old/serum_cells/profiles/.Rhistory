ov
ov_rna <- merge(rna,ov,by="gene",allow.cartesian=TRUE)
ov_rna
metrna_list[[ann]] <- merge(ov_rna,met_tmp,by=c("sample","id")) %>% .[,c("sample","id","gene","anno","expr","rate","weight","m")]
metrna_list[[ann]]
opts$annos
feature_metadata <- fread("/Users/ricard/data/NMT-seq/features/metadata.txt", header=F) %>% setNames(c("chr","start","end","strand","id","anno")) %>% .[anno%in%opts$annos]
metrna_list <- list()
for (ann in opts$annos) {
# Subset corresponding anno
met_tmp <- met[anno==ann,] %>% .[,chr:=NULL]
# Feature not associated with genes
if (all(grepl("ENSM",unique(met_tmp$id))==FALSE)) {
# extract coordiantes for methylation sites and for genes
feature_metadata_tmp <- feature_metadata[anno==ann,c("chr","start","end","id")] %>% setkey(chr,start,end)
gene_metadata_tmp <- gene_metadata[,c("chr","start","end","symbol")] %>% setnames("symbol","gene") %>% .[,c("start","end"):=list(start-opts$gene_window,end+opts$gene_window)] %>% setkey(chr,start,end)
# do the overlap
ov <- foverlaps(feature_metadata_tmp, gene_metadata_tmp, nomatch=0) %>% .[,c("gene","id")]
# add expression levels
ov_rna <- merge(rna,ov,by="gene",allow.cartesian=TRUE)
# merge with methylation data
metrna_list[[ann]] <- merge(ov_rna,met_tmp,by=c("sample","id")) %>% .[,c("sample","id","gene","anno","expr","rate","weight","m")]
}
# Feature associated with genes
else if (all(grepl("ENSM",unique(met_tmp$id))==T)) {
gene_metadata_tmp <- gene_metadata[,c("ens_id","symbol")] %>% setnames(c("ens_id","symbol"),c("id","gene"))
met_tmp <- merge(met_tmp, gene_metadata_tmp, by="id")
metrna_list[[ann]] <- merge(rna,met_tmp,by=c("sample","gene")) %>% .[,c("sample","id","gene","anno","expr","rate","weight","m")]
}
}
unique(metrna$anno)
metrna <- rbindlist(metrna_list)
ann="iAP"
ann="IAP"
(all(grepl("ENSM",unique(met_tmp$id))==FALSE))
met_tmp <- met[anno==ann,] %>% .[,chr:=NULL]
met_tmp
met_tmp
(all(grepl("ENSM",unique(met_tmp$id))==FALSE))
unique(metrna$anno)
## Remove genes/site with constant expression
keep_genes1 <- metrna[,.(var=var(expr)), by="gene"] %>% .[var>0,] %>% .[["gene"]]
keep_sites1 <- metrna[,.(wtd_var=wtd.var(rate,weight)),by="id"] %>% .[wtd_var>0,] %>% .[["id"]]
metrna <- metrna[gene %in% keep_genes1 & id %in% keep_sites1]
## Extract highly variable genes/sites
keep_genes2 <- metrna[,.(var=var(expr)),by="gene"] %>% setorder(-var) %>% head(n=nrow(.)*opts$fraction.genes) %>% .[["gene"]]
keep_sites2 <- metrna[,.(var=wtd.var(rate,weight)), by=c("id","anno")] %>% split(.$anno) %>% map(function(x) setorder(x,-var)) %>% map(function(x) head(x,n=nrow(x)*opts$fraction.sites) %>% .$id)
metrna <- metrna[gene %in% keep_genes2] %>% split(.$anno) %>% map2(keep_sites2, function(x,y) x[id%in%y]) %>% rbindlist
## Filter genes with low cellular detection rate and sites with low coverage
nsamples <- length(unique(metrna$sample))
keep_genes3 <- metrna[,.(cdr=sum(expr>0)/.N), by="gene"] %>% .[cdr>opts$min.cdr,] %>% .[["gene"]]
keep_sites3 <- metrna[,.(cov=.N/nsamples), by=c("id","anno")] %>% split(.$anno) %>% map(function(x) x[cov>opts$min.coverage] %>% .$id)
metrna <- metrna[gene %in% keep_genes3] %>% split(.$anno) %>% map2(keep_sites3, function(x,y) x[id%in%y]) %>% rbindlist
## Filter annotations with few sites
keep_anno <- metrna[,.(N=length(unique(id))),by="anno"] %>% .[N>opts$min.n,anno]
metrna <- metrna[anno%in%keep_anno] %>% .[,anno:=drop.levels(anno)]
metrna[,list(nids=length(unique(id)), ngenes=length(unique(gene))),by=anno]
io <- list()
io$in.rna <- "/Users/ricard/data/NMT-seq/rna/allele_inspecific/sceset.rds"
io$in.met <- "/Users/ricard/data/NMT-seq/met/parsed/allele-inspecific/filt/met_data.rds"
opts <- list()
# gene-associated contexts
opts$annos1 <- c("prom_cgi","prom_noncgi","prom_active","prom_inactive","prom_poised","genebody")
# regulatory elements
opts$annos2 <- c("active_enhancers","super_enhancers","primed_enhancers","CTCF","p300")
# pluripotency factors
opts$annos3 <- c("Nanog","Oct4")
# others
opts$annos4 <- c("Tet1","Tet2","IAP")
opts$annos <- c(opts$annos1,opts$annos2,opts$annos3,opts$annos4)
# opts$method <- "pearson"
# opts$weight <- T
opts$min.coverage <- 0.4      # minimum coverage per feature (methylation)
opts$min.cdr <- 0.4           # minimum cellular detection rate per gene (expr)
opts$fraction.genes <- 0.75   # fraction of genes (expr) to keep based on variance
opts$fraction.sites <- 0.75   # fraction of sites (met) to keep based on variance
opts$threshold_fdr <- 0.10    # threshold for significance in FDR
opts$min.n <- 250
opts$gene_window <- 1e4
## Remove genes/site with constant expression
keep_genes1 <- metrna[,.(var=var(expr)), by="gene"] %>% .[var>0,] %>% .[["gene"]]
keep_sites1 <- metrna[,.(wtd_var=wtd.var(rate,weight)),by="id"] %>% .[wtd_var>0,] %>% .[["id"]]
metrna <- metrna[gene %in% keep_genes1 & id %in% keep_sites1]
## Extract highly variable genes/sites
keep_genes2 <- metrna[,.(var=var(expr)),by="gene"] %>% setorder(-var) %>% head(n=nrow(.)*opts$fraction.genes) %>% .[["gene"]]
keep_sites2 <- metrna[,.(var=wtd.var(rate,weight)), by=c("id","anno")] %>% split(.$anno) %>% map(function(x) setorder(x,-var)) %>% map(function(x) head(x,n=nrow(x)*opts$fraction.sites) %>% .$id)
metrna <- metrna[gene %in% keep_genes2] %>% split(.$anno) %>% map2(keep_sites2, function(x,y) x[id%in%y]) %>% rbindlist
## Filter genes with low cellular detection rate and sites with low coverage
nsamples <- length(unique(metrna$sample))
keep_genes3 <- metrna[,.(cdr=sum(expr>0)/.N), by="gene"] %>% .[cdr>opts$min.cdr,] %>% .[["gene"]]
keep_sites3 <- metrna[,.(cov=.N/nsamples), by=c("id","anno")] %>% split(.$anno) %>% map(function(x) x[cov>opts$min.coverage] %>% .$id)
metrna <- metrna[gene %in% keep_genes3] %>% split(.$anno) %>% map2(keep_sites3, function(x,y) x[id%in%y]) %>% rbindlist
## Filter annotations with few sites
keep_anno <- metrna[,.(N=length(unique(id))),by="anno"] %>% .[N>opts$min.n,anno]
metrna <- metrna[anno%in%keep_anno] %>% .[,anno:=drop.levels(anno)]
metrna[,list(nids=length(unique(id)), ngenes=length(unique(gene))),by=anno]
unique(metrna$anno)
feature_metadata <- fread("/Users/ricard/data/NMT-seq/features/metadata.txt", header=F) %>% setNames(c("chr","start","end","strand","id","anno")) %>% .[anno%in%opts$annos]
metrna_list <- list()
for (ann in opts$annos) {
# Subset corresponding anno
met_tmp <- met[anno==ann,] %>% .[,chr:=NULL]
# Feature not associated with genes
if (all(grepl("ENSM",unique(met_tmp$id))==FALSE)) {
# extract coordiantes for methylation sites and for genes
feature_metadata_tmp <- feature_metadata[anno==ann,c("chr","start","end","id")] %>% setkey(chr,start,end)
gene_metadata_tmp <- gene_metadata[,c("chr","start","end","symbol")] %>% setnames("symbol","gene") %>% .[,c("start","end"):=list(start-opts$gene_window,end+opts$gene_window)] %>% setkey(chr,start,end)
# do the overlap
ov <- foverlaps(feature_metadata_tmp, gene_metadata_tmp, nomatch=0) %>% .[,c("gene","id")]
# add expression levels
ov_rna <- merge(rna,ov,by="gene",allow.cartesian=TRUE)
# merge with methylation data
metrna_list[[ann]] <- merge(ov_rna,met_tmp,by=c("sample","id")) %>% .[,c("sample","id","gene","anno","expr","rate","weight","m")]
}
# Feature associated with genes
else if (all(grepl("ENSM",unique(met_tmp$id))==T)) {
gene_metadata_tmp <- gene_metadata[,c("ens_id","symbol")] %>% setnames(c("ens_id","symbol"),c("id","gene"))
met_tmp <- merge(met_tmp, gene_metadata_tmp, by="id")
metrna_list[[ann]] <- merge(rna,met_tmp,by=c("sample","gene")) %>% .[,c("sample","id","gene","anno","expr","rate","weight","m")]
}
}
metrna <- rbindlist(metrna_list)
keep_genes1 <- metrna[,.(var=var(expr)), by="gene"] %>% .[var>0,] %>% .[["gene"]]
keep_sites1 <- metrna[,.(wtd_var=wtd.var(rate,weight)),by="id"] %>% .[wtd_var>0,] %>% .[["id"]]
metrna <- metrna[gene %in% keep_genes1 & id %in% keep_sites1]
keep_genes2 <- metrna[,.(var=var(expr)),by="gene"] %>% setorder(-var) %>% head(n=nrow(.)*opts$fraction.genes) %>% .[["gene"]]
keep_sites2 <- metrna[,.(var=wtd.var(rate,weight)), by=c("id","anno")] %>% split(.$anno) %>% map(function(x) setorder(x,-var)) %>% map(function(x) head(x,n=nrow(x)*opts$fraction.sites) %>% .$id)
metrna <- metrna[gene %in% keep_genes2] %>% split(.$anno) %>% map2(keep_sites2, function(x,y) x[id%in%y]) %>% rbindlist
nsamples <- length(unique(metrna$sample))
keep_genes3 <- metrna[,.(cdr=sum(expr>0)/.N), by="gene"] %>% .[cdr>opts$min.cdr,] %>% .[["gene"]]
keep_sites3 <- metrna[,.(cov=.N/nsamples), by=c("id","anno")] %>% split(.$anno) %>% map(function(x) x[cov>opts$min.coverage] %>% .$id)
metrna <- metrna[gene %in% keep_genes3] %>% split(.$anno) %>% map2(keep_sites3, function(x,y) x[id%in%y]) %>% rbindlist
View(metrna[,.(N=length(unique(id))),by="anno"] )
metrna <- metrna[anno%in%keep_anno] %>% .[,anno:=drop.levels(anno)]
metrna[,list(nids=length(unique(id)), ngenes=length(unique(gene))),by=anno]
cor1 <- metrna[,wtd.cor(rate,expr,weight),by=c("gene","id","anno")][,para := c("r", "se", "t", "p")] %>%
dcast(gene+id+anno~para,value.var = "V1") %>%
.[, c("padj_fdr","padj_bonf") := list(p.adjust(p, method="fdr"),p.adjust(p, method="bonferroni"))] %>%
.[, c("log_padj_fdr","log_padj_bonf") := list(-log10(padj_fdr),-log10(padj_bonf))] %>%
.[,sig:=padj_fdr<opts$threshold_fdr] %>%
setorder(padj_fdr)
head(cor1)
cor2 <- metrna[,wtd.cor(rate,expr,weight),by=c("sample","anno")][,para := c("r", "se", "t", "p")] %>%
dcast(sample+anno~para,value.var = "V1") %>%
.[, c("padj_fdr","padj_bonf") := list(p.adjust(p, method = "fdr"),p.adjust(p, method = "bonferroni"))] %>%
.[, c("log_padj_fdr","log_padj_bonf") := list(-log10(padj_fdr),-log10(padj_bonf))] %>%
.[,sig:=padj_fdr<opts$threshold_fdr] %>%
setorder(padj_fdr)
head(cor2)
# pluripotency <- fread("/Users/ricard/NOMe-seq/genesets/pluripotency_extended.tsv", header=F) %>% setnames(c("id","gene")) %>% .[,pluri:=TRUE]
# test <- merge(cor1,pluripotency, all.x=T)
for (n in unique(cor1$anno)) {
print(n)
p <- ggplot(cor1[anno==n,], aes(x=r, y=log_padj_fdr)) +
ggtitle(n) +
geom_hline(yintercept = -log10(opts$threshold_fdr)) +
geom_vline(aes(xintercept = mean(r)), colour="blue", linetype="dashed") +
geom_vline(xintercept=0, colour="orange") +
geom_point(aes(color=sig)) +
scale_color_manual(values=c("black","red")) +
# geom_text(data=subset(cor1, padj_fdr<=opts$threshold_fdr),
#           aes(r, log_padj_fdr, label=gene),
#           nudge_y=0.08, size=4) +
xlab("Pearson Correlation") + ylab("-log10 p-value") +
theme(
plot.title=element_text(size=15, face='bold', margin=margin(0,20,0,0), hjust=0.5),
legend.position="none",
axis.text=element_text(size=rel(1.2), color='black'),
axis.title=element_text(size=rel(1.2), color='black'),
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
print(p)
print(subset(cor1[anno==n,], padj_fdr<=opts$threshold_fdr) %>% .$gene)
}
pluripotency <- fread("/Users/ricard/NOMe-seq/genesets/pluripotency_extended.tsv", header=F) %>% setnames(c("id","gene")) %>% .[,pluri:=TRUE]
test <- merge(cor1,pluripotency, all.x=T)
View(test)
library(data.table)
library(purrr)
library(scater)
library(scran)
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("/Users/ricard/NOMe-seq/")
source("Rutils/RNA_functions.R")
# Define whether to do allele-specific analysis
allele_specific <- FALSE
raw.counts = LoadRNACounts(counts.file = "/Users/ricard/data/NMT-seq/rna/raw_counts.txt")
# raw_counts <- fread("data/rna/raw_counts.txt", colClasses = c("Chromosome" = "factor"))
# Mithocondrial genes are labeled as "mt." in others data and "mt-" in my data
raw.counts[Chromosome == "MT"]$Gene <- stringr::str_replace_all(raw.counts[Chromosome == "MT"]$Gene,"\\.","-")
if (allele_specific == F) {
count.mat = raw.counts[, .SD, .SDcol = grep("flagged", colnames(raw.counts))] %>% as.matrix()
row.names(count.mat) = raw.counts$Gene
colnames(count.mat) = gsub(".flagged.bam", "", colnames(count.mat))
} else {
count.mat <- raw.counts[, .SD, .SDcol = grep("genome|unassigned",colnames(raw.counts))] %>% as.matrix()
row.names(count.mat) = raw.counts$Gene
colnames(count.mat) = gsub(".hisat2", "", colnames(count.mat))
colnames(count.mat) = gsub(".bam", "", colnames(count.mat))
count.mat <- count.mat[,sort(colnames(count.mat))]
}
feature_metadata <- read.csv("/Users/ricard/data/ensembl/mouse/v87/mRNA/Mmusculus_genes_BioMart.87.txt", sep="\t", stringsAsFactors=FALSE, quote="", header=T)
# Include ERCC to feature metadata
ercc <- raw.counts[Chromosome == "ERCC"]$Gene
feature_metadata <- plyr::rbind.fill(feature_metadata, data.frame(symbol=ercc, chr="chrERCC", stringsAsFactors=F))
# Define mithocondrial genes
mt <- feature_metadata$symbol[feature_metadata$chr == "chrMT"]
# remove duplicated genes (THIS SHOULD BE DONE WHEN CREATING THE ANNOTATION)
feature_metadata <- feature_metadata[!duplicated(feature_metadata$symbol),]
# set rownames
feature_metadata <- feature_metadata %>% tibble::remove_rownames() %>% tibble::column_to_rownames("symbol")
# remove uninteresting genes
# WHY SO MANY GENES ARE IN DATA BUT NOT IN METADATA?
genes <- rownames(count.mat)[rownames(count.mat) %in% rownames(feature_metadata)]
genes_not <- rownames(feature_metadata)[!rownames(feature_metadata) %in% rownames(count.mat)]
count.mat <- count.mat[genes,]
feature_metadata <- feature_metadata[genes,]
feature_metadata <- read.csv("/Users/ricard/data/ensembl/mouse/v87/mRNA/Mmusculus_genes_BioMart.87.txt", sep="\t", stringsAsFactors=FALSE, quote="", header=T)
# Include ERCC to feature metadata
ercc <- raw.counts[Chromosome == "ERCC"]$Gene
feature_metadata <- plyr::rbind.fill(feature_metadata, data.frame(symbol=ercc, chr="chrERCC", stringsAsFactors=F))
# Define mithocondrial genes
mt <- feature_metadata$symbol[feature_metadata$chr == "chrMT"]
# remove duplicated genes (THIS SHOULD BE DONE WHEN CREATING THE ANNOTATION)
feature_metadata <- feature_metadata[!duplicated(feature_metadata$symbol),]
# set rownames
feature_metadata <- feature_metadata %>% tibble::remove_rownames() %>% tibble::column_to_rownames("symbol")
# remove uninteresting genes
# WHY SO MANY GENES ARE IN DATA BUT NOT IN METADATA?
genes <- rownames(count.mat)[rownames(count.mat) %in% rownames(feature_metadata)]
genes_not <- rownames(feature_metadata)[!rownames(feature_metadata) %in% rownames(count.mat)]
count.mat <- count.mat[genes,]
feature_metadata <- feature_metadata[genes,]
sample_metadata <- read.table("/Users/ricard/data/NMT-seq/sample_info.txt", header=T, sep=" ") %>% dplyr::filter(passQC_rna==T) %>% tibble::column_to_rownames("sample")
if (allele_specific) {
stopifnot(sapply(rownames(sample_metadata), function(x) any(grepl(x,colnames(count.mat)))))
count.mat <- count.mat[,sapply(strsplit(colnames(count.mat),split="\\."), function(x) x[[1]][1] %in% rownames(sample_metadata))]
tmp <- sample_metadata %>% tibble::rownames_to_column("sample")
rownames(tmp) <- tmp$sample
tmp <- tmp[rep(rownames(tmp),3),] %>% arrange(sample)
rownames(tmp) <- colnames(count.mat)
tmp$haplotype <- sapply(strsplit(rownames(tmp),split="\\."), function(x) x[[2]])
sample_metadata <- tmp
} else {
stopifnot(all(rownames(sample_metadata) %in% colnames(count.mat))==T)
count.mat <- count.mat[,rownames(sample_metadata)]
}
dim(count.mat)
# Create featureData
fdata <- feature_metadata %>% new(Class = "AnnotatedDataFrame")
# Create phenoData
pdata <- sample_metadata %>% new(Class = "AnnotatedDataFrame")
# create SCEset object
sce = newSCESet(countData = count.mat, phenoData = pdata, featureData = fdata)
# Calculate quality metrics
sce = calculateQCMetrics(sce, feature_controls=list(Spike=rownames(sce) %in% ercc, Mt=rownames(sce) %in% mt))
isSpike(sce) <- "Spike"
# Library size
# libsize.drop = isOutlier(sce$total_counts, nmads=3, type="lower", log=TRUE)
libsize.drop <- sce$total_counts < 5e4
ggplot(data.frame(sce$total_counts, outlier=libsize.drop), aes(x=sce$total_counts, fill=outlier)) +
# ggplot(as.data.frame(sce$total_counts), aes(sce$total_counts)) +
geom_histogram(bins = 20) +
ylab("Number of cells") +
xlab("Mapped Reads")
# Number of genes expressed
feature.drop = isOutlier(sce$total_features, nmads=3, type="lower")
ggplot(data.frame(sce$total_features, outlier=feature.drop), aes(x=sce$total_features, fill=outlier)) +
# ggplot(as.data.frame(sce$total_features), aes(sce$total_features)) +
geom_histogram(bins = 20) +
ylab("Number of cells") + xlab("Number of expressed genes")
# Proportion of reads accounting for the top 50 features
# top50.drop = isOutlier(sce$pct_exprs_top_50_features, nmads=3, type="both", log=TRUE)
top50.drop <- sce$pct_exprs_top_50_features > 10.0
ggplot(data.frame(sce$pct_exprs_top_50_features, outlier=top50.drop), aes(x=colnames(sce), y=sce$pct_exprs_top_50_features, fill=outlier)) +
geom_bar(stat="identity") +
ylab("Proportion of reads account for the top 50 features") + xlab("")
# Samples with large proportion of mithocondrial genes
mt.drop <- sce$pct_counts_feature_controls_Mt > 0.15
ggplot(data.frame(sce$pct_counts_feature_controls_Mt, outlier=mt.drop), aes(x=colnames(sce), y=sce$pct_counts_feature_controls_Mt, fill=outlier)) +
geom_bar(stat="identity") +
ylab("Proportion of reads mapping to mithocondrial genes") + xlab("") +
ylim(c(0,0.05))
# Remove outliers
drop.samples <- colnames(sce)[( libsize.drop | feature.drop | top50.drop | mt.drop )]
print(drop.samples)
sce <- sce[,!colnames(sce) %in% drop.samples]
sce <- calculateQCMetrics(sce)
sce_filt <- sce[!(rowMeans(counts(sce)) <= 1 | fData(sce)$pct_dropout > 90),]
?computeSumFactors
sf = computeSumFactors(counts(sce_filt), sizes=c(10,20,30,40))
qplot(sf, sce_filt$total_counts, log="xy", ylab="Library size (mapped reads)", xlab="Size factor")
sizeFactors(sce) <- sf; sce$sizeFactor <- sf
sizeFactors(sce_filt) <- sf; sce_filt$sizeFactor <- sf
sce <- normalize(sce, exprs_values="counts")
sce_filt <- normalize(sce_filt, exprs_values="counts")
## trendVar ##
var.fit <- trendVar(sce_filt, trend="loess", use.spikes=FALSE)
var.out <- decomposeVar(sce_filt, var.fit)
hvg.out <- var.out[which(var.out$FDR <= 0.10 & var.out$bio >= 0.5),]
hvg.out <- hvg.out[order(hvg.out$bio, decreasing=TRUE),]
fData(sce)$HVG1 <- rownames(sce) %in% rownames(hvg.out)
plot(var.out$mean, var.out$total, pch=16, cex=0.6, xlab="Mean log-expression", ylab="Variance of log-expression")
o <- order(var.out$mean)
lines(var.out$mean[o], var.out$tech[o], col="dodgerblue", lwd=2)
points(var.out$mean[isSpike(sce_filt)], var.out$total[isSpike(sce_filt)], col="red", pch=16)
points(hvg.out$mean, hvg.out$total, col="green", pch=16)
# We recommend checking the distribution of expression values for the top HVGs to ensure that the variance estimate is not being dominated by one or two outlier cells
plotExpression(sce_filt, rownames(hvg.out)[1:10])
plotTSNE(sce_filt, colour_by="haplotype", shape_by="nome")
colnames(pData(sce))
plotTSNE(sce_filt, colour_by="culture", shape_by="nome")
pluri <- fread("/Users/ricard/NOMe-seq/genesets/pluripotency.tsv", header=F) %>% setnames(c("id","gene"))
diff <- fread("/Users/ricard/NOMe-seq/genesets/differentiation.tsv", header=F) %>% setnames(c("id","gene"))
housek <- fread("/Users/ricard/NOMe-seq/genesets/housekeeping.tsv", header=F) %>% setnames(c("id","gene"))
View(housek)
test <- sce[,c(pluri,diff,housek)]
test <- sce[c(pluri,diff,housek),]
c(pluri,diff,housek)
pluri <- fread("/Users/ricard/NOMe-seq/genesets/pluripotency.tsv", header=F) %>% setnames(c("id","gene")) %>% [["gene"]]
pluri <- fread("/Users/ricard/NOMe-seq/genesets/pluripotency.tsv", header=F) %>% setnames(c("id","gene")) %>% .[["gene"]]
pluri
pluri <- fread("/Users/ricard/NOMe-seq/genesets/pluripotency.tsv", header=F) %>% setnames(c("id","gene")) %>% .[["gene"]]
diff <- fread("/Users/ricard/NOMe-seq/genesets/differentiation.tsv", header=F) %>% setnames(c("id","gene")) %>% .[["gene"]]
housek <- fread("/Users/ricard/NOMe-seq/genesets/housekeeping.tsv", header=F) %>% setnames(c("id","gene")) %>% .[["gene"]]
test <- sce[c(pluri,diff,housek),]
test <- sce[rownames(sce) %in% c(pluri,diff,housek),]
rownames(test)
df <- data.frame(gene=c(pluri,diff,housek))
View(df)
df <- data.frame(gene=c(pluri,diff,housek), type=c(rep("Pluripotency",length(pluri)),rep("Differentiation",length(diff)),rep("Housekeeping",length(housek)))
test <- sce[rownames(sce) %in% c(pluri,diff,housek),]
rep("Housekeeping",length(housek)
)
df <- data.frame(gene=c(pluri,diff,housek), type=c(rep("Pluripotency",length(pluri)),rep("Differentiation",length(diff)),rep("Housekeeping",length(housek))))
View(df)
colnames(fData(sce))
merge(fData(sce),df,by="ens_id")
pluri <- fread("/Users/ricard/NOMe-seq/genesets/pluripotency.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["ens_id"]]
diff <- fread("/Users/ricard/NOMe-seq/genesets/differentiation.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["ens_id"]]
housek <- fread("/Users/ricard/NOMe-seq/genesets/housekeeping.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["ens_id"]]
df <- data.frame(gene=c(pluri,diff,housek), type=c(rep("Pluripotency",length(pluri)),rep("Differentiation",length(diff)),rep("Housekeeping",length(housek))))
merge(fData(sce),df,by="ens_id")
colnames(fData(sce))
colnames(df)
df <- data.frame(ens_id=c(pluri,diff,housek), type=c(rep("Pluripotency",length(pluri)),rep("Differentiation",length(diff)),rep("Housekeeping",length(housek))))
merge(fData(sce),df,by="ens_id")
asd <- merge(fData(sce),df,by="ens_id", all.x=T)
View(asd)
fData(sce) <- merge(fData(sce),df,by="ens_id", all.x=T)
fData(sce) %>% filter(!is.na(type))
tmp <- fData(sce) %>% filter(!is.na(type))
?plotFeatureData
plotFeatureData(sce,aesth = aes_string(x = "type", y ="mean_exprs"))
View(tmp)
tmp <- exprs(sce) %>% t %>% as.data.table(keep.rownames="sample") %>% melt(id.vars="sample", value.name="expr", variable.name="gene")
View(tmp)
tmp
pluri <- fread("/Users/ricard/NOMe-seq/genesets/pluripotency.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
diff <- fread("/Users/ricard/NOMe-seq/genesets/differentiation.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
housek <- fread("/Users/ricard/NOMe-seq/genesets/housekeeping.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
df <- data.frame(gene=c(pluri,diff,housek), type=c(rep("Pluripotency",length(pluri)),rep("Differentiation",length(diff)),rep("Housekeeping",length(housek))))
tmp <- exprs(sce) %>% t %>% as.data.table(keep.rownames="sample") %>% melt(id.vars="sample", value.name="expr", variable.name="gene")
merge(tmp,df,by="gene")
test <- merge(tmp,df,by="gene")
View(test)
tmp <- exprs(sce)[df$gene,]
dim(tmp)
tmp
df
df <- data.frame(gene=c(pluri,diff,housek), type=c(rep("Pluripotency",length(pluri)),rep("Differentiation",length(diff)),rep("Housekeeping",length(housek)))) %>% tibble::column_to_rownames("gene")
duplicated(df$gene)
df[duplicated(df$gene),]
View(df)
pluri <- fread("/Users/ricard/NOMe-seq/genesets/pluripotency.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
diff <- fread("/Users/ricard/NOMe-seq/genesets/differentiation.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
housek <- fread("/Users/ricard/NOMe-seq/genesets/housekeeping.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
df <- data.frame(gene=c(pluri,diff,housek), type=c(rep("Pluripotency",length(pluri)),rep("Differentiation",length(diff)),rep("Housekeeping",length(housek)))) %>% tibble::column_to_rownames("gene")
library(pheatmap)
pheatmap(exprs(sce)[rownames(df),], border_color="black", main="",
cluster_cols=T, cluster_rows=F, show_rownames=FALSE, show_colnames=FALSE,
annotation_row=df, annotation_col=NA, annotation_colors=NA,
legend=TRUE, annotation_legend=TRUE, legend_labels=NA, annotation_names_row=F,
# annotation_names_col=F, fontsize=13, filename=str_c(io$heatmap_out,"/heatmap.png"))
annotation_names_col=F, fontsize=13)
rownames(df)
rownames(df) %in% rownames(sce)
rownames(df)[!rownames(df) %in% rownames(sce)]
View(df)
"Dppa3" %in% rownames(sce)
"Kdm1a" %in% rownames(sce)
pluri <- fread("/Users/ricard/NOMe-seq/genesets/pluripotency.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
diff <- fread("/Users/ricard/NOMe-seq/genesets/differentiation.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
housek <- fread("/Users/ricard/NOMe-seq/genesets/housekeeping.tsv", header=F) %>% setnames(c("ens_id","gene")) %>% .[["gene"]]
df <- data.frame(gene=c(pluri,diff,housek), type=c(rep("Pluripotency",length(pluri)),rep("Differentiation",length(diff)),rep("Housekeeping",length(housek)))) %>% tibble::column_to_rownames("gene")
library(pheatmap)
pheatmap(exprs(sce)[rownames(df),], border_color="black", main="",
cluster_cols=T, cluster_rows=F, show_rownames=FALSE, show_colnames=FALSE,
annotation_row=df, annotation_col=NA, annotation_colors=NA,
legend=TRUE, annotation_legend=TRUE, legend_labels=NA, annotation_names_row=F,
# annotation_names_col=F, fontsize=13, filename=str_c(io$heatmap_out,"/heatmap.png"))
annotation_names_col=F, fontsize=13)
pheatmap(t(exprs(sce)[rownames(df),]), border_color="black", main="",
cluster_cols=T, cluster_rows=F, show_rownames=FALSE, show_colnames=FALSE,
annotation_row=df, annotation_col=NA, annotation_colors=NA,
legend=TRUE, annotation_legend=TRUE, legend_labels=NA, annotation_names_row=F,
# annotation_names_col=F, fontsize=13, filename=str_c(io$heatmap_out,"/heatmap.png"))
annotation_names_col=F, fontsize=13)
pheatmap(t(exprs(sce)[rownames(df),]), border_color="black", main="",
cluster_cols=T, cluster_rows=F, show_rownames=FALSE, show_colnames=FALSE,
annotation_row=NA, annotation_col=df, annotation_colors=NA,
legend=TRUE, annotation_legend=TRUE, legend_labels=NA, annotation_names_row=F,
# annotation_names_col=F, fontsize=13, filename=str_c(io$heatmap_out,"/heatmap.png"))
annotation_names_col=F, fontsize=13)
pheatmap(t(exprs(sce)[rownames(df),]), border_color="black", main="",
cluster_cols=T, cluster_rows=T, show_rownames=FALSE, show_colnames=FALSE,
annotation_row=NA, annotation_col=df, annotation_colors=NA,
legend=TRUE, annotation_legend=TRUE, legend_labels=NA, annotation_names_row=F,
# annotation_names_col=F, fontsize=13, filename=str_c(io$heatmap_out,"/heatmap.png"))
annotation_names_col=F, fontsize=13)
pheatmap::pheatmap(t(exprs(sce)[rownames(df),]), border_color="black", main="",
cluster_cols=F, cluster_rows=T, show_rownames=FALSE, show_colnames=FALSE,
annotation_row=NA, annotation_col=df, annotation_colors=NA,
legend=TRUE, annotation_legend=TRUE, legend_labels=NA, annotation_names_row=F,
# annotation_names_col=F, fontsize=13, filename=str_c(io$heatmap_out,"/heatmap.png"))
annotation_names_col=F, fontsize=13)
pheatmap::pheatmap(t(exprs(sce)[rownames(df),]), border_color="black", main="",
cluster_cols=T, cluster_rows=T, show_rownames=FALSE, show_colnames=FALSE,
annotation_row=NA, annotation_col=df, annotation_colors=NA,
legend=TRUE, annotation_legend=TRUE, legend_labels=NA, annotation_names_row=F,
# annotation_names_col=F, fontsize=13, filename=str_c(io$heatmap_out,"/heatmap.png"))
annotation_names_col=F, fontsize=13)
pheatmap::pheatmap(t(exprs(sce)[rownames(df),]), border_color="black", main="",
cluster_cols=F, cluster_rows=T, show_rownames=FALSE, show_colnames=FALSE,
annotation_row=NA, annotation_col=df, annotation_colors=NA,
legend=TRUE, annotation_legend=TRUE, legend_labels=NA, annotation_names_row=F,
# annotation_names_col=F, fontsize=13, filename=str_c(io$heatmap_out,"/heatmap.png"))
annotation_names_col=F, fontsize=13)
?phaetmap
?pheatmap
pheatmap::pheatmap(t(exprs(sce)[rownames(df),]), border_color="black", main="",
cluster_cols=F, cluster_rows=T, show_rownames=FALSE, show_colnames=FALSE,
annotation_row=NA, annotation_col=df, annotation_colors=NA,
legend=FALSE, annotation_legend=TRUE, legend_labels=NA, annotation_names_row=F,
# annotation_names_col=F, fontsize=13, filename=str_c(io$heatmap_out,"/heatmap.png"))
annotation_names_col=F, fontsize=13)
colnames(fData(sce))
(allele_specific)
dim(sce)
saveRDS(sce,"/Users/ricard/data/NMT-seq/rna/allele_inspecific/sceset.rds")
library(scater)
library(purrr)
library(data.table)
library(ggplot2)
library(randomForest)
opts <- list()
opts$ntree <- 500
opts$f_train = 0.80
io <- list()
io$basedir <- "/Users/ricard/data/NMT-seq"
io$met.infile <- paste(io$basedir,"met/parsed/allele_unspecific/filt/met_data.rds",sep="/")
io$dna.infile <- paste(io$basedir,"dna/parsed/allele_unspecific/filt/dna_data.rds",sep="/")
io$rna.infile <- paste(io$basedir,"rna/allele_inspecific/sceset.rds",sep="/")
io$features.indir <- paste(io$basedir,"features/filt",sep="/")
sce <- readRDS(io$rna.infile) %>% .[!isSpike(.),]
featureNames(sce) <- fData(sce)$ens_id
# Extract expression matrix and binarise ti
rna <- t(exprs(sce))
rna <- ifelse(rna>0,"TRUE","FALSE")
# Generate dataframe
rna <- rna %>% as.data.frame %>% tibble::rownames_to_column("sample") %>% gather(key="gene",value="expr",-sample) %>% data.table
rna <- rna %>% as.data.frame %>% tibble::rownames_to_column("sample") %>% dplyr::gather(key="gene",value="expr",-sample) %>% data.table
?gather
??gather
rna <- rna %>% as.data.frame %>% tibble::rownames_to_column("sample") %>% tidyr::gather(key="gene",value="expr",-sample) %>% data.table
# Load methylation data
met <- readRDS(io$met.infile) %>% as.data.table %>% .[anno=="prom_short"] %>% .[,c("anno","chr","weight","rate"):=NULL] %>% setnames(c("id","m"),c("gene","value"))
# Load DNA accessibility data
dna <- readRDS(io$dna.infile) %>% as.data.table %>% .[anno=="prom_short"] %>% .[,c("anno","chr","weight","rate"):=NULL] %>% setnames(c("id","m"),c("gene","value"))
# Merge data
metdna <- merge(met,dna, by=c("sample","gene")) %>%
setnames(c("value.x","value.y"),c("met_value","dna_value"))
metdnarna <- merge(metdna,rna, by=c("gene","sample")) %>% .[,expr:=as.factor(expr)]
train_genes <- sample(unique(metdnarna$gene), size=round(opts$f_train*length(unique(metdnarna$gene))))
test_genes <- setdiff(unique(metdnarna$gene),train_genes)
train_data <- metdnarna[gene%in%train_genes]
test_data <- metdnarna[gene%in%test_genes]
cat(sprintf("Number of genes: %d\n",length(unique(metdnarna$gene))))
cat(sprintf("(Maximum) Number of genes in training data: %d\n",length(train_genes)))
cat(sprintf("(Maximum) Number of genes in test data: %d\n",length(test_genes)))
fit1 <- train_data[, .(fit=list(randomForest(formula=expr~met_value,ntree=opts$ntree,data=.SD))), by=sample] %>% setorder(sample)
fit2 <- train_data[, .(fit=list(randomForest(formula=expr~dna_value,ntree=opts$ntree,data=.SD))), by=sample] %>% setorder(sample)
fit12 <- train_data[, .(fit=list(randomForest(formula=expr~met_value+dna_value,ntree=opts$ntree,data=.SD))), by=sample] %>% setorder(sample)
pred1 <- doPred(fit1,test_data[,c("sample","met_value","expr")],quote(list(met_value)))
source("/Users/ricard/NOMe-seq/regression/utils.R")
pred1 <- doPred(fit1,test_data[,c("sample","met_value","expr")],quote(list(met_value)))
pred2 <- doPred(fit2,test_data[,c("sample","dna_value","expr")],quote(list(dna_value)))
pred2 <- doPred(fit2,test_data[,c("sample","dna_value","expr")],quote(list(dna_value)))
pred12 <- doPred(fit12,test_data[,c("sample","met_value","dna_value","expr")],quote(list(met_value,dna_value)))
results1 <- pred1[,.(accuracy=mean(pred==true)),by="sample"]
results2 <- pred2[,.(accuracy=mean(pred==true)),by="sample"]
results12 <- pred12[,.(accuracy=mean(pred==true)),by="sample"]
mean(results1$accuracy)
mean(results12$accuracy)
mean(results2$accuracy)
View(pred1)
View(met)
