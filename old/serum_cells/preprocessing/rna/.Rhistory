# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="black", alpha=0.5) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate,y=expr, size=tmp)) +
geom_point(aes(size=tmp, color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
scale_size_manual(values=c(1,5)) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="black", alpha=0.5) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
tmp
p <- ggplot(accrna, aes(x=rate, y=expr, size=tmp)) +
geom_point(aes(size=tmp, color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_size_manual(values=c(1,5)) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="black", alpha=0.5) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr, size=tmp)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="black", alpha=0.5) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="black", alpha=0.5) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="black", alpha=0.25) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="black", alpha=0.25, color="grey") +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="grey", alpha=0.25) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
ggsave(plot=p, height=6, width=6, dpi=200, filename=io$plot.outfile, useDingbats=FALSE )
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_text(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("GC Accessibility") +
theme(
axis.title = element_text(colour="black", size=rel(1.5)),
axis.text.x = element_text(colour="black",size=rel(1.8)),
axis.text.y = element_text(colour="black",size=rel(1.8)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("GC Accessibility") +
theme(
axis.title.x = element_text(colour="black", size=rel(1.5), margin=margin(10,0,0,0)),
axis.title.y = element_text(colour="black", size=rel(1.5), margin=margin(0,10,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.8)),
axis.text.y = element_text(colour="black",size=rel(1.8)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("GC Accessibility") +
theme(
axis.title.x = element_text(colour="black", size=rel(1.8), margin=margin(10,0,0,0)),
axis.title.y = element_text(colour="black", size=rel(1.8), margin=margin(0,10,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.8)),
axis.text.y = element_text(colour="black",size=rel(1.8)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("GC Accessibility") +
theme(
axis.title.x = element_text(colour="black", size=rel(1.8), margin=margin(10,0,0,0)),
axis.title.y = element_text(colour="black", size=rel(1.8), margin=margin(0,10,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.8)),
axis.text.y = element_text(colour="black",size=rel(1.8)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("GC Accessibility") +
theme(
axis.title.x = element_text(colour="black", size=rel(1.7), margin=margin(10,0,0,0)),
axis.title.y = element_text(colour="black", size=rel(1.7), margin=margin(0,10,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.7)),
axis.text.y = element_text(colour="black",size=rel(1.7)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25, linetype="dashed") +
ylab("Expression") + xlab("GC Accessibility") +
theme(
axis.title.x = element_text(colour="black", size=rel(1.7), margin=margin(10,0,0,0)),
axis.title.y = element_text(colour="black", size=rel(1.7), margin=margin(0,10,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.7)),
axis.text.y = element_text(colour="black",size=rel(1.7)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
ggsave(plot=p, height=6, width=6, dpi=200, filename=io$plot.outfile, useDingbats=FALSE )
suppressMessages(library(scater))
suppressMessages(library(data.table))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
source("/Users/ricard/NMT-seq/zoom/andreas/utils_region.R")
io <- list()
suppressMessages(library(scater))
suppressMessages(library(data.table))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
source("/Users/ricard/NMT-seq/zoom/andreas/utils_region.R")
io <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$basedir <- "/Users/ricard/data/NMT-seq"
} else {
io$basedir <- "/hps/nobackup/stegle/users/ricard/NMT-seq"
}
io$in.sample_metadata <- paste(io$basedir,"sample_info.txt",sep="/")
io$met_dir <- paste0(io$basedir,"/met/raw/allele_unspecific")
io$acc_dir <- paste0(io$basedir,"/acc/raw/allele_unspecific")
io$rna_file <- paste0(io$basedir,"/rna/parsed/allele_unspecific/sceset.rds")
opts <- list()
opts$gene <- "Cth"
opts$chr <- "3"
opts$start <- 157924248
opts$end <- 157928248
opts$cells_metacc <- fread(io$in.sample_metadata, header=T) %>% .[passQC_met==T & passQC_acc==T,sample]
filename <- sprintf("/Users/ricard/NMT-seq/zoom/files/%s_chr%s_%s-%s.rds",opts$gene,opts$chr,opts$start,opts$end)
if (file.exists(filename)) {
data <- readRDS(filename)
} else {
data <- read_genomic_windows(io,opts)
saveRDS(data, file=filename)
}
filename <- sprintf("/Users/ricard/NMT-seq/zoom/Cth/files/%s_chr%s_%s-%s.rds",opts$gene,opts$chr,opts$start,opts$end)
if (file.exists(filename)) {
data <- readRDS(filename)
} else {
data <- read_genomic_windows(io,opts)
saveRDS(data, file=filename)
}
data$acc <- data$acc[sample %in% opts$cells_metacc,]
data$met <- data$met[sample %in% opts$cells_metacc,]
library(MOFAtools)
file = "/Users/ricard/test.hdf5"
model <- loadModel(file)
expectations <- rhdf5::h5read(file,"expectations")
parameters <- rhdf5::h5read(file,"parameters")
training_stats <- rhdf5::h5read(file,"training_stats")
colnames(training_stats$elbo_terms) <- attr(rhdf5::h5read(file,"training_stats/elbo_terms", read.attributes=T),"colnames")
training_opts <- as.list(rhdf5::h5read(file,"training_opts", read.attributes=T))
data <- rhdf5::h5read(file,"data")
featuredata <- rhdf5::h5read(file,"features")
sampledata <- rhdf5::h5read(file,"samples")
for (m in names(data)) {
rownames(data[[m]]) <- sampledata
colnames(data[[m]]) <- featuredata[[m]]
}
M=length(data)
N=nrow(data[[1]])
D=sapply(data,ncol)
K=tail(training_stats$activeK[!is.nan(training_stats$activeK)],n=1)
K
training_stats
expectations <- rhdf5::h5read(file,"expectations")
parameters <- rhdf5::h5read(file,"parameters")
training_stats <- rhdf5::h5read(file,"training_stats")
colnames(training_stats$elbo_terms) <- attr(rhdf5::h5read(file,"training_stats/elbo_terms", read.attributes=T),"colnames")
training_opts <- as.list(rhdf5::h5read(file,"training_opts", read.attributes=T))
data <- rhdf5::h5read(file,"data")
featuredata <- rhdf5::h5read(file,"features")
sampledata <- rhdf5::h5read(file,"samples")
for (m in names(data)) {
rownames(data[[m]]) <- sampledata
colnames(data[[m]]) <- featuredata[[m]]
}
M=length(data)
N=nrow(data[[1]])
D=sapply(data,ncol)
K=tail(training_stats$activeK[!is.nan(training_stats$activeK)],n=1)
dim=list("M"=M, "N"=N, "D"=D, "K"=K)
dim
library(MOFAtools)
# file = "/Users/ricard/data/CLL/out/robustness/trained_model_batch2_1.hdf5"
# file = "/Users/ricard/data/CLL/out/imputation/model_0.05.hdf5"
file = "/Users/ricard/test.hdf5"
model <- loadModel(file)
model@Expectations
model@Expectations$Alpha
model@Expectations$SW
model@Expectations$Z$E
model@Expectations$Y$lincRNA
model@Expectations$Clusters
library(data.table)
library(purrr)
library(scater)
library(scran)
library(ggplot2)
source("/Users/ricard/NMT-seq/Rutils/stats_utils.R")
LoadRNACounts = function(counts.file, name.slot = 4){
# Load raw RNAseq counts from seqmonk report (tab delim text)
d = fread(counts.file, colClasses = c("Chromosome" = "factor"), showProgress=F)
n = colnames(d)[13:ncol(d)] %>%
strsplit(split = "_") %>%
map(~paste(.[name.slot], .[length(.)], sep = ".")) %>%
unlist()
setnames(d, 13:ncol(d), n)
d = d[, Gene := make.names(Probe, unique = TRUE)] # make sure each gene name is unique
return(d)
}
barplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5),
# axis.title.x = element_text(colour="black", size=25, vjust=1.5),
axis.title.x = element_blank(),
axis.title.y = element_text(colour="black", size=20),
# axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(1.0)),
axis.ticks.y = element_line(colour="black", size=rel(1.0)),
legend.position="none",
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
## Options ##
opts <- list()
opts$allele_specific <- FALSE       # Define whether to do allele-specific analysis
if (opts$allele_specific) {
opts$coverage_threshold <- 2e5 # Minimum library size (coverage)
} else {
opts$coverage_threshold <- 3e5 # Minimum library size (coverage)
}
opts$features_threshold <- 2000     # Minimum number of expressed features
opts$top50_threshold <- 25          # Maximum fraction of reads accounting for the top 50 features
# opts$MT_threshold <- 0.15         # Maximum fraction of reads mapping to mithocondrial genes
## I/O ##
io <- list()
io$in.gene_metadata <- "/Users/ricard/data/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
if (opts$allele_specific) {
io$in.sample_metadata <- "/Users/ricard/data/NMT-seq/sample_info2.txt"
io$in.raw_counts <- "/Users/ricard/data/NMT-seq/rna/parsed/allele_specific/raw_counts.txt"
io$out.file <- "/Users/ricard/data/NMT-seq/rna/parsed/allele_specific/sceset.rds"
} else {
io$in.sample_metadata <- "/Users/ricard/data/NMT-seq/sample_info.txt"
io$in.raw_counts <- "/Users/ricard/data/NMT-seq/rna/parsed/allele_unspecific/raw_counts.txt"
io$out.file <- "/Users/ricard/data/NMT-seq/rna/parsed/allele_unspecific/sceset.rds"
}
raw.counts <- fread(io$in.raw_counts)
count.mat <- raw.counts[,-c("ens_id")] %>% as.matrix()
row.names(count.mat) = raw.counts$ens_id
count.mat <- count.mat[,sort(colnames(count.mat))]
# gene_metadata <- read.csv(io$in.gene_metadata, sep="\t", stringsAsFactors=FALSE, quote="", header=T)
gene_metadata <- fread(io$in.gene_metadata, sep="\t", header=T)
# Include ERCC to feature metadata
# ercc <- raw.counts[Chromosome == "ERCC"]$Gene
# gene_metadata <- rbind(gene_metadata, data.table(symbol=ercc, chr="chrERCC"), fill=TRUE)
# Define mithocondrial genes
mt <- gene_metadata$symbol[gene_metadata$chr == "chrMT"]
# remove duplicated genes (THIS SHOULD BE DONE WHEN CREATING THE ANNOTATION)
gene_metadata <- gene_metadata[!duplicated(gene_metadata$symbol),]
# remove uninteresting genes
genes <- rownames(count.mat)[rownames(count.mat) %in% gene_metadata$ens_id]
genes_not <- gene_metadata$ens_id[!gene_metadata$ens_id %in% rownames(count.mat)]
count.mat <- count.mat[genes,]
gene_metadata <- gene_metadata[ens_id %in% genes,]
# convert from ens_id to gene symbol in count matrix, sort and match rows with metadata
# gene_metadata <- gene_metadata %>% tibble::remove_rownames() %>% tibble::column_to_rownames("symbol")
rownames(count.mat) <- gene_metadata %>% setkey(ens_id) %>% .[rownames(count.mat),symbol]
gene_metadata %>% setnames("symbol","gene") %>% setkey(gene)
count.mat <- count.mat[gene_metadata$gene,]
stopifnot(all(rownames(count.mat) == gene_metadata$symbol))
a <- fread("/Users/ricard/data/NMT-seq/sample_info.txt")
a <- fread("/Users/ricard/data/NMT-seq/sample_info.txt")
library(data.table)
a <- fread("/Users/ricard/data/NMT-seq/sample_info.txt")
View(a)
a[passQC_rna==T]
nrow(a[passQC_rna==T])
nrow(a[passQC_rna==T])-3
nrow(a[passQC_rna==T & passQC_met==T & passQC_acc==T])
nrow(a[passQC_rna==T & passQC_met==T & passQC_acc==T])-3
cells <- c("A07","A08","A09","B02","C03","C04","C09","D07","D08","E03","F05","F08","G01","G03","G06","H02","H03","H05")
length(cells)
