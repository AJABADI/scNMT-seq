scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="grey", alpha=0.25) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_blank(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
ggsave(plot=p, height=6, width=6, dpi=200, filename=io$plot.outfile, useDingbats=FALSE )
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("Methylation rate") +
theme(
axis.title = element_text(),
axis.text.x = element_text(colour="black",size=rel(2.0)),
axis.text.y = element_text(colour="black",size=rel(2.0)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("GC Accessibility") +
theme(
axis.title = element_text(colour="black", size=rel(1.5)),
axis.text.x = element_text(colour="black",size=rel(1.8)),
axis.text.y = element_text(colour="black",size=rel(1.8)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("GC Accessibility") +
theme(
axis.title.x = element_text(colour="black", size=rel(1.5), margin=margin(10,0,0,0)),
axis.title.y = element_text(colour="black", size=rel(1.5), margin=margin(0,10,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.8)),
axis.text.y = element_text(colour="black",size=rel(1.8)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("GC Accessibility") +
theme(
axis.title.x = element_text(colour="black", size=rel(1.8), margin=margin(10,0,0,0)),
axis.title.y = element_text(colour="black", size=rel(1.8), margin=margin(0,10,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.8)),
axis.text.y = element_text(colour="black",size=rel(1.8)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("GC Accessibility") +
theme(
axis.title.x = element_text(colour="black", size=rel(1.8), margin=margin(10,0,0,0)),
axis.title.y = element_text(colour="black", size=rel(1.8), margin=margin(0,10,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.8)),
axis.text.y = element_text(colour="black",size=rel(1.8)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25) +
ylab("Expression") + xlab("GC Accessibility") +
theme(
axis.title.x = element_text(colour="black", size=rel(1.7), margin=margin(10,0,0,0)),
axis.title.y = element_text(colour="black", size=rel(1.7), margin=margin(0,10,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.7)),
axis.text.y = element_text(colour="black",size=rel(1.7)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
p <- ggplot(accrna, aes(x=rate, y=expr)) +
geom_point(aes(color=tmp), size=1.5) +
scale_color_manual(values=c("black","red")) +
# scale_x_continuous(limits=c(0,100)) +
# scale_y_continuous(limits=c(0,75)) +
stat_smooth(method="lm", color="darkgrey", alpha=0.25, linetype="dashed") +
ylab("Expression") + xlab("GC Accessibility") +
theme(
axis.title.x = element_text(colour="black", size=rel(1.7), margin=margin(10,0,0,0)),
axis.title.y = element_text(colour="black", size=rel(1.7), margin=margin(0,10,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.7)),
axis.text.y = element_text(colour="black",size=rel(1.7)),
axis.line = element_line(colour="black"),
# axis.ticks.x = element_line(colour="black", size=rel(0.8)),
# axis.ticks.y = element_blank(),
legend.position="none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank()
)
print(p)
ggsave(plot=p, height=6, width=6, dpi=200, filename=io$plot.outfile, useDingbats=FALSE )
suppressMessages(library(scater))
suppressMessages(library(data.table))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
source("/Users/ricard/NMT-seq/zoom/andreas/utils_region.R")
io <- list()
suppressMessages(library(scater))
suppressMessages(library(data.table))
suppressMessages(library(purrr))
suppressMessages(library(ggplot2))
source("/Users/ricard/NMT-seq/zoom/andreas/utils_region.R")
io <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$basedir <- "/Users/ricard/data/NMT-seq"
} else {
io$basedir <- "/hps/nobackup/stegle/users/ricard/NMT-seq"
}
io$in.sample_metadata <- paste(io$basedir,"sample_info.txt",sep="/")
io$met_dir <- paste0(io$basedir,"/met/raw/allele_unspecific")
io$acc_dir <- paste0(io$basedir,"/acc/raw/allele_unspecific")
io$rna_file <- paste0(io$basedir,"/rna/parsed/allele_unspecific/sceset.rds")
opts <- list()
opts$gene <- "Cth"
opts$chr <- "3"
opts$start <- 157924248
opts$end <- 157928248
opts$cells_metacc <- fread(io$in.sample_metadata, header=T) %>% .[passQC_met==T & passQC_acc==T,sample]
filename <- sprintf("/Users/ricard/NMT-seq/zoom/files/%s_chr%s_%s-%s.rds",opts$gene,opts$chr,opts$start,opts$end)
if (file.exists(filename)) {
data <- readRDS(filename)
} else {
data <- read_genomic_windows(io,opts)
saveRDS(data, file=filename)
}
filename <- sprintf("/Users/ricard/NMT-seq/zoom/Cth/files/%s_chr%s_%s-%s.rds",opts$gene,opts$chr,opts$start,opts$end)
if (file.exists(filename)) {
data <- readRDS(filename)
} else {
data <- read_genomic_windows(io,opts)
saveRDS(data, file=filename)
}
data$acc <- data$acc[sample %in% opts$cells_metacc,]
data$met <- data$met[sample %in% opts$cells_metacc,]
library(MOFAtools)
file = "/Users/ricard/test.hdf5"
model <- loadModel(file)
expectations <- rhdf5::h5read(file,"expectations")
parameters <- rhdf5::h5read(file,"parameters")
training_stats <- rhdf5::h5read(file,"training_stats")
colnames(training_stats$elbo_terms) <- attr(rhdf5::h5read(file,"training_stats/elbo_terms", read.attributes=T),"colnames")
training_opts <- as.list(rhdf5::h5read(file,"training_opts", read.attributes=T))
data <- rhdf5::h5read(file,"data")
featuredata <- rhdf5::h5read(file,"features")
sampledata <- rhdf5::h5read(file,"samples")
for (m in names(data)) {
rownames(data[[m]]) <- sampledata
colnames(data[[m]]) <- featuredata[[m]]
}
M=length(data)
N=nrow(data[[1]])
D=sapply(data,ncol)
K=tail(training_stats$activeK[!is.nan(training_stats$activeK)],n=1)
K
training_stats
expectations <- rhdf5::h5read(file,"expectations")
parameters <- rhdf5::h5read(file,"parameters")
training_stats <- rhdf5::h5read(file,"training_stats")
colnames(training_stats$elbo_terms) <- attr(rhdf5::h5read(file,"training_stats/elbo_terms", read.attributes=T),"colnames")
training_opts <- as.list(rhdf5::h5read(file,"training_opts", read.attributes=T))
data <- rhdf5::h5read(file,"data")
featuredata <- rhdf5::h5read(file,"features")
sampledata <- rhdf5::h5read(file,"samples")
for (m in names(data)) {
rownames(data[[m]]) <- sampledata
colnames(data[[m]]) <- featuredata[[m]]
}
M=length(data)
N=nrow(data[[1]])
D=sapply(data,ncol)
K=tail(training_stats$activeK[!is.nan(training_stats$activeK)],n=1)
dim=list("M"=M, "N"=N, "D"=D, "K"=K)
dim
library(MOFAtools)
# file = "/Users/ricard/data/CLL/out/robustness/trained_model_batch2_1.hdf5"
# file = "/Users/ricard/data/CLL/out/imputation/model_0.05.hdf5"
file = "/Users/ricard/test.hdf5"
model <- loadModel(file)
model@Expectations
model@Expectations$Alpha
model@Expectations$SW
model@Expectations$Z$E
model@Expectations$Y$lincRNA
model@Expectations$Clusters
library(data.table)
library(purrr)
library(scater)
library(scran)
library(ggplot2)
source("/Users/ricard/NMT-seq/Rutils/stats_utils.R")
LoadRNACounts = function(counts.file, name.slot = 4){
# Load raw RNAseq counts from seqmonk report (tab delim text)
d = fread(counts.file, colClasses = c("Chromosome" = "factor"), showProgress=F)
n = colnames(d)[13:ncol(d)] %>%
strsplit(split = "_") %>%
map(~paste(.[name.slot], .[length(.)], sep = ".")) %>%
unlist()
setnames(d, 13:ncol(d), n)
d = d[, Gene := make.names(Probe, unique = TRUE)] # make sure each gene name is unique
return(d)
}
barplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5),
# axis.title.x = element_text(colour="black", size=25, vjust=1.5),
axis.title.x = element_blank(),
axis.title.y = element_text(colour="black", size=20),
# axis.text.x = element_text(colour="black",size=rel(1.6)),
axis.text.y = element_text(colour="black",size=rel(1.5)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(1.0)),
axis.ticks.y = element_line(colour="black", size=rel(1.0)),
legend.position="none",
panel.background = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank()
)
}
## Options ##
opts <- list()
opts$allele_specific <- FALSE       # Define whether to do allele-specific analysis
if (opts$allele_specific) {
opts$coverage_threshold <- 2e5 # Minimum library size (coverage)
} else {
opts$coverage_threshold <- 3e5 # Minimum library size (coverage)
}
opts$features_threshold <- 2000     # Minimum number of expressed features
opts$top50_threshold <- 25          # Maximum fraction of reads accounting for the top 50 features
# opts$MT_threshold <- 0.15         # Maximum fraction of reads mapping to mithocondrial genes
## I/O ##
io <- list()
io$in.gene_metadata <- "/Users/ricard/data/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
if (opts$allele_specific) {
io$in.sample_metadata <- "/Users/ricard/data/NMT-seq/sample_info2.txt"
io$in.raw_counts <- "/Users/ricard/data/NMT-seq/rna/parsed/allele_specific/raw_counts.txt"
io$out.file <- "/Users/ricard/data/NMT-seq/rna/parsed/allele_specific/sceset.rds"
} else {
io$in.sample_metadata <- "/Users/ricard/data/NMT-seq/sample_info.txt"
io$in.raw_counts <- "/Users/ricard/data/NMT-seq/rna/parsed/allele_unspecific/raw_counts.txt"
io$out.file <- "/Users/ricard/data/NMT-seq/rna/parsed/allele_unspecific/sceset.rds"
}
raw.counts <- fread(io$in.raw_counts)
count.mat <- raw.counts[,-c("ens_id")] %>% as.matrix()
row.names(count.mat) = raw.counts$ens_id
count.mat <- count.mat[,sort(colnames(count.mat))]
# gene_metadata <- read.csv(io$in.gene_metadata, sep="\t", stringsAsFactors=FALSE, quote="", header=T)
gene_metadata <- fread(io$in.gene_metadata, sep="\t", header=T)
# Include ERCC to feature metadata
# ercc <- raw.counts[Chromosome == "ERCC"]$Gene
# gene_metadata <- rbind(gene_metadata, data.table(symbol=ercc, chr="chrERCC"), fill=TRUE)
# Define mithocondrial genes
mt <- gene_metadata$symbol[gene_metadata$chr == "chrMT"]
# remove duplicated genes (THIS SHOULD BE DONE WHEN CREATING THE ANNOTATION)
gene_metadata <- gene_metadata[!duplicated(gene_metadata$symbol),]
# remove uninteresting genes
genes <- rownames(count.mat)[rownames(count.mat) %in% gene_metadata$ens_id]
genes_not <- gene_metadata$ens_id[!gene_metadata$ens_id %in% rownames(count.mat)]
count.mat <- count.mat[genes,]
gene_metadata <- gene_metadata[ens_id %in% genes,]
# convert from ens_id to gene symbol in count matrix, sort and match rows with metadata
# gene_metadata <- gene_metadata %>% tibble::remove_rownames() %>% tibble::column_to_rownames("symbol")
rownames(count.mat) <- gene_metadata %>% setkey(ens_id) %>% .[rownames(count.mat),symbol]
gene_metadata %>% setnames("symbol","gene") %>% setkey(gene)
count.mat <- count.mat[gene_metadata$gene,]
stopifnot(all(rownames(count.mat) == gene_metadata$symbol))
a <- fread("/Users/ricard/data/NMT-seq/sample_info.txt")
a <- fread("/Users/ricard/data/NMT-seq/sample_info.txt")
library(data.table)
a <- fread("/Users/ricard/data/NMT-seq/sample_info.txt")
View(a)
a[passQC_rna==T]
nrow(a[passQC_rna==T])
nrow(a[passQC_rna==T])-3
nrow(a[passQC_rna==T & passQC_met==T & passQC_acc==T])
nrow(a[passQC_rna==T & passQC_met==T & passQC_acc==T])-3
cells <- c("A07","A08","A09","B02","C03","C04","C09","D07","D08","E03","F05","F08","G01","G03","G06","H02","H03","H05")
length(cells)
library(data.table)
library(purrr)
library(scater)
library(ggplot2)
## Define I/O ##
io <- list()
io$expr <- "/Users/ricard/data/NMT-seq_EB/rna/parsed/sceset.rds"
io$metadata.file <- "/Users/ricard/data/NMT-seq_EB/sample_sheet.csv"
# io$outdir <- "/Users/ricard/NMT-seq/rebuttal/EB/heatmap/out"
## Define options ##
opts <- list()
# Define which cells to use
opts$cells <- fread(io$metadata.file) %>% .[pass_rnaQC==T, sample]
# opts$cells <- fread(io$metadata.file) %>% .[pass_rnaQC==T & type=="NMT", sample]
# Load sample metadata
sample_metadata <- fread(io$metadata.file) %>% .[sample %in% opts$cells]
# Load expression data and convert to data.table
sce <- readRDS(io$expr)
# Temporarily remove the lowly expressed genes
sce_filt <- sce[!(rowMeans(counts(sce)) <= 1 | fData(sce)$pct_dropout > 90),]
# Compute size factors without the lowly expressed genes
sf = computeSumFactors(counts(sce_filt), sizes=c(10,20,30,40), positive=TRUE)
library(data.table)
library(purrr)
library(scater)
library(scran)
library(ggplot2)
# Temporarily remove the lowly expressed genes
sce_filt <- sce[!(rowMeans(counts(sce)) <= 1 | fData(sce)$pct_dropout > 90),]
# Compute size factors without the lowly expressed genes
sf = computeSumFactors(counts(sce_filt), sizes=c(10,20,30,40), positive=TRUE)
# qplot(sf, sce_filt$total_counts, log="xy", ylab="Library size (mapped reads)", xlab="Size factor")
ggplot(data.frame(sf=log(sf), counts=log(sce_filt$total_counts))) +
geom_point(aes(x=sf,y=counts)) +
labs(y="Library size (log)", x="Size factor (log)") +
theme_bw() +
theme(
axis.title = element_text(colour="black", size=15),
axis.text = element_text(colour="black", size=12)
)
# Normalise and log transform with the lowly expressed genes
sizeFactors(sce) <- sf; sce$sizeFactor <- sf
sizeFactors(sce_filt) <- sf; sce_filt$sizeFactor <- sf
sce <- normalize(sce, exprs_values="counts")
sce_filt <- normalize(sce_filt, exprs_values="counts")
# Update quality metrics
sce = calculateQCMetrics(sce)
# Fit a mean-dependent trend to the gene-specific variances
var.fit <- trendVar(sce_filt, trend="loess", use.spikes=FALSE)
# Decompose the gene-specific variance into biological and technical components
# The technical component of the variance for each gene is determined by interpolating the fitted trend in fit at the mean log-CPM for that gene, which represents variance due to sequencing noise, variability in capture efficiency, etc.
# The biological component is determined by subtracting the technical component from the total variance.
var.out <- decomposeVar(sce, var.fit)
var.out[is.nan(var.out$p.value),] <- NA
fData(sce)$techVar <- var.out$tech
fData(sce)$bioVar <- var.out$bio
fData(sce)$totalVar <- var.out$total
# Detect highly variable genes
# hvg.out <- var.out[which(var.out$bio >= 2.5),]
# hvg.out <- var.out[which(var.out$FDR <= 0.01),]
hvg.out <- var.out[which(var.out$FDR <= 0.01 & var.out$bio >= 1.0),]
hvg.out <- hvg.out[order(hvg.out$bio, decreasing=TRUE),]
fData(sce)$HVG <- rownames(sce) %in% rownames(hvg.out)
fData(sce)$HVG_high <- rownames(sce) %in% rownames(hvg.out) & fData(sce)$mean_exprs>5
fData(sce)$HVG_low <- rownames(sce) %in% rownames(hvg.out) & fData(sce)$mean_exprs<5
# Plot Mean vs Variance relationship
plot(var.out$mean, var.out$total, pch=16, cex=0.6, xlab="Mean log-expression", ylab="Variance of log-expression")
o <- order(var.out$mean)
lines(var.out$mean[o], var.out$tech[o], col="dodgerblue", lwd=2)
# Plot highly variable genes
# points(hvg.out$mean, hvg.out$total, col="green", pch=16)
# Plot selected genes
# Detect lowly variable genes
# lvg.out <- var.out[which(var.out$bio >= -0.5 & var.out$bio <= 0.5),]
# lvg.out <- lvg.out[order(lvg.out$bio, decreasing=TRUE),]
# fData(sce)$LVG <- rownames(sce) %in% rownames(lvg.out)
# fData(sce)$LVG_high <- rownames(sce) %in% rownames(lvg.out) & fData(sce)$mean_exprs>5
# fData(sce)$LVG_low <- rownames(sce) %in% rownames(lvg.out) & fData(sce)$mean_exprs<5
# Plot lowly variable genes
# plot(var.out$mean, var.out$total, pch=16, cex=0.6, xlab="Mean log-expression", ylab="Variance of log-expression")
# o <- order(var.out$mean)
# lines(var.out$mean[o], var.out$tech[o], col="dodgerblue", lwd=2)
# # points(var.out$mean[isSpike(sce_filt)], var.out$total[isSpike(sce_filt)], col="red", pch=16)
# points(lvg.out$mean, lvg.out$total, col="green", pch=16)
var.out
hvg.out
genes <- c("Neck9","Rock2","Sipa1l1","Trmt112")
genes <- c("Neck9","Rock2","Sipa1l1","Trmt112")
hvg.out[genes,]
head(hvg.out)
"Neck9" %in% rownames(hvg.out)
"Rock2" %in% rownames(hvg.out)
dim(hvg.out)
var.out
var.out[genes,]
var.out[genes,]
"Neck9" %in% rownames(sce)
"Neck9" %in% rownames(sce_filt)
genes <- c("Nek9","Rock2","Sipa1l1","Trmt112")
var.out[genes,]
# Fit a mean-dependent trend to the gene-specific variances
var.fit <- trendVar(sce_filt, trend="loess", use.spikes=FALSE)
# Decompose the gene-specific variance into biological and technical components
# The technical component of the variance for each gene is determined by interpolating the fitted trend in fit at the mean log-CPM for that gene, which represents variance due to sequencing noise, variability in capture efficiency, etc.
# The biological component is determined by subtracting the technical component from the total variance.
var.out <- decomposeVar(sce, var.fit)
var.out[is.nan(var.out$p.value),] <- NA
fData(sce)$techVar <- var.out$tech
fData(sce)$bioVar <- var.out$bio
fData(sce)$totalVar <- var.out$total
# Detect highly variable genes
# hvg.out <- var.out[which(var.out$bio >= 2.5),]
# hvg.out <- var.out[which(var.out$FDR <= 0.01),]
hvg.out <- var.out[which(var.out$FDR <= 0.01 & var.out$bio >= 1.0),]
hvg.out <- hvg.out[order(hvg.out$bio, decreasing=TRUE),]
fData(sce)$HVG <- rownames(sce) %in% rownames(hvg.out)
fData(sce)$HVG_high <- rownames(sce) %in% rownames(hvg.out) & fData(sce)$mean_exprs>5
fData(sce)$HVG_low <- rownames(sce) %in% rownames(hvg.out) & fData(sce)$mean_exprs<5
# Plot Mean vs Variance relationship
plot(var.out$mean, var.out$total, pch=16, cex=0.6, xlab="Mean log-expression", ylab="Variance of log-expression")
o <- order(var.out$mean)
lines(var.out$mean[o], var.out$tech[o], col="dodgerblue", lwd=2)
# Plot highly variable genes
# points(hvg.out$mean, hvg.out$total, col="green", pch=16)
# Plot selected genes
genes <- c("Nek9","Rock2","Sipa1l1","Trmt112")
points(var.out[genes,]$mean, var.out[genes,]$total, col="green", pch=16)
# Detect lowly variable genes
# lvg.out <- var.out[which(var.out$bio >= -0.5 & var.out$bio <= 0.5),]
# lvg.out <- lvg.out[order(lvg.out$bio, decreasing=TRUE),]
# fData(sce)$LVG <- rownames(sce) %in% rownames(lvg.out)
# fData(sce)$LVG_high <- rownames(sce) %in% rownames(lvg.out) & fData(sce)$mean_exprs>5
# fData(sce)$LVG_low <- rownames(sce) %in% rownames(lvg.out) & fData(sce)$mean_exprs<5
# Plot lowly variable genes
# plot(var.out$mean, var.out$total, pch=16, cex=0.6, xlab="Mean log-expression", ylab="Variance of log-expression")
# o <- order(var.out$mean)
# lines(var.out$mean[o], var.out$tech[o], col="dodgerblue", lwd=2)
# # points(var.out$mean[isSpike(sce_filt)], var.out$total[isSpike(sce_filt)], col="red", pch=16)
# points(lvg.out$mean, lvg.out$total, col="green", pch=16)
sce["Nek9",]
exprs(sce)["Nek9",]
sort(exprs(sce)["Nek9",])
