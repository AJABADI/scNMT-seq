plot.title=element_text(size=28, face='bold', margin=margin(0,0,10,0), hjust=0.5),
axis.text=element_text(size=rel(1.75), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.title.x = element_text(margin=margin(10,0,0,0)),
legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
# Define ggplot2 boxplot theme for boxplots
boxplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5, margin=margin(0,0,20,0)),
axis.title.y = element_text(colour="black", size=28, vjust=1.5),
axis.title.x = element_text(colour="black", size=28, vjust=1.5, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.8)),
axis.text.y = element_text(colour="black",size=rel(1.8)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="none",
legend.text=element_text(size=15),
legend.title=element_blank(),
legend.background=element_blank(),
panel.border = element_blank()
)
}
# Data
io   <- list()
# io$base_dir   <- "/Users/ricard/data/NMT-seq"
# io$base_dir   <- "/Users/kapouranis/Documents/Andreas/Code/datasets/nmt-seq-data"
io$base_dir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$met_file   <- paste0(io$base_dir, "/met/parsed/met_data.tsv.gz")
io$acc_file   <- paste0(io$base_dir, "/acc/parsed/acc_data.tsv.gz")
# Filtering parameters
opts <- list()
opts$met.min.weight <- 3      # minimum weight per feature (met)
opts$acc.min.weight <- 3      # minimum weight per feature (acc)
opts$min.coverage   <- 0.4    # minimum coverage per feature across samples (met/acc)
opts$fraction.sites <- 0.5    # fraction of sites (met/acc) to keep based on variance
opts$min.n          <- 100    # minimum number of features per annotation
opts$min.s          <- 20     # minimum number of samples to do the correlation
opts$n_perms        <- 100    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
# Define which annotations to use and the order for plotting
opts$met_annos <- c("prom_500_500_cgi","prom_500_500_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
opts$acc_annos <- c("prom_100_100_cgi","prom_100_100_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
anno_names <- c("prom_100_100_cgi"="CGI promoters", "prom_100_100_noncgi"="non-CGI promoters", "prom_500_500_cgi"="CGI promoters", "prom_500_500_noncgi"="non-CGI promoters", "active_enhancers"="Active enhancers", "super_enhancers"="Super enhancers", "primed_enhancers"="Primed enhancers", "exons"="Exons", "introns"="Introns")
met <- fread(sprintf("zcat < %s", io$met_file)) %>% as.data.table %>% .[anno %in% opts$met_annos] %>% .[,anno:=factor(anno, levels=opts$met_annos)] %>% .[,anno:=stringr::str_replace_all(anno, anno_names)]
acc <- fread(sprintf("zcat < %s", io$acc_file)) %>% as.data.table %>% .[anno %in% opts$acc_annos] %>% .[,anno:=factor(anno, levels=opts$acc_annos)] %>% .[,anno:=stringr::str_replace_all(anno, anno_names)]
# Intersect the two data sets
metacc <- merge(met[,c("sample", "id", "anno", "rate", "weight")] %>% setnames(c("rate", "weight"), c("met_rate", "met_weight")),
acc[,c("sample", "id", "anno", "rate", "weight")] %>% setnames(c("rate", "weight"), c("acc_rate", "acc_weight")),
by=c("sample", "id", "anno"))
rm(met, acc)
## Remove features with low weight (all types of correlation)
metacc <- metacc[met_weight >= opts$met.min.weight & acc_weight >= opts$acc.min.weight]
# To correlate across samples
metacc_filt <- copy(metacc)
#
## Filter sites with low coverage
nsamples <- length(unique(metacc$sample))
metacc_filt <- metacc_filt[, cov := .N / nsamples, by = c("id", "anno")] %>% .[cov >= opts$min.coverage] %>% .[, cov := NULL]
metacc <- metacc[, cov := .N / nsamples, by = c("id", "anno")] %>% .[cov >= opts$min.coverage] %>% .[, cov := NULL]
#
## Filter id pairs with small number of samples to do the correlation
metacc_filt <- metacc_filt[, n := .N, by = c("id", "anno")] %>% .[n >= opts$min.s] %>% .[, n := NULL]
#
## Remove constant sites and filter based on variability (separately for each feature)
keep_hv_sites <- metacc_filt %>% split(.$anno) %>% map(~ .[,.(met_var = wtd.var(met_rate, met_weight), acc_var = wtd.var(acc_rate, acc_weight)), by = c("id")] %>% .[met_var > 2 | acc_var > 2] %>% .[, var := acc_var * met_var] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.sites) %>% .$id)
metacc_filt <- metacc_filt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% keep_hv_sites[[y]]]) %>% rbindlist
#
## Filter annotations with few sites
keep_anno <- metacc_filt[, .(N = length(unique(id))), by = "anno"] %>% .[N > opts$min.n, anno]
metacc_filt <- metacc_filt[anno %in% keep_anno] %>% .[, anno := drop.levels(anno)]
keep_anno <- metacc[, .(N = length(unique(id))), by = "anno"] %>% .[N > opts$min.n, anno]
metacc <- metacc[anno %in% keep_anno] %>% .[, anno := drop.levels(anno)]
# Weighted correlation
if (opts$weight == TRUE){
if (opts$method != "pearson") { print("Weighted correlation only supported for pearson"); stop() }
# Correlate rate across samples
cor_samples <- metacc_filt[, wtd.cor(met_rate, acc_rate, met_weight)[, c("correlation", "t.value", "p.value")], by = c("id", "anno")]
# Correlate rate across genes
cor_regions <- metacc[, wtd.cor(met_rate, acc_rate, met_weight)[, c("correlation", "t.value", "p.value")], by = c("sample", "anno")]
}else{
# Correlate rate across samples
cor_samples <- metacc_filt[, .(V1 = unlist(cor.test(met_rate, acc_rate, alternative = "two.sided", method = opts$method)[c("estimate", "statistic", "p.value")])), by = c("id", "anno")]
# Correlate rate across genes
cor_regions <- metacc[, .(V1 = unlist(cor.test(met_rate, acc_rate, alternative = "two.sided", method = opts$method)[c("estimate", "statistic", "p.value")])), by = c("sample", "anno")]
}
# Compute adjusted p-values across samples (both FDR and Bonferroni)
cor_samples <- cor_samples %>% .[, para := c("r", "t", "p")] %>% dcast(id + anno ~ para, value.var = "V1") %>%
.[, c("padj_fdr", "padj_bonf") := list(p.adjust(p, method = "fdr"), p.adjust(p, method = "bonferroni")), by = anno] %>%
.[, c("log_padj_fdr","log_padj_bonf") := list(-log10(padj_fdr), -log10(padj_bonf))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>%  setorder(padj_fdr)
# Compute adjusted p-values across genes (both FDR and Bonferroni)
cor_regions <- cor_regions %>% .[,para := c("r", "t", "p")] %>% dcast(sample + anno ~ para, value.var = "V1") %>%
.[, c("padj_fdr", "padj_bonf") := list(p.adjust(p, method = "fdr"), p.adjust(p, method = "bonferroni")), by = anno] %>%
.[, c("log_padj_fdr", "log_padj_bonf") := list(-log10(padj_fdr), -log10(padj_bonf))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>% setorder(padj_fdr)
pp_vals <- vector(mode = "numeric", length = length(cor_samples$p))
# For each iteration...
for (k in 1:opts$n_perms){
# Copy original data
metacc_filt_perm <- copy(metacc_filt)
# Permute accessibility rates
metacc_filt_perm <- metacc_filt_perm[, acc_rate := sample(acc_rate), by = c("id", "anno")]
# Compute correlation across samples
cor_samples_perm <- metacc_filt_perm[, .(p = wtd.cor(met_rate, acc_rate, met_weight)[, c("p.value")]), by = c("id", "anno")]
# For each annotation sort by p-value
cor_samples_perm <- cor_samples_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# Add the sorted p-values
pp_vals <- pp_vals + cor_samples_perm %>% .[, p]
}
# Compute the average p-values
pp_vals <- pp_vals / opts$n_perms
# Store them in a data.table for later analysis
cor_samples_perm <- cor_samples_perm[, p := pp_vals]
# Rename annotations for better plotting
cor_samples$anno <- stringr::str_replace_all(cor_samples$anno, anno_names)
cor_samples_perm$anno <- stringr::str_replace_all(cor_samples_perm$anno, anno_names)
cor_regions$anno <- stringr::str_replace_all(cor_regions$anno, anno_names)
#pdf(file=paste0("out/cor.pdf"), width = 15, height = 7, useDingbats = FALSE)
pp = qq <- list()
for (n in unique(cor_samples$anno)) {
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
# Create volcano plot
pp[[n]] <- gg_volcano_plot(cor_samples[anno == n,], title = n)
# Crete qqplot
qq[[n]] <- gg_qqplot(cor_samples[anno == n, ], cor_samples_perm[anno == n]$p, title = "")
# print(plot_grid(pp[[n]], qq[[n]], labels = c("", ""), label_size = 20, ncol = 2, nrow = 1))
}
#dev.off()
# save(cor_samples, cor_samples_perm, cor_regions, file = "out/cor.RData")
save(cor_samples, cor_samples_perm, cor_regions, file = "out/cor.RData")
pdf(file=paste0("out/cor.pdf"), width = 26, height = 34, useDingbats = FALSE)
print(plot_grid(pp[[1]], qq[[1]], pp[[2]], qq[[2]], pp[[3]], qq[[3]], pp[[4]], qq[[4]], pp[[5]], qq[[5]], pp[[6]], qq[[6]], pp[[7]], qq[[7]], pp[[8]], qq[[8]], pp[[9]], qq[[9]], pp[[10]], qq[[10]], pp[[11]], qq[[11]], pp[[12]], qq[[12]], pp[[13]], qq[[13]], pp[[14]], qq[[14]], labels = c("A", "", "B", "", "C", "", "D", "", "E", "", "F", "", "G", "", "H", "", "I", "", "J", "", "K", "", "L", "", "M", "", "N", "", "O", ""), label_size = 35, ncol = 4, nrow = 7))
dev.off
# Boxplot of correlations across samples
p <- ggplot(cor_samples[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="palegreen4") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_cells.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across genes
p <- ggplot(cor_regions[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="palegreen4") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_genes.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across samples
p <- ggplot(cor_samples[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="palegreen4") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_cells.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across genes
p <- ggplot(cor_regions[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="springgreen4") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_genes.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across samples
p <- ggplot(cor_samples[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_cells.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across genes
p <- ggplot(cor_regions[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="springgreen4") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_genes.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across samples
p <- ggplot(cor_samples[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_cells.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across genes
p <- ggplot(cor_regions[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_genes.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across samples
p <- ggplot(cor_samples[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="olivedrab3") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_cells.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across genes
p <- ggplot(cor_regions[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_genes.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across samples
p <- ggplot(cor_samples[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="darkseagreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_cells.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across genes
p <- ggplot(cor_regions[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_genes.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across samples
p <- ggplot(cor_samples[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="darkolivegreen4") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_cells.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across genes
p <- ggplot(cor_regions[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_genes.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across samples
p <- ggplot(cor_samples[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="darkgreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_cells.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across genes
p <- ggplot(cor_regions[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_genes.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across samples
p <- ggplot(cor_samples[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_cells.pdf", width = 12, height = 8)
print(p)
dev.off()
# Boxplot of correlations across genes
p <- ggplot(cor_regions[,c("anno","r")], aes(x=anno, y=r, fill=anno)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="yellowgreen") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() +
boxplot_theme()
p
pdf(file="out/across_genes.pdf", width = 12, height = 8)
print(p)
dev.off()
length(pp)
pdf(file=paste0("out/cor_multipage.pdf"), width = 26, height = 34, useDingbats = FALSE)
print(plot_grid(pp[[1]], qq[[1]], pp[[2]], qq[[2]], pp[[3]], qq[[3]], pp[[4]], qq[[4]], pp[[5]], qq[[5]], pp[[6]], qq[[6]], pp[[7]], qq[[7]], pp[[8]], qq[[8]], labels = c("A", "", "B", "", "C", "", "D", "", "E", "", "F", "", "G", "", "H", ""), label_size = 35, ncol = 4, nrow = 4))
print(plot_grid(pp[[9]], qq[[9]], pp[[10]], qq[[10]], pp[[11]], qq[[11]], pp[[12]], qq[[12]], pp[[13]], qq[[13]], pp[[14]], qq[[14]], labels = c("I", "", "J", "", "K", "", "L", "", "M", "", "N", ""), label_size = 35, ncol = 4, nrow = 3))
dev.off
pdf(file=paste0("out/cor_multipage.pdf"), width = 26, height = 34, useDingbats = FALSE)
plot_grid(pp[[1]], qq[[1]], pp[[2]], qq[[2]], pp[[3]], qq[[3]], pp[[4]], qq[[4]], pp[[5]], qq[[5]], pp[[6]], qq[[6]], pp[[7]], qq[[7]], pp[[8]], qq[[8]], labels = c("A", "", "B", "", "C", "", "D", "", "E", "", "F", "", "G", "", "H", ""), label_size = 35, ncol = 4, nrow = 4)
plot_grid(pp[[9]], qq[[9]], pp[[10]], qq[[10]], pp[[11]], qq[[11]], pp[[12]], qq[[12]], pp[[13]], qq[[13]], pp[[14]], qq[[14]], labels = c("I", "", "J", "", "K", "", "L", "", "M", "", "N", ""), label_size = 35, ncol = 4, nrow = 3)
dev.off
pdf(file=paste0("out/cor_multipage.pdf"), width = 26, height = 24, useDingbats = FALSE)
plot_grid(pp[[1]], qq[[1]], pp[[2]], qq[[2]], pp[[3]], qq[[3]], pp[[4]], qq[[4]], pp[[5]], qq[[5]], pp[[6]], qq[[6]], pp[[7]], qq[[7]], pp[[8]], qq[[8]], labels = c("A", "", "B", "", "C", "", "D", "", "E", "", "F", "", "G", "", "H", ""), label_size = 35, ncol = 4, nrow = 4)
plot_grid(pp[[9]], qq[[9]], pp[[10]], qq[[10]], pp[[11]], qq[[11]], pp[[12]], qq[[12]], pp[[13]], qq[[13]], pp[[14]], qq[[14]], labels = c("I", "", "J", "", "K", "", "L", "", "M", "", "N", ""), label_size = 35, ncol = 4, nrow = 3)
dev.off
pdf(file=paste0("out/cor_multipage.pdf"), width = 24, height = 24, useDingbats = FALSE)
plot_grid(pp[[1]], qq[[1]], pp[[2]], qq[[2]], pp[[3]], qq[[3]], pp[[4]], qq[[4]], pp[[5]], qq[[5]], pp[[6]], qq[[6]], pp[[7]], qq[[7]], pp[[8]], qq[[8]], labels = c("A", "", "B", "", "C", "", "D", "", "E", "", "F", "", "G", "", "H", ""), label_size = 35, ncol = 4, nrow = 4)
plot_grid(pp[[9]], qq[[9]], pp[[10]], qq[[10]], pp[[11]], qq[[11]], pp[[12]], qq[[12]], pp[[13]], qq[[13]], pp[[14]], qq[[14]], labels = c("I", "", "J", "", "K", "", "L", "", "M", "", "N", ""), label_size = 35, ncol = 4, nrow = 3)
dev.off
pdf(file=paste0("out/cor_multipage.pdf"), width = 24, height = 24, useDingbats = FALSE)
plot_grid(pp[[1]], qq[[1]], pp[[2]], qq[[2]], pp[[3]], qq[[3]], pp[[4]], qq[[4]], pp[[5]], qq[[5]], pp[[6]], qq[[6]], pp[[7]], qq[[7]], pp[[8]], qq[[8]], labels = c("A", "", "B", "", "C", "", "D", "", "E", "", "F", "", "G", "", "H", ""), label_size = 35, ncol = 4, nrow = 4)
plot_grid(pp[[9]], qq[[9]], pp[[10]], qq[[10]], pp[[11]], qq[[11]], pp[[12]], qq[[12]], pp[[13]], qq[[13]], pp[[14]], qq[[14]], labels = c("I", "", "J", "", "K", "", "L", "", "M", "", "N", ""), label_size = 35, ncol = 4, nrow = 3)
dev.off
pdf(file=paste0("out/cor.pdf"), width = 24, height = 34, useDingbats = FALSE)
plot_grid(pp[[1]], qq[[1]], pp[[2]], qq[[2]], pp[[3]], qq[[3]], pp[[4]], qq[[4]], pp[[5]], qq[[5]], pp[[6]], qq[[6]], pp[[7]], qq[[7]], pp[[8]], qq[[8]], pp[[9]], qq[[9]], pp[[10]], qq[[10]], pp[[11]], qq[[11]], pp[[12]], qq[[12]], pp[[13]], qq[[13]], pp[[14]], qq[[14]], labels = c("A", "", "B", "", "C", "", "D", "", "E", "", "F", "", "G", "", "H", "", "I", "", "J", "", "K", "", "L", "", "M", "", "N", ""), label_size = 35, ncol = 4, nrow = 7)
dev.off
# pdf(file=paste0("out/cor_multipage.pdf"), width = 24, height = 24, useDingbats = FALSE)
# plot_grid(pp[[1]], qq[[1]], pp[[2]], qq[[2]], pp[[3]], qq[[3]], pp[[4]], qq[[4]], pp[[5]], qq[[5]], pp[[6]], qq[[6]], pp[[7]], qq[[7]], pp[[8]], qq[[8]], labels = c("A", "", "B", "", "C", "", "D", "", "E", "", "F", "", "G", "", "H", ""), label_size = 35, ncol = 4, nrow = 4)
#
# plot_grid(pp[[9]], qq[[9]], pp[[10]], qq[[10]], pp[[11]], qq[[11]], pp[[12]], qq[[12]], pp[[13]], qq[[13]], pp[[14]], qq[[14]], labels = c("I", "", "J", "", "K", "", "L", "", "M", "", "N", ""), label_size = 35, ncol = 4, nrow = 3)
# dev.off
pdf(file=paste0("out/cor.pdf"), width = 24, height = 34, useDingbats = FALSE)
plot_grid(pp[[1]], qq[[1]], pp[[2]], qq[[2]], pp[[3]], qq[[3]], pp[[4]], qq[[4]], pp[[5]], qq[[5]], pp[[6]], qq[[6]], pp[[7]], qq[[7]], pp[[8]], qq[[8]], pp[[9]], qq[[9]], pp[[10]], qq[[10]], pp[[11]], qq[[11]], pp[[12]], qq[[12]], pp[[13]], qq[[13]], pp[[14]], qq[[14]], labels = c("A", "", "B", "", "C", "", "D", "", "E", "", "F", "", "G", "", "H", "", "I", "", "J", "", "K", "", "L", "", "M", "", "N", ""), label_size = 35, ncol = 4, nrow = 7)
dev.off
pdf(file=paste0("out/cor_multipage.pdf"), width = 24, height = 24, useDingbats = FALSE)
plot_grid(pp[[1]], qq[[1]], pp[[2]], qq[[2]], pp[[3]], qq[[3]], pp[[4]], qq[[4]], pp[[5]], qq[[5]], pp[[6]], qq[[6]], pp[[7]], qq[[7]], pp[[8]], qq[[8]], labels = c("A", "", "B", "", "C", "", "D", "", "E", "", "F", "", "G", "", "H", ""), label_size = 35, ncol = 4, nrow = 4)
plot_grid(pp[[9]], qq[[9]], pp[[10]], qq[[10]], pp[[11]], qq[[11]], pp[[12]], qq[[12]], pp[[13]], qq[[13]], pp[[14]], qq[[14]], labels = c("I", "", "J", "", "K", "", "L", "", "M", "", "N", ""), label_size = 35, ncol = 4, nrow = 3)
dev.off
# pdf(file=paste0("out/cor.pdf"), width = 24, height = 34, useDingbats = FALSE)
# plot_grid(pp[[1]], qq[[1]], pp[[2]], qq[[2]], pp[[3]], qq[[3]], pp[[4]], qq[[4]], pp[[5]], qq[[5]], pp[[6]], qq[[6]], pp[[7]], qq[[7]], pp[[8]], qq[[8]], pp[[9]], qq[[9]], pp[[10]], qq[[10]], pp[[11]], qq[[11]], pp[[12]], qq[[12]], pp[[13]], qq[[13]], pp[[14]], qq[[14]], labels = c("A", "", "B", "", "C", "", "D", "", "E", "", "F", "", "G", "", "H", "", "I", "", "J", "", "K", "", "L", "", "M", "", "N", ""), label_size = 35, ncol = 4, nrow = 7)
# dev.off
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(data.table))
setwd("~/Documents/Code/nmt-seq/correlations/metacc")
# Create a quantile-quantile plot
# https://gist.github.com/slowkow/9041570
# Assumptions:
#   - Expected P values are uniformly distributed.
#   - Confidence intervals assume independence between tests
#
# cor_res is a data.table
# perm_xs is a vector of permuted p-values
# ci is the size of the confidence interval
gg_qqplot = function(cor_res, perm_xs, ci=0.95, title = "Quantile-quantile plot of p-values"){
xs <- cor_res$p
cor_res <- cor_res[, expected := -log10(1:.N / .N)]
N  <- length(xs)
df <- data.frame(observed = -log10(sort(xs)),
permuted = -log10(sort(perm_xs)),
expected = -log10(1:N / N),
cupper   = -log10(qbeta(ci,     1:N, N - 1:N + 1)),
clower   = -log10(qbeta(1 - ci, 1:N, N - 1:N + 1)))
log10Pe = expression(paste("Expected -log"[10], "(", plain(p), ")" ))
log10Po = expression(paste("Observed -log"[10], "(", plain(p), ")" ))
ggplot(df) +
geom_point(aes(expected, permuted), shape=3, size=1.5, color = "cornflowerblue") +
geom_abline(intercept=0, slope=1, alpha=0.5, color = "darkgrey") +
geom_line(aes(expected, cupper), linetype=2, color = "darkgrey") +
geom_line(aes(expected, clower), linetype=2, color = "darkgrey") +
#geom_point(aes(expected, observed), size=2) +
geom_point(data=cor_res, aes(expected, -log10(sort(p)), color = sig), size=2) +
scale_color_manual(values=c("black","red")) +
xlab(log10Pe) +
ylab(log10Po) +
labs(title=title) +
scatter_theme()
}
# Create a volcano plot with correlations on the x-axis
# and p-values on the y-axis
#
# cor_samples is a data.table with at least two columns:
#  r : correlations
#  p : p-values
gg_volcano_plot <- function(cor_samples, title = ""){
p <- ggplot(cor_samples, aes(x=r, y=-log10(p))) +
labs(title=title, x="r", y=expression(paste("-log"[10],"(",plain(p),")"))) +
#geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=7), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
scale_x_continuous(limits=c(-1,1)) +
scale_y_continuous(limits=c(0,7.5)) +
annotate("text", x=0, y=7.37, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-0.5, y=7.37, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=0.5, y=7.37, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# ggrepel::geom_text_repel(data=cor_samples[sig == TRUE], aes(x=r, y=-log10(p), label=gene), size=6) +
scatter_theme()
}
# Define ggplot2 theme for scatter plots
scatter_theme <- function(){
p <- theme(
plot.title=element_text(size=28, face='bold', margin=margin(0,0,10,0), hjust=0.5),
axis.text=element_text(size=rel(1.75), color='black'),
axis.title=element_text(size=rel(1.95), color='black'),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.title.x = element_text(margin=margin(10,0,0,0)),
legend.position="none",
panel.border=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
# Define ggplot2 boxplot theme for boxplots
boxplot_theme <- function() {
p <- theme(
plot.title = element_text(size=30, hjust=0.5, margin=margin(0,0,20,0)),
axis.title.y = element_text(colour="black", size=28, vjust=1.5),
axis.title.x = element_text(colour="black", size=28, vjust=1.5, margin=margin(15,0,0,0)),
axis.text.x = element_text(colour="black",size=rel(1.8)),
axis.text.y = element_text(colour="black",size=rel(1.8)),
axis.line = element_line(colour="black", size=rel(0.7)),
axis.ticks.x = element_line(colour="black", size=rel(0.8)),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.position="none",
legend.text=element_text(size=15),
legend.title=element_blank(),
legend.background=element_blank(),
panel.border = element_blank()
)
}
# Data
io   <- list()
# io$base_dir   <- "/Users/ricard/data/NMT-seq"
# io$base_dir   <- "/Users/kapouranis/Documents/Andreas/Code/datasets/nmt-seq-data"
io$base_dir   <- "/home/cakapourani/Documents/Code/datasets/nmt-seq-data"
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$met_file   <- paste0(io$base_dir, "/met/parsed/met_data.tsv.gz")
io$acc_file   <- paste0(io$base_dir, "/acc/parsed/acc_data.tsv.gz")
# Filtering parameters
opts <- list()
opts$met.min.weight <- 3      # minimum weight per feature (met)
opts$acc.min.weight <- 3      # minimum weight per feature (acc)
opts$min.coverage   <- 0.4    # minimum coverage per feature across samples (met/acc)
opts$fraction.sites <- 0.5    # fraction of sites (met/acc) to keep based on variance
opts$min.n          <- 100    # minimum number of features per annotation
opts$min.s          <- 20     # minimum number of samples to do the correlation
opts$n_perms        <- 100    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
# Define which annotations to use and the order for plotting
opts$met_annos <- c("prom_500_500_cgi","prom_500_500_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
opts$acc_annos <- c("prom_100_100_cgi","prom_100_100_noncgi","exons","introns","active_enhancers","super_enhancers","primed_enhancers","CTCF","Nanog","Oct4","IAP","p300","DHS","CGI")
anno_names <- c("prom_100_100_cgi"="CGI promoters", "prom_100_100_noncgi"="non-CGI promoters", "prom_500_500_cgi"="CGI promoters", "prom_500_500_noncgi"="non-CGI promoters", "active_enhancers"="Active enhancers", "super_enhancers"="Super enhancers", "primed_enhancers"="Primed enhancers", "exons"="Exons", "introns"="Introns")
load("out/cor.RData")
cor_samples]
cor_samples
cor_samples[, 1:10]
cor_samples[, 1:5]
cor_samples[anno == "Introns", 1:5]
